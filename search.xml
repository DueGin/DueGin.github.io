<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>四种开发模型</title>
    <url>/2021/09/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%90%86%E8%AE%BA/%E5%9B%9B%E7%A7%8D%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="四种开发模型"><a href="#四种开发模型" class="headerlink" title="四种开发模型"></a>四种开发模型</h1><h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>有利于大型软件开发过程中人员的组织、管理，有利于软件开发方法和工具的研究，从而提高了大型软件项目开发的质量和效率。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>开发过程一般不能逆转，否则代价太大</li>
<li>实际的项目开发很难严格按该模型进行</li>
<li>客户往往很难清楚地给出所有的需求，而该模型却要求如此</li>
<li>软件的实际情况必须到项目开发的后期客户才能看到，这要求客户有足够的耐心。</li>
</ol>
<h3 id="瀑布模型的使用范围"><a href="#瀑布模型的使用范围" class="headerlink" title="瀑布模型的使用范围"></a>瀑布模型的使用范围</h3><ol>
<li>用户的需求非常清楚全面，且在开发过程中没有或很少变化</li>
<li>开发人员对软件的应用领域很熟悉</li>
<li>用户的使用环境非常稳定</li>
<li>开发工作对用户参与的要求很低。</li>
</ol>
<hr>
<h2 id="快速原型模型"><a href="#快速原型模型" class="headerlink" title="快速原型模型"></a>快速原型模型</h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol>
<li>可以得到比较良好的需求定义，容易适应需求的变化</li>
<li>有利于开发与培训的同步</li>
<li>开发费用低、开发周期短且对用户更友好。</li>
</ol>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>客户与开发者对原型理解不同</li>
<li>准确的原型设计比较困难</li>
<li>不利于开发人员的创新。</li>
</ol>
<h3 id="快速原型模型的使用范围"><a href="#快速原型模型的使用范围" class="headerlink" title="快速原型模型的使用范围"></a>快速原型模型的使用范围</h3><ol>
<li>对所开发的领域比较熟悉而且有快速的原型开发工具</li>
<li>项目招投标时，可以以原型模型作为软件的开发模型</li>
<li>进行产品移植或升级时，或对已有产品原型进行客户化工作时，原型模型是非常适合的。</li>
</ol>
<hr>
<h2 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h2><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol>
<li>人员分配灵活，刚开始不用投入大量人力资源</li>
<li>如果核心产品很受欢迎，则可增加人力实现下一个增量</li>
<li>可先发布部分功能给客户，对客户起到镇静剂的作用。</li>
</ol>
<h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>并行开发构件有可能遇到不能集成的风险，软件必须具备开放式的体系结构</li>
<li>增量模型的灵活性可以使其适应这种变化的能力大大优于瀑布模型和快速原型模型，但也很容易退化为边做边改模型，从而是软件过程的控制失去整体性。</li>
</ol>
<h3 id="增量模型的使用范围"><a href="#增量模型的使用范围" class="headerlink" title="增量模型的使用范围"></a>增量模型的使用范围</h3><ol>
<li>进行已有产品升级或新版本开发，增量模型是非常适合的</li>
<li>对完成期限严格要求的产品，可以使用增量模型</li>
<li>对所开发的领域比较熟悉而且已有原型系统，增量模型也是非常适合的。</li>
</ol>
<hr>
<h2 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h2><h3 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h3><ol>
<li>设计上的灵活性，可以在项目的各个阶段进行变更</li>
<li>以小的分段来构建大型系统，使成本计算变得简单容易</li>
<li>客户始终参与每个阶段的开发，保证了项目不偏离正确方向以及项目的可控性</li>
<li>随着项目推进，客户始终掌握项目的最新信息，从而他或她能够和管理层有效地交互。</li>
</ol>
<h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>采用螺旋模型需要具有相当丰富的风险评估经验和专门知识，在风险较大的项目开发中，如果未能够及时标识风险，势必造成重大损失</li>
<li>过多的迭代次数会增加开发成本，延迟提交时间。</li>
</ol>
<h3 id="螺旋模型的使用范围"><a href="#螺旋模型的使用范围" class="headerlink" title="螺旋模型的使用范围"></a>螺旋模型的使用范围</h3><ul>
<li>螺旋模型只适合于大规模的软件项目。</li>
</ul>
]]></content>
      <categories>
        <category>blog1</category>
      </categories>
      <tags>
        <tag>理论</tag>
        <tag>开发模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2021/09/27/Markdown/Markdown%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="# 一级标题"></a><code># 一级标题</code></h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="## 二级标题"></a><code>## 二级标题</code></h2><p><code>#...#以此类推</code></p>
<hr>
<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p><code>*斜体文本*</code>    <em>斜体文本</em>    /    <code>_斜体文本_</code>    <em>斜体文本</em></p>
<p><code>**粗体文本**</code>    <strong>粗体文本</strong>    /    <code>__粗体文本__</code>    <strong>粗体文本</strong></p>
<p><code>***粗斜体文本***</code>    <em><strong>粗斜体文本</strong></em>    /    <code>___粗斜体文本___</code>    <em><strong>粗斜体文本</strong></em></p>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><code>~~删除线~~</code></p>
<p><del>ABC的</del></p>
<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p><code>&lt;u&gt;下划线&lt;/u&gt;</code></p>
<p><u>下划线</u></p>
<h2 id="脚注-脚注"><a href="#脚注-脚注" class="headerlink" title="脚注^脚注"></a>脚注<a href="%E6%8A%8A%E9%BC%A0%E6%A0%87%E5%81%9C%E7%95%99%E5%9C%A8%E8%BF%99%E9%87%8C%E8%83%BD%E6%98%BE%E7%A4%BA%E5%A4%87%E6%B3%A8">^脚注</a></h2><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p><em><strong>与C一样</strong></em></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">**文本加粗**</span> </span><br><span class="line">\<span class="emphasis">*\*</span> 正常显示星号 \<span class="emphasis">*\*</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p><strong>文本加粗</strong><br>** 正常显示星号 **</p>
<h2 id="分隔线："><a href="#分隔线：" class="headerlink" title="分隔线："></a>分隔线：</h2><p><code>***</code></p>
<p><code>*****</code></p>
<p><code>---</code></p>
<p><code>-----------×N</code></p>
<p>**—**按回车后即可生成分隔线</p>
<hr>
<h1 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h1><h2 id="普通列表"><a href="#普通列表" class="headerlink" title="普通列表"></a>普通列表</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
<li>… …</li>
</ul>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<ol>
<li><p>第一项：</p>
<ul>
<li>第一项嵌套的第一个元素<ul>
<li>第一项嵌套的第一个元素的第一个元素<ul>
<li>第一项嵌套的第一个元素的第一个元素的第一个元素</li>
</ul>
</li>
</ul>
</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li><p>第二项：</p>
<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 最外层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第一层嵌套</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="区块中使用列表"><a href="#区块中使用列表" class="headerlink" title="区块中使用列表"></a>区块中使用列表</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 区块中使用列表</span></span><br><span class="line"><span class="quote">&gt; 1. 第一项</span></span><br><span class="line"><span class="quote">&gt; 2. 第二项</span></span><br><span class="line"><span class="quote">&gt; - 第一项</span></span><br><span class="line"><span class="quote">&gt; - 第二项</span></span><br><span class="line"><span class="quote">&gt; - 第三项</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<blockquote>
<p>区块中使用列表</p>
<ol>
<li><p>第一项</p>
</li>
<li><p>第二项</p>
</li>
</ol>
<ul>
<li><p>第一项</p>
</li>
<li><p>第二项</p>
</li>
<li><p>第三项</p>
</li>
</ul>
</blockquote>
<h2 id="列表中使用区块"><a href="#列表中使用区块" class="headerlink" title="列表中使用区块"></a>列表中使用区块</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="code">    &gt; 菜鸟教程</span></span><br><span class="line"><span class="code">    &gt; 学的不仅是技术更是梦想</span></span><br><span class="line"><span class="code">* 第二项</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<ul>
<li><p>第一项</p>
<blockquote>
<p>菜鸟教程</p>
<p>学的不仅是技术更是梦想</p>
</blockquote>
</li>
<li><p>第二项</p>
</li>
</ul>
<h2 id="表头信息"><a href="#表头信息" class="headerlink" title="表头信息"></a>表头信息</h2><p><code>---</code></p>
<p>信息</p>
<p><code>---</code></p>
<p>如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Markdown</span><br><span class="line">date: 2021-09-27 21:45:24</span><br><span class="line">tags: [Markdown]</span><br><span class="line"><span class="section">categories: blog1</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h1><h2 id="代码片段用：-包起来"><a href="#代码片段用：-包起来" class="headerlink" title="代码片段用：(`)包起来"></a>代码片段用：(<strong>`</strong>)包起来</h2><p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`printf()`</span><br></pre></td></tr></table></figure>



<p>显示结果如下：</p>
<p>​    <code>printf()</code> 函数</p>
<h2 id="用-包裹表示一段代码："><a href="#用-包裹表示一段代码：" class="headerlink" title="用(```)包裹表示一段代码："></a>用(<strong>```</strong>)包裹表示一段代码：</h2><p>输入(<strong>```</strong>)后按回车即可生成代码片段框，可以指定一种语言（也可以不指定）</p>
<p>如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```#include&lt;iostream&gt;using namespace std;int main()&#123;    cout&lt;&lt;&quot;Hello world!&quot;&lt;&lt;endl;    return 0;&#125;```</span></span><br></pre></td></tr></table></figure>



<p>显示结果如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>using namespace std;int main()&#123;    cout&lt;&lt;<span class="meta-string">&quot;Hello world!&quot;</span>&lt;&lt;endl;    return 0;&#125;</span></span><br></pre></td></tr></table></figure>



<hr>
<h1 id="链接🔗"><a href="#链接🔗" class="headerlink" title="链接🔗"></a>链接🔗</h1><h2 id="①-点字链接"><a href="#①-点字链接" class="headerlink" title="① 点字链接"></a>① 点字链接</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址</span>)或者&lt;链接地址&gt;</span><br></pre></td></tr></table></figure>



<p>例如：</p>
<p><code>这是一个链接 [菜鸟教程](https://www.runoob.com)</code></p>
<p>显示结果如下：</p>
<p>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a></p>
<h2 id="②-直接使用链接"><a href="#②-直接使用链接" class="headerlink" title="② 直接使用链接"></a>② 直接使用链接</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml">&lt;https://www.runoob.com&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p><a href="https://www.runoob.com/">https://www.runoob.com</a></p>
<h2 id="③-高级链接"><a href="#③-高级链接" class="headerlink" title="③ 高级链接"></a>③ 高级链接</h2><p>可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [<span class="string">Google</span>][<span class="symbol">1</span>]这个链接用 runoob 作为网址变量 [<span class="string">Runoob</span>][<span class="symbol">runoob</span>]然后在文档的结尾为变量赋值（网址）  [1]: http://www.google.com/  [runoob]: http://www.runoob.com/</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p>
<hr>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>两种表示方法</p>
<h2 id="①"><a href="#①" class="headerlink" title="①"></a>①</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)![<span class="string">alt 属性文本</span>](<span class="link">图片地址 &quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>开头一个感叹号 !</p>
</li>
<li><p>接着一个方括号，里面放上图片的替代文字</p>
</li>
<li><p>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p>
</li>
</ul>
<p>例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">RUNOOB 图标</span>](<span class="link">http://static.runoob.com/images/runoob-logo.png</span>)![<span class="string">RUNOOB 图标</span>](<span class="link">http://static.runoob.com/images/runoob-logo.png &quot;RUNOOB&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p>
<p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标" title="RUNOOB"></p>
<h2 id="②"><a href="#②" class="headerlink" title="②"></a>②</h2><p>也可以像网址那样对图片网址使用变量:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [<span class="string">RUNOOB</span>][<span class="symbol">1</span>].然后在文档的结尾为变量赋值（网址）[1]: http://static.runoob.com/images/runoob-logo.png</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">RUNOOB</a>.<br>然后在文档的结尾为变量赋值（网址）</p>
<h2 id="图片格式（高度、宽度）"><a href="#图片格式（高度、宽度）" class="headerlink" title="图片格式（高度、宽度）"></a>图片格式（高度、宽度）</h2><p>Markdown 还没有办法指定图片的高度与宽度，需要的话，可以使用**<img>**标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;50%&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<img src="http://static.runoob.com/images/runoob-logo.png" width="50%">



<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 表头 | 表头 |</span><br><span class="line">| ---- | ---- |</span><br><span class="line">| 单元格|单元格|</span><br><span class="line">|单元格|单元格|</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<table>
<thead>
<tr>
<th align="left">表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td>单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<h2 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h2><ul>
<li><p><strong><code>-:</code></strong> 设置内容和标题栏居右对齐。</p>
</li>
<li><p><strong><code>:-</code></strong> 设置内容和标题栏居左对齐。</p>
</li>
<li><p><strong><code>:-:</code></strong> 设置内容和标题栏居中对齐。</p>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<hr>
<h1 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h1><p>目前支持HTML元素有<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">使用 <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Alt<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Del<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
<hr>
<h1 id="画流程图、时序图-顺序图-、甘特图"><a href="#画流程图、时序图-顺序图-、甘特图" class="headerlink" title="画流程图、时序图(顺序图)、甘特图"></a>画流程图、时序图(顺序图)、甘特图</h1><h2 id="1、横向流程图源码格式："><a href="#1、横向流程图源码格式：" class="headerlink" title="1、横向流程图源码格式："></a>1、横向流程图源码格式：</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">graph LR</span></span><br><span class="line"><span class="code">A[方形] --&gt;B(圆角)</span></span><br><span class="line"><span class="code">    B --&gt; C&#123;条件a&#125;</span></span><br><span class="line"><span class="code">    C --&gt;|a=1| D[结果1]</span></span><br><span class="line"><span class="code">    C --&gt;|a=2| E[结果2]</span></span><br><span class="line"><span class="code">    F[横向流程图]</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure>





<h2 id="2、竖向流程图源码格式："><a href="#2、竖向流程图源码格式：" class="headerlink" title="2、竖向流程图源码格式："></a>2、竖向流程图源码格式：</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">graph TD</span></span><br><span class="line"><span class="code">A[方形] --&gt; B(圆角)</span></span><br><span class="line"><span class="code">    B --&gt; C&#123;条件a&#125;</span></span><br><span class="line"><span class="code">    C --&gt; |a=1| D[结果1]</span></span><br><span class="line"><span class="code">    C --&gt; |a=2| E[结果2]</span></span><br><span class="line"><span class="code">    F[竖向流程图]</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a=1| D[结果1]</span><br><span class="line">    C --&gt; |a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure>



<h2 id="3、标准流程图源码格式："><a href="#3、标准流程图源码格式：" class="headerlink" title="3、标准流程图源码格式："></a>3、标准流程图源码格式：</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```flow</span></span><br><span class="line"><span class="code">st=&gt;start: 开始框</span></span><br><span class="line"><span class="code">op=&gt;operation: 处理框</span></span><br><span class="line"><span class="code">cond=&gt;condition: 判断框(是或否?)</span></span><br><span class="line"><span class="code">sub1=&gt;subroutine: 子流程</span></span><br><span class="line"><span class="code">io=&gt;inputoutput: 输入输出框</span></span><br><span class="line"><span class="code">e=&gt;end: 结束框</span></span><br><span class="line"><span class="code">st-&gt;op-&gt;cond</span></span><br><span class="line"><span class="code">cond(yes)-&gt;io-&gt;e</span></span><br><span class="line"><span class="code">cond(no)-&gt;sub1(right)-&gt;op</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>



<h2 id="4、标准流程图源码格式（横向）："><a href="#4、标准流程图源码格式（横向）：" class="headerlink" title="4、标准流程图源码格式（横向）："></a>4、标准流程图源码格式（横向）：</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```flow</span></span><br><span class="line"><span class="code">st=&gt;start: 开始框</span></span><br><span class="line"><span class="code">op=&gt;operation: 处理框</span></span><br><span class="line"><span class="code">cond=&gt;condition: 判断框(是或否?)</span></span><br><span class="line"><span class="code">sub1=&gt;subroutine: 子流程</span></span><br><span class="line"><span class="code">io=&gt;inputoutput: 输入输出框</span></span><br><span class="line"><span class="code">e=&gt;end: 结束框</span></span><br><span class="line"><span class="code">st(right)-&gt;op(right)-&gt;cond</span></span><br><span class="line"><span class="code">cond(yes)-&gt;io(bottom)-&gt;e</span></span><br><span class="line"><span class="code">cond(no)-&gt;sub1(right)-&gt;op</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>



<h2 id="5、UML时序图源码样例："><a href="#5、UML时序图源码样例：" class="headerlink" title="5、UML时序图源码样例："></a>5、UML时序图源码样例：</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```sequence</span></span><br><span class="line"><span class="code">对象A-&gt;对象B: 对象B你好吗?（请求）</span></span><br><span class="line"><span class="code">Note right of 对象B: 对象B的描述</span></span><br><span class="line"><span class="code">Note left of 对象A: 对象A的描述(提示)</span></span><br><span class="line"><span class="code">对象B--&gt;对象A: 我很好(响应)</span></span><br><span class="line"><span class="code">对象A-&gt;对象B: 你真的好吗？</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure>



<h2 id="6、UML时序图源码复杂样例："><a href="#6、UML时序图源码复杂样例：" class="headerlink" title="6、UML时序图源码复杂样例："></a>6、UML时序图源码复杂样例：</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```sequence</span></span><br><span class="line"><span class="code">Title: 标题：复杂使用</span></span><br><span class="line"><span class="code">对象A-&gt;对象B: 对象B你好吗?（请求）</span></span><br><span class="line"><span class="code">Note right of 对象B: 对象B的描述</span></span><br><span class="line"><span class="code">Note left of 对象A: 对象A的描述(提示)</span></span><br><span class="line"><span class="code">对象B--&gt;对象A: 我很好(响应)</span></span><br><span class="line"><span class="code">对象B-&gt;小三: 你好吗</span></span><br><span class="line"><span class="code">小三--&gt;&gt;对象A: 对象B找我了</span></span><br><span class="line"><span class="code">对象A-&gt;对象B: 你真的好吗？</span></span><br><span class="line"><span class="code">Note over 小三,对象B: 我们是朋友</span></span><br><span class="line"><span class="code">participant C</span></span><br><span class="line"><span class="code">Note right of C: 没人陪我玩</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure>



<h2 id="7、UML标准时序图样例："><a href="#7、UML标准时序图样例：" class="headerlink" title="7、UML标准时序图样例："></a>7、UML标准时序图样例：</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span></span><br><span class="line"><span class="code">  sequenceDiagram</span></span><br><span class="line"><span class="code">    participant 张三</span></span><br><span class="line"><span class="code">    participant 李四</span></span><br><span class="line"><span class="code">    张三-&gt;王五: 王五你好吗？</span></span><br><span class="line"><span class="code">    loop 健康检查</span></span><br><span class="line"><span class="code">        王五-&gt;王五: 与疾病战斗</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span></span><br><span class="line"><span class="code">    李四--&gt;&gt;张三: 很好!</span></span><br><span class="line"><span class="code">    王五-&gt;李四: 你怎么样?</span></span><br><span class="line"><span class="code">    李四--&gt;王五: 很好!</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure>



<h2 id="8、甘特图样例："><a href="#8、甘特图样例：" class="headerlink" title="8、甘特图样例："></a>8、甘特图样例：</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">%% 语法示例</span></span><br><span class="line"><span class="code">        gantt</span></span><br><span class="line"><span class="code">        dateFormat  YYYY-MM-DD</span></span><br><span class="line"><span class="code">        title 软件开发甘特图</span></span><br><span class="line"><span class="code">        section 设计</span></span><br><span class="line"><span class="code">        需求                      :done,    des1, 2014-01-06,2014-01-08</span></span><br><span class="line"><span class="code">        原型                      :active,  des2, 2014-01-09, 3d</span></span><br><span class="line"><span class="code">        UI设计                     :         des3, after des2, 5d</span></span><br><span class="line"><span class="code">    未来任务                     :         des4, after des3, 5d</span></span><br><span class="line"><span class="code">        section 开发</span></span><br><span class="line"><span class="code">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span></span><br><span class="line"><span class="code">        设计框架                             :crit, done, after des2, 2d</span></span><br><span class="line"><span class="code">        开发                                 :crit, active, 3d</span></span><br><span class="line"><span class="code">        未来任务                              :crit, 5d</span></span><br><span class="line"><span class="code">        耍                                   :2d</span></span><br><span class="line"><span class="code">        section 测试</span></span><br><span class="line"><span class="code">        功能测试                              :active, a1, after des3, 3d</span></span><br><span class="line"><span class="code">        压力测试                               :after a1  , 20h</span></span><br><span class="line"><span class="code">        测试报告                               : 48h</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>显示结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2021/10/26/test/test/</url>
    <content><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p><img src="/2021/10/26/test/test/%E4%BA%8C%E7%BB%B4%E5%B7%AE%E5%88%86%E7%9F%A9%E9%98%B5.png" alt="二维差分矩阵"></p>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList</title>
    <url>/2021/10/22/Java/ArrayList/ArrayList/</url>
    <content><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><p><strong>集合</strong>，是一种容器</p>
<p>这个ArrayList和c++的vector容器相似</p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul>
<li>函数原型：<code>public ArrayList()</code></li>
</ul>
<p>使用：</p>
<p>需要用&lt;&gt;指定类型</p>
<ul>
<li><code>ArrayList&lt;Type&gt; array = new ArrayList&lt;&gt;()</code>    此使用形式后面的&lt;&gt;可通过前面推断类型</li>
<li><code>ArrayList&lt;Type&gt; array = new ArrayList&lt;Type&gt;()</code></li>
</ul>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p><code>ArrayList&lt;Type&gt; array = new ArrayList&lt;&gt;()</code></p>
<p>（一）往集合添加元素：</p>
<ul>
<li><p>添加到集合末尾：</p>
<ul>
<li>函数原型：<code>public boolean add(Type element)</code></li>
<li>返回true即添加成功，反之…</li>
<li>使用：<code>array.add(Type element)</code></li>
</ul>
</li>
<li><p>添加到指定位置：</p>
<ul>
<li>函数原型：<code>public void add(int index, Type element)</code></li>
<li>使用：<code>add(index, element)</code></li>
<li>index是索引值</li>
</ul>
</li>
</ul>
<p>（二）删除元素：</p>
<ul>
<li><p>删除指定元素：</p>
<ul>
<li>函数原型：<code>public boolean remove(Type element)</code></li>
<li>返回删除是否成功</li>
<li>使用：<code>array.remove(element)</code></li>
<li>例如：<code>array.remove(&quot;hello&quot;)</code></li>
</ul>
</li>
<li><p>删除指定索引处的元素：</p>
<ul>
<li>函数原型：<code>public Type remove(int index)</code></li>
<li>返回值：被删除的元素</li>
<li>使用：<code>array.remove(index)</code></li>
</ul>
</li>
</ul>
<p>（三）修改元素：</p>
<ul>
<li>修改指定索引处的元素：<ul>
<li>函数原型：<code>public Type set(int index, Type element)</code></li>
<li>返回值：被修改的元素</li>
<li>使用：<code>array.set(index, element)</code></li>
</ul>
</li>
</ul>
<p>（四）获取集合中的信息</p>
<ul>
<li>获取指定索引处的元素：<ul>
<li>函数原型：<code>public Type get(int index)</code></li>
<li>返回值：指定索引处的元素</li>
<li>使用：<code>array.get(index)</code></li>
</ul>
</li>
<li>获取集合中的元素个数：<ul>
<li>函数原型：<code>public int size()</code></li>
<li>使用：<code>array.size()</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Scanner类</title>
    <url>/2021/09/29/Java/Scanner%E7%B1%BB/Scanner%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><p>扫描输入文本的一个类</p>
<h2 id="（一）从键盘输入"><a href="#（一）从键盘输入" class="headerlink" title="（一）从键盘输入"></a>（一）从键盘输入</h2><p>需包含 <code>import java.util.Scanner</code></p>
<h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">//接收byte型数据</span></span><br><span class="line"><span class="keyword">byte</span> by = reader.nextByte();</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收int型的数据</span></span><br><span class="line"><span class="keyword">int</span> in = reader.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收double型数据</span></span><br><span class="line"><span class="keyword">double</span> <span class="keyword">do</span> = reader.nextDouble();</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收float型数据</span></span><br><span class="line"><span class="keyword">float</span> fl = reader.nextFloat();</span><br><span class="line"></span><br><span class="line"><span class="comment">//扫描并接收整行数据，并返回String类型</span></span><br><span class="line">String str1 = reader.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">//扫描至第一个空格或回车前的有效字符，并返回String类型</span></span><br><span class="line">String str2 = reader.next();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>next()</strong></p>
<p>在缓冲区中读取到有效字符后才结束输入</p>
<ol start="2">
<li><p>对输入有效字符之前遇到的空白，next() 方法会自动将其去掉</p>
</li>
<li><p>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符</p>
</li>
<li><p>next() 不能得到带有空格的字符串</p>
</li>
</ol>
</blockquote>
<blockquote>
<p><strong>nextLine()</strong></p>
<ol>
<li><p>以Enter为结束符，也就是说，nextLine() 方法返回的是输入回车之前的所有字符</p>
</li>
<li><p>可以获得空格符</p>
</li>
</ol>
</blockquote>
<blockquote>
<p><strong>hasNext()</strong></p>
<ul>
<li>判断缓冲区中当前扫描位置后是否还存在下一段</li>
</ul>
</blockquote>
<blockquote>
<p><strong>hasNextLine()</strong></p>
<ul>
<li>如果在缓冲区的输入中存在另一行，则返回 true。</li>
</ul>
</blockquote>
<p>当然，<strong>hasNext也可以在后面直接加类型</strong>，像从扫描器读取有效字符一样，如：<code>hasNextDouble()</code>可以判断缓冲区中是否有双精度类型的数据。常用的还有<code>hasNextInt()</code>、<code>hasNextFloat()</code>。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入若干个数,每输入一个数用回车确认&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;最后输入一个非数字结束输入操作&quot;</span>);</span><br><span class="line">        Scanner reader=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    	<span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(reader.hasNextDouble())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> x=reader.nextDouble();</span><br><span class="line">            m=m+<span class="number">1</span>;</span><br><span class="line">            sum=sum+x;</span><br><span class="line">        &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d个数的和为%f\n&quot;</span>,m,sum);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d个数的平均值是%f\n&quot;</span>,m,sum/m);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="（二）使用Scanner来分割文本"><a href="#（二）使用Scanner来分割文本" class="headerlink" title="（二）使用Scanner来分割文本"></a>（二）使用Scanner来分割文本</h2><p>默认使用空格分隔</p>
<p>用<code>s.useDelimiter(&quot;分割字符&quot;)</code>来指定分割方式来分割字符串，（**”**）里填写分割的字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(<span class="string">&quot;123 asdf sd 45 789 sdf asdfl,sdf.sdfl,asdf    ......asdfkl    las&quot;</span>);</span><br><span class="line"><span class="comment">//分割</span></span><br><span class="line"><span class="comment">//s.useDelimiter(&quot; |,|\\.&quot;); </span></span><br><span class="line"><span class="keyword">while</span> (s.hasNext()) &#123; </span><br><span class="line">	System.out.println(s.next()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：</p>
<p>123<br>asdf<br>sd<br>45<br>789<br>sdf<br>asdfl,sdf.sdfl,asdf<br>……asdfkl<br>las</p>
</blockquote>
<blockquote>
<p><strong>将注释行去掉</strong>，使用<strong>空格</strong>或<strong>逗号</strong>或<strong>点号</strong>作为分隔符，输出结果如下：<br>123<br>asdf<br>sd<br>45<br>789<br>sdf<br>asdfl<br>sdf<br>sdfl<br>asdf<br>asdfkl<br>las </p>
</blockquote>
<h2 id="（三）使用Scanner读取并分析文本文件：hrinfo-txt"><a href="#（三）使用Scanner读取并分析文本文件：hrinfo-txt" class="headerlink" title="（三）使用Scanner读取并分析文本文件：hrinfo.txt"></a>（三）使用Scanner读取并分析文本文件：hrinfo.txt</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">readhuman</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readfile</span><span class="params">(String filename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(filename));</span><br><span class="line">   scanner.useDelimiter(System.getProperty(<span class="string">&quot;line.separator&quot;</span>));</span><br><span class="line">   <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">      parseline(scanner.next());</span><br><span class="line">   &#125;</span><br><span class="line">   scanner.close();</span><br><span class="line">&#125;<span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">   System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseline</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line">    Scanner linescanner = <span class="keyword">new</span> Scanner(line);</span><br><span class="line">    linescanner.www.gzlij.<span class="function">com <span class="title">useDelimiter</span><span class="params">(<span class="string">&quot;,&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//可以修改usedelimiter参数以读取不同分隔符分隔的内容</span></span><br><span class="line">    String name = linescanner.next();</span><br><span class="line">    <span class="keyword">int</span> age = linescanner.nextInt();</span><br><span class="line">    String idate = linescanner.next();</span><br><span class="line">    <span class="keyword">boolean</span> iscertified = linescanner.nextBoolean();</span><br><span class="line">    System.out.println(<span class="string">&quot;姓名：&quot;</span>+name+<span class="string">&quot; ，年龄：&quot;</span>+ age+<span class="string">&quot; ，入司时间：&quot;</span>+ idate+<span class="string">&quot; ，验证标记：&quot;</span>+iscertified );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">   System.err.println(<span class="string">&quot;usage: java readhuman file location&quot;</span>);</span><br><span class="line">   System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   readfile(args[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果：C:\java&gt;java   readhuman hrinfo.txt</p>
<p>   姓名：老赵 ，年龄：28 ，入司时间：feb-01 ，验证标记：true</p>
<p>   姓名：小竹 ，年龄：22 ，入司时间：dec-03 ，验证标记：false</p>
<p>   姓名：阿波 ，年龄：21 ，入司时间：dec-03 ，验证标记：false</p>
<p>   姓名：凯子，年龄：25 ，入司时间：dec-03 ，验证标记：true</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>super和this</title>
    <url>/2021/10/20/Java/super%E5%92%8Cthis/super%E5%92%8Cthis/</url>
    <content><![CDATA[<h1 id="super-和-this"><a href="#super-和-this" class="headerlink" title="super 和 this"></a>super 和 this</h1><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>this的作用</p>
<ul>
<li>this调用本类属性</li>
<li>调用本类方法</li>
<li>利用this表示当前类对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//this.a是本类的属性a</span></span><br><span class="line">        <span class="keyword">this</span>.a=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setB</span><span class="params">(<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b=b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.b);</span><br><span class="line">        <span class="comment">//调用本类的getA()方法</span></span><br><span class="line">        <span class="keyword">this</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(”Test的get方法调用“);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>在构造器中，使用this来调用本类的函数，<strong>需要放在首位</strong></p>
<h1 id="super"><a href="#super" class="headerlink" title="super"></a>super</h1><ul>
<li>代表父类对象</li>
<li>子父类存在着同名的成员时，在子类中默认时访问子类的成员，可以通过super关键字指定访问父类的成员</li>
<li>创建子类对象时，<strong>默认会先调用父类无参的构造方法</strong>，可以通过super关键字指定调用父类的构造方法</li>
</ul>
<p><strong>super的用法</strong></p>
<ul>
<li><p><code>super.xx</code>可以用来引用直接父类的实例变量。</p>
</li>
<li><p><code>super.xxx()</code>可以用来调用直接父类方法。</p>
</li>
<li><p><code>super()</code>可以用于调用直接父类构造函数</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//调用父类的方法get()</span></span><br><span class="line">        <span class="keyword">super</span>.get();</span><br><span class="line">        <span class="comment">//调用父类的属性a</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.a);</span><br><span class="line">        System.out.println(<span class="string">&quot;A的get方法调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="构造器-1"><a href="#构造器-1" class="headerlink" title="构造器"></a>构造器</h2><p>在构造器中，使用super来调用父类的函数，<strong>需要放在首位</strong></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul>
<li>super 和 this<strong>不能同时出现在同一个构造函数中</strong>调用其他的构造函数，因为两个语句都要是第一个语句</li>
</ul>
<h2 id="this和super的区别"><a href="#this和super的区别" class="headerlink" title="this和super的区别"></a>this和super的区别</h2><ul>
<li><p><strong>（一）代表的事物不同</strong></p>
<p>super代表的是父类空间的引用</p>
<p>this代表的是所属函数的调用者对象</p>
</li>
<li><p><strong>（二）使用前提不同</strong></p>
<p>super必须要有继承关系才能使用</p>
<p>this不需要继承关系也能使用</p>
</li>
<li><p><strong>（三）调用的构造函数不同</strong></p>
<p>super：调用父类的构造函数</p>
<p>this：调用所属类的构造函数</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>多态</title>
    <url>/2021/10/22/Java/%E5%A4%9A%E6%80%81/java%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>多态的条件：</p>
<ul>
<li>有继承或实现关系</li>
<li>有方法重写</li>
<li>有父类引用指向子类对象    如：动物 animal = new 猫()</li>
</ul>
<p>多态中成员访问特点：</p>
<ul>
<li>成员变量：编译看左边，执行看左边</li>
<li>成员方法：编译看左边，执行看<strong>右边</strong></li>
</ul>
<blockquote>
<p>即：<code>Animal a =new Cat()</code></p>
<p>成员变量a.age，访问的是 Animal 的属性 age</p>
<p><code>System.out.println(a.age)</code></p>
<p>成员方法 a.eat() ，调用的是 Cat 的 eat() 方法</p>
<p><code>a.eat()</code></p>
</blockquote>
<h2 id="使用多态"><a href="#使用多态" class="headerlink" title="使用多态"></a>使用多态</h2><p>与C++大同小异</p>
<p>两种方法：</p>
<ul>
<li><p>（一）通过创建父类对象 并且指向申请的子类内存</p>
<p><code>父类 obj = new 子类()</code></p>
</li>
<li><p>（二）在函数传参时，将子类对象作为形参传入函数，并且函数用父类接收，即可做到父类引用子类对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一种方法</span></span><br><span class="line">        test1();</span><br><span class="line">        <span class="comment">//第二种方法</span></span><br><span class="line">        test2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在使用第一种方法：&quot;</span>);</span><br><span class="line">        <span class="comment">//创建父类引用子类对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="comment">//调用Cat的eat()</span></span><br><span class="line">        a.eat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建父类引用子类对象</span></span><br><span class="line">        Animal b = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="comment">//调用Dog的eat()</span></span><br><span class="line">        b.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在使用第二种方法：&quot;</span>);</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="comment">//第二种方法</span></span><br><span class="line">        <span class="comment">//调用了Cat的eat()</span></span><br><span class="line">        test2Do(cat);</span><br><span class="line">        <span class="comment">//调用了Dog的eat()</span></span><br><span class="line">        test2Do(dog);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2Do</span><span class="params">(Animal a)</span></span>&#123;<span class="comment">//使用父类来接收</span></span><br><span class="line">        <span class="comment">//调用子类的eat()方法</span></span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>运行结果：</p>
<p>正在使用第一种方法：<br>Cat is eating<br>Dog is eating<br>正在使用第二种方法：<br>Cat is eating<br>Dog is eating</p>
</blockquote>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul>
<li>提高了程序的扩展性和复用性</li>
</ul>
<h2 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h2><ul>
<li><strong>多态无法访问子类特有的方法，只能访问共有的方法。</strong></li>
</ul>
<p>如：若上面的Dog类添加多一个方法<code>l()</code>，那么在这个Dog类中，<code>l()</code>方法是Dog类中特有的，Cat类和其父类Animal类都没有，则在父类引用子类对象的对象中，此对象无法调用其特有的方法，即<code>l()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">l</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;aaaaaaaaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">        a.l();<span class="comment">//报错，无法调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>String类和StringBuilder类</title>
    <url>/2021/10/22/Java/String%E7%B1%BB%E5%92%8CStringBuilder%E7%B1%BB/String%E7%B1%BB%E5%92%8CStringBuilder%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="String类和StringBuilder类"><a href="#String类和StringBuilder类" class="headerlink" title="String类和StringBuilder类"></a>String类和StringBuilder类</h1><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p><strong><code>String s</code></strong></p>
<p>取字符：<code>char s.charAt(int index)</code></p>
<h1 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h1><p><code>StringBuilder sb = new StringBuilder()</code></p>
<ul>
<li><p>构造器：</p>
<ul>
<li><code>StringBuilder()</code></li>
<li><code>StringBuilder(String s)</code></li>
</ul>
</li>
<li><p>在字符串后面拼接字符串：</p>
<ul>
<li>函数原型：<code>public StringBuilder append(String s)</code></li>
<li><code>sb.append(s)</code></li>
</ul>
</li>
<li><p>字符串反转：</p>
<ul>
<li>函数原型：<code>public StringBuilder reverse()</code></li>
<li><code>sb.reverse()</code></li>
</ul>
</li>
</ul>
<h1 id="String-与-StringBuilder-相互转换"><a href="#String-与-StringBuilder-相互转换" class="headerlink" title="String 与 StringBuilder 相互转换"></a>String 与 StringBuilder 相互转换</h1><ul>
<li><p>（一）StringBuilder 转换为 String：</p>
<ul>
<li>函数原型：<code>public String toString()</code></li>
<li><code>String s = sb.toString()</code></li>
</ul>
</li>
<li><p>（二）String 转换为 StringBuilder：</p>
<ul>
<li>利用StringBuilder的构造器来转换</li>
<li><code> StringBuilder sb = new StringBuilder(s)</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java抽象类</title>
    <url>/2021/10/27/Java/%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82/java%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="abstract-class"><a href="#abstract-class" class="headerlink" title="abstract class"></a>abstract class</h1><p>使用：</p>
<p><code>权限 abstract class 类名&#123; &#125;</code></p>
<p>抽象方法：</p>
<p><code>权限 abstract 返回类型 函数名();</code></p>
<p>如：<code>public abstract void eat();</code></p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><p>抽象类不一定要有抽象方法，但有抽象方法一定是抽象类</p>
</li>
<li><p>抽象类不能实例化</p>
</li>
<li><p>需要继承抽象类的子类并且重写子类的抽象方法才能实例化对象，即重写子类中所有抽象方法后，用多态的形式来实例化对象</p>
</li>
<li><p>抽象类的子类</p>
<ul>
<li>要么重写抽象类中的所有抽象方法</li>
<li>要么是抽象类</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java接口类型文件</title>
    <url>/2021/10/27/Java/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/java%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>文件类型选择：Interface</p>
<p>类继承接口需要用：<code>implements</code>而非<code>extends</code>，extends是继承类的关键字</p>
<p>类也可以同时继承类和接口，需先继承类，后继承接口</p>
<p>如：<code>public class Cat extends Animal implements Jumpping &#123;&#125;</code></p>
<p>特点：</p>
<ul>
<li><p>接口里的成员变量只能是常量</p>
<p><code>public static final int num = 10</code></p>
<p><code>public final int num = 10</code></p>
<p><code>public int num = 10</code></p>
<p>这三句都一样，默认修饰符是<code>public static final</code></p>
</li>
<li><p>接口中没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在</p>
<p>一个类如果没有父类，默认继承Object类</p>
</li>
<li><p>成员方法</p>
<p>接口中只允许抽象方法</p>
<p>若接口中不写<code>权限 abstract</code>的话，默认为抽象方法</p>
<p>如：<code>void show()</code></p>
</li>
</ul>
<p>如果实现接口多态</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>&#123;<span class="comment">//里面含有jump方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Jumpping j = <span class="keyword">new</span> Cat();</span><br><span class="line">        j.jump();</span><br><span class="line">        <span class="comment">//j.eat();报错</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.eat();</span><br><span class="line">        <span class="comment">//a.jump();报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述两种多态方法一般不用</p>
<p>因为，在使用时，Jumpping接口和Cat类，Animal类和Cat类都要有的方法才能调用</p>
<p>即一般使用原始方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>&#123;<span class="comment">//里面含有jump方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        c.eat();</span><br><span class="line">        c.jump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>STL</title>
    <url>/2021/12/09/C++/STL/STL/</url>
    <content><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><p>常用的，不多说</p>
<h1 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">typename</span>, <span class="keyword">typename</span>&gt; </span><br><span class="line">    first, 第一个元素</span><br><span class="line">    second, 第二个元素</span><br><span class="line">    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）</span><br></pre></td></tr></table></figure>



<h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><p>头文件<code>#include&lt;cstring&gt;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string，字符串</span><br><span class="line">    <span class="built_in">size</span>()/<span class="built_in">length</span>()  返回字符串长度</span><br><span class="line">    <span class="built_in">empty</span>() 返回是否为空</span><br><span class="line">    <span class="built_in">clear</span>() 清空字符串</span><br><span class="line">    <span class="built_in">find</span>(<span class="string">&#x27;x&#x27;</span>) <span class="comment">//返回字符x出现的下标</span></span><br><span class="line">    <span class="built_in">memset</span>(h,x,<span class="keyword">sizeof</span> h) <span class="comment">// 设置h[]中所有元素中每个字节为x</span></span><br><span class="line">    <span class="built_in">substr</span>(起始下标，(子串长度))  返回子串</span><br><span class="line">    <span class="built_in">c_str</span>()  返回字符串所在字符数组的起始地址</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  <code>meset(数组名, 数组每个元素的每个字节赋值, 数组大小)</code> 此方法是对数组中每个元素赋值，赋值是对<strong>每个元素的每个字节赋值</strong></p>
<p>  常用的有</p>
<ul>
<li><p>数组 h 赋值为 0</p>
<p>  <code>memset(h, 0, sizeof(h))</code></p>
</li>
<li><p>数组 h 赋值为 -1</p>
<p>  <code>memset(h, -1, sizeof(h))</code></p>
</li>
<li><p>数组 h 赋值为 int无穷大</p>
<p>  <code>memset(h, 0x3f, sizeof(h))</code></p>
</li>
</ul>
<p>  而每个元素实际赋值出来的值是 <code>INF = 0x3f3f3f3f</code></p>
</blockquote>
<blockquote>
<p>  <code>substr()</code> </p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s=<span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">s.<span class="built_in">substr</span>(<span class="number">1</span>); <span class="comment">// 返回bcde</span></span><br><span class="line">s.<span class="built_in">substr</span>(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">// 返回bcd</span></span><br></pre></td></tr></table></figure>

<p>  下标从0开始，这个跟python的字符串差不多，只不过python在内部重载了 <code>[]</code> ，可以通过<code>s[起始下标:结束下标 + 1]</code> 来获取子串，他是<strong>左闭右开</strong>的区间</p>
</blockquote>
<h1 id="priority-que"><a href="#priority-que" class="headerlink" title="priority_que"></a>priority_que</h1><p>优先队列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">priority_queue, 优先队列，默认是大根堆</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  插入一个元素</span><br><span class="line">    <span class="built_in">top</span>()  返回堆顶元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出堆顶元素</span><br><span class="line">    </span><br><span class="line">    定义成小根堆的方式：</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里使用 <code>greater&lt;typename&gt;</code> 需要包含头文件 <code>#include&lt;functional&gt;</code> </p>
<blockquote>
<p>  但在<code>sort()</code>中，它默认是从小到大排序，可以用 <code>greater&lt;int&gt;</code> 表示从大到小</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>]=&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(a,a+<span class="number">5</span>); <span class="comment">// 从小到大</span></span><br><span class="line"><span class="built_in">sort</span>(a,a+<span class="number">5</span>,greater&lt;<span class="keyword">int</span>&gt;()); <span class="comment">// 从大到小</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="set-和-map"><a href="#set-和-map" class="headerlink" title="set 和 map"></a>set 和 map</h1><p><em><strong>有 multi 前缀的都是可存储重复元素的</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    ++, -- 返回前驱和后继，时间复杂度 <span class="built_in">O</span>(logn)</span><br><span class="line"></span><br><span class="line">    set/<span class="function">multiset</span></span><br><span class="line"><span class="function">        <span class="title">insert</span><span class="params">()</span>  插入一个数</span></span><br><span class="line"><span class="function">        <span class="title">find</span><span class="params">()</span>  查找一个数</span></span><br><span class="line"><span class="function">        <span class="title">count</span><span class="params">()</span>  返回某一个数的个数</span></span><br><span class="line"><span class="function">        <span class="title">erase</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="params">(<span class="number">1</span>)</span> 输入是一个数x，删除所有x   <span class="title">O</span><span class="params">(k + logn)</span></span></span><br><span class="line"><span class="function">            <span class="params">(<span class="number">2</span>)</span> 输入一个迭代器，删除这个迭代器</span></span><br><span class="line"><span class="function">        <span class="title">lower_bound</span><span class="params">()</span> / <span class="title">upper_bound</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="title">lower_bound</span><span class="params">(x)</span>  返回大于等于x的最小的数的迭代器（二分左边界）</span></span><br><span class="line"><span class="function">            <span class="title">upper_bound</span><span class="params">(x)</span>  返回大于x的最小的数的迭代器（二分右边界）</span></span><br><span class="line"><span class="function">    map/multimap</span></span><br><span class="line"><span class="function">        <span class="title">insert</span><span class="params">()</span>  插入的数是一个pair</span></span><br><span class="line"><span class="function">        <span class="title">erase</span><span class="params">()</span>  输入的参数是pair或者迭代器</span></span><br><span class="line"><span class="function">        <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        []  注意multimap不支持此操作。 时间复杂度是 <span class="title">O</span><span class="params">(logn)</span></span></span><br><span class="line"><span class="function">        <span class="title">lower_bound</span><span class="params">()</span> / <span class="title">upper_bound</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表（无序）</span></span><br><span class="line"><span class="function">    和上面类似，增删改查的时间复杂度是 <span class="title">O</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    不支持 <span class="title">lower_bound</span><span class="params">()</span> / <span class="title">upper_bound</span><span class="params">()</span>（因为是无序的）， 迭代器的++，--</span></span><br></pre></td></tr></table></figure>



<h1 id="lower-bound-和-upper-bound"><a href="#lower-bound-和-upper-bound" class="headerlink" title="lower_bound() 和 upper_bound()"></a>lower_bound() 和 upper_bound()</h1><p>头文件 <code>#include&lt;algorithm&gt;</code></p>
<p>原型：<code>lower_bound(开始位置, 结束位置, x)</code> 、 <code>upper_bound(开始位置, 结束位置, x)</code></p>
<p>这里的 <code>lower_bound() </code> 和 <code>upper_bound()</code> 在 <code>vector</code> 和 普通数组 中也能用</p>
<p>这两个函数底层是用<strong>二分查找</strong>来实现的，前者是找到<strong>左边界</strong>，即<strong>大于等于</strong> $x$ 的第一个数，后者是找到<strong>右边界的下一个元素</strong>，即<strong>大于</strong> $x$ 的第一个数</p>
<p>如在 <code>vector&lt;int&gt; v</code> 、 <code>int a[n]</code> 中查找</p>
<ul>
<li><p>返回 $x$ 左边界下标：</p>
<ul>
<li><p>  <code>index = lower_bound(v.begin(), v.end(), x) - v.begin()</code>  </p>
</li>
<li><p>  <code>index = lower_bound(a, a + n, x) - a</code>  </p>
</li>
</ul>
</li>
<li><p>返回 $x$ 右边界的下一个元素下标：</p>
<ul>
<li><p>  <code>index = upper_bound(v.begin(), v.end(), x) - v.begin()</code> </p>
</li>
<li><p>  <code>index = upper_bound(a, a + n, x) - a </code> </p>
</li>
</ul>
</li>
</ul>
<h1 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h1><p>压位</p>
<p>它是一种类似数组的结构，它的每一个元素只能是０或１，每个元素仅用 <code>１bit</code> 空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">bitset, 圧位</span><br><span class="line">    bitset&lt;位数&gt; s;</span><br><span class="line">    ~, &amp;, |, ^</span><br><span class="line">    &gt;&gt;, &lt;&lt;</span><br><span class="line">    ==, !=</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">    <span class="built_in">count</span>()  返回有多少个<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">any</span>()  判断是否至少有一个<span class="number">1</span></span><br><span class="line">    <span class="built_in">none</span>()  判断是否全为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>()  把所有位置成<span class="number">1</span></span><br><span class="line">    <span class="built_in">set</span>(k, v)  将第k位变成v</span><br><span class="line">    <span class="built_in">reset</span>()  把所有位变成<span class="number">0</span></span><br><span class="line">    <span class="built_in">flip</span>()  等价于~</span><br><span class="line">    <span class="built_in">flip</span>(k) 把第k位取反</span><br></pre></td></tr></table></figure>



<blockquote>
<p>  bitset&lt;4&gt; bitset1;　　//无参构造，长度为４，默认每一位为０<br>  bitset&lt;8&gt; bitset2(12);　　//长度为８，二进制保存，前面用０补充<br>  string s = “100101”;<br>  bitset&lt;10&gt; bitset3(s);　　//长度为10，前面用０补充<br>  char s2[] = “10101”;<br>  bitset&lt;13&gt; bitset4(s2);　　//长度为13，前面用０补充</p>
<p>  cout &lt;&lt; bitset1 &lt;&lt; endl;　　//0000<br>  cout &lt;&lt; bitset2 &lt;&lt; endl;　　//00001100<br>  cout &lt;&lt; bitset3 &lt;&lt; endl;　　//0000100101<br>  cout &lt;&lt; bitset4 &lt;&lt; endl;　　//0000000010101</p>
</blockquote>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>static和final</title>
    <url>/2021/10/28/Java/%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82/static%E5%92%8Cfinal/</url>
    <content><![CDATA[<h1 id="static"><a href="#static" class="headerlink" title="static"></a>static</h1><ul>
<li>修饰成员变量：<ul>
<li>  表示静态域</li>
<li>  实例化的所有类对象都只有一个值，在类外用<code>类名.成员变量</code>访问，可修改值</li>
<li>  修饰成员变量他们只有一个</li>
<li>  每一个对象对于所有的实例域，<strong>都有自己的一份拷贝</strong></li>
</ul>
</li>
<li>修饰成员方法：<ul>
<li>  表示静态方法</li>
<li>  跟static修饰的成员变量一样，在类外用<code>类名.成员方法</code>调用</li>
</ul>
</li>
<li>细节：<ul>
<li>  static修饰的成员变量、方法和代码段属于类，<strong>不属于任何独立的对象</strong></li>
<li>  不创建对象也能调用static修饰的属性、方法，即使没有实例化该类对象，静态域也存在</li>
<li>  static不可以修饰局部变量</li>
</ul>
</li>
</ul>
<p><strong>【注意】</strong>：</p>
<ul>
<li>  <strong>static</strong>跟具体对象无关，而<strong>this</strong>、<strong>super</strong>正好跟具体对象有关</li>
<li>  不可以从一个static方法内部调用非static方法</li>
</ul>
<h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><ul>
<li>  修饰成员变量：成员变量是常量</li>
<li>  修饰成员方法：子类不能重写这个成员方法</li>
<li>修饰类：<ul>
<li>  final类中的所有方法自动转为final方法</li>
<li>  final类中的成员变量不会自动转为final域</li>
<li>  final类<strong>不允许被继承</strong></li>
</ul>
</li>
</ul>
<p>将方法或类声明为 final 主要目的是: 确保它们不会在子类中改变语义。</p>
<blockquote>
<p>  如果一个方法没有被覆盖并且很短， 编译器就能够对它进行优化处理， 这个过程为称为<strong>内联</strong> ( inlining )</p>
<p>  例如， 内联调用 <code>e.getName( )</code> 将被替换为访问 <code>e.name</code> 域。 </p>
</blockquote>
<h2 id="static-final和final-static："><a href="#static-final和final-static：" class="headerlink" title="static final和final static："></a>static final和final static：</h2><ul>
<li><p>  语法和用法上没有任何区别，一般习惯<code>static final</code></p>
</li>
<li><p>static修饰的属性强调它们只有一个，final修饰的属性表明是一个常量（创建后不能被修改）</p>
<blockquote>
<p>  static int a=1;<br>  static final b=1;<br>  这里a和b的区别在于，a在程序里可以被重新赋值为2或3或等等的整数，而b在程序里不能被重新赋值，b永远都为1，也就是说b是一个常量。</p>
<p>  final int c=1;<br>  static final d=1;<br>  这里c和d的区别在于，d存放在静态空间，不会在程序运行时被释放，它永远占着内存直到程序终止，而c在程序用完它而不会再用到它的时候就会被自动释放，不再占用内存。</p>
</blockquote>
</li>
<li><p>  static final修饰的属性：一旦给值，就不可修改，并且可以通过类名访问。</p>
</li>
<li><p>  static final修饰方法：表示该方法不能重写，可以在不new对象的情况下调用。</p>
</li>
</ul>
<p>当一个常数或字符串我们需要在程序里反复反复使用的时候，我们就可以把它定义为static final，这样内存就不用重复的申请和释放空间。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>java语法</tag>
      </tags>
  </entry>
  <entry>
    <title>读写excel</title>
    <url>/2021/09/29/Python/Excel%E6%A8%A1%E5%9D%97/Excel%E8%AF%BB%E5%86%99%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="读写excel"><a href="#读写excel" class="headerlink" title="读写excel"></a>读写excel</h1><ul>
<li>xlrd</li>
<li>openpyxl</li>
<li>pandas</li>
</ul>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">xlrd&amp;xlwt&amp;xlutils</th>
<th align="left">pandas</th>
<th align="left">OpenPyXL</th>
</tr>
</thead>
<tbody><tr>
<td align="left">读取</td>
<td align="left">支持</td>
<td align="left">支持</td>
<td align="left">支持</td>
</tr>
<tr>
<td align="left">写入</td>
<td align="left">支持</td>
<td align="left">支持</td>
<td align="left">支持</td>
</tr>
<tr>
<td align="left">修改</td>
<td align="left">支持</td>
<td align="left">支持</td>
<td align="left">支持</td>
</tr>
<tr>
<td align="left">xls</td>
<td align="left">支持（1.2.0版本支持）</td>
<td align="left">支持</td>
<td align="left">不支持</td>
</tr>
<tr>
<td align="left">xlsx</td>
<td align="left">高版本支持</td>
<td align="left">支持</td>
<td align="left">支持</td>
</tr>
<tr>
<td align="left">大文件</td>
<td align="left">不支持</td>
<td align="left">支持</td>
<td align="left">支持</td>
</tr>
<tr>
<td align="left">效率</td>
<td align="left">快</td>
<td align="left">快</td>
<td align="left">快</td>
</tr>
<tr>
<td align="left">功能</td>
<td align="left">较弱</td>
<td align="left">强大</td>
<td align="left">一般</td>
</tr>
<tr>
<td align="left">遍历耗时</td>
<td align="left">0.35 s</td>
<td align="left">2.60 s</td>
<td align="left">0.47 s</td>
</tr>
</tbody></table>
<hr>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++的*和&amp;</title>
    <url>/2021/10/12/C++/%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8/C-%E6%8C%87%E9%92%88%E5%92%8C%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<h1 id="C-的-和-amp"><a href="#C-的-和-amp" class="headerlink" title="C++的*和&amp;"></a>C++的*和&amp;</h1><h2 id="有两种用法"><a href="#有两种用法" class="headerlink" title="*有两种用法"></a><code>*</code>有两种用法</h2><ul>
<li><p>作单目运算符的时候，是<strong>取当前变量所对应的值</strong></p>
</li>
<li><p>在定义变量的时候作为<strong>指针变量</strong>，如：<code>int* a</code>    指针变量a</p>
</li>
<li><p>在函数形参列表作形参，调用函数时需要传入<strong>变量的地址</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span>* d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*d=<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span>* n=&amp;a;</span><br><span class="line">	<span class="built_in">fun</span>(n);<span class="comment">//或者fun(&amp;a)</span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;*n=&quot;</span>&lt;&lt;*n&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>结果是：*n=7</p>
<p>但是a=1</p>
</blockquote>
<h2 id="amp-有两种用法"><a href="#amp-有两种用法" class="headerlink" title="&amp;有两种用法"></a><code>&amp;</code>有两种用法</h2><ul>
<li><p>在赋值时，作单目运算符，是<strong>取址运算符</strong>，如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">b=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>* a = &amp;b;<span class="comment">//&amp;b即b的地址</span></span><br></pre></td></tr></table></figure></li>
<li><p>在函数形参列表中起<strong>引用</strong>的作用，调用函数时，需传入变量本身，而非变量的地址如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span>&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* c=<span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">	*c=<span class="number">8</span>;</span><br><span class="line">	d=*c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span>* n=&amp;a;</span><br><span class="line">	<span class="built_in">fun2</span>(*n);</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;*n=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>结果是*n=8</p>
<p>a=8</p>
</blockquote>
<p>事实上，&amp;和*在形参列表的作用差不多</p>
<h2 id="修改指针指向"><a href="#修改指针指向" class="headerlink" title="修改指针指向"></a>修改指针指向</h2><ul>
<li>若想对一级指针修改，就需要二级指针</li>
<li>&amp;和*就是为了简便操作的</li>
<li>C++用一个&amp;，就可以代替*这样，就不用写* a=b这种</li>
<li>形参一个&amp; 可以接收一级指针</li>
</ul>
<p>所以，在形参中有两种方法：</p>
<ul>
<li>使用二级指针</li>
<li>使用*&amp;代替**</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun3</span><span class="params">(<span class="keyword">int</span>* &amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>* b=<span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">	*b=<span class="number">9</span>;</span><br><span class="line">	d=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span>* n=&amp;a;</span><br><span class="line">	<span class="built_in">fun3</span>(n);</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;*n=&quot;</span>&lt;&lt;*n1&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果是：*n=9</p>
<p>但是a=1</p>
</blockquote>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>python程序打包成exe</title>
    <url>/2021/10/12/Python/%E6%89%93%E5%8C%85%E6%88%90exe/python%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe/</url>
    <content><![CDATA[<h1 id="打包基本命令"><a href="#打包基本命令" class="headerlink" title="打包基本命令"></a>打包基本命令</h1><p>打包需要使用<strong>pyinstaller</strong><br>需要用 pip 安装<br><code>pip install pyinstaller</code><br>简单的打包命令：<code>pyinstaller -F setup.py</code><br>这里的 <code>setup.py</code>是你所需要打包的 py 文件</p>
<p>你需要使用 CMD 命令窗口，然后把工作目录转到某个文件夹中，打包时，他会在这个文件夹中生成三个文件。</p>
<p><img src="/2021/10/12/Python/%E6%89%93%E5%8C%85%E6%88%90exe/python%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe/%E6%89%93%E5%8C%85%E5%AE%8C%E7%9A%84%E6%96%87%E4%BB%B6.png"></p>
<p>在 <strong>dist</strong> 文件夹中就有打包完的 exe 文件，.spec 文件是打包的缓存文件。<br>在 -F 后面可加一些参数</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-w</td>
<td align="center">执行时不显示命令行窗口</td>
</tr>
<tr>
<td align="center">-i xxx.ico</td>
<td align="center">指定 exe 文件的图标</td>
</tr>
</tbody></table>
<p>这些命令都需要放到<code>-F</code>后面 setup.py 前面</p>
<p><img src="/2021/10/12/Python/%E6%89%93%E5%8C%85%E6%88%90exe/python%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe/%E5%AE%8C%E6%95%B4%E5%91%BD%E4%BB%A4.png"></p>
<h1 id="pyinstaller打包机制"><a href="#pyinstaller打包机制" class="headerlink" title="pyinstaller打包机制"></a>pyinstaller打包机制</h1><ul>
<li>我们写的python脚本是不能脱离python解释器单独运行的，所以在打包的时候，至少会将python解释器和脚本一起打包，同样，为了打包的exe能正常运行，会把我们所有安装的第三方包一并打包到exe。</li>
<li>也就是说我们需要确保打包的程序中所使用的模块是 pip 已经安装，否则打包之后的 exe 文件会提示错误，找不到模块。<br>可以通过<code>pip list</code>查看<br>如：<br><img src="/2021/10/12/Python/%E6%89%93%E5%8C%85%E6%88%90exe/python%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe/pip_list.jpg"></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>bs4</title>
    <url>/2021/09/29/Python/%E7%88%AC%E8%99%AB/bs4/</url>
    <content><![CDATA[<h1 id="bs4"><a href="#bs4" class="headerlink" title="bs4"></a>bs4</h1><p>bs4进行数据解析</p>
<ul>
<li><p>数据解析的原理：</p>
<ol>
<li><p>标签定位</p>
</li>
<li><p>提取标签、标签属性中存储的数据值</p>
</li>
</ol>
</li>
<li><p>bs4数据解析的原理：</p>
<ul>
<li>1.实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中</li>
<li>2.通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取</li>
</ul>
</li>
<li><p>环境安装：</p>
<ul>
<li>pip install bs4</li>
<li>pip install lxml</li>
</ul>
</li>
</ul>
<h2 id="如何使用BeautifulSoup："><a href="#如何使用BeautifulSoup：" class="headerlink" title="如何使用BeautifulSoup："></a>如何使用BeautifulSoup：</h2><ul>
<li><p><code>from bs4 import BeautifulSoup</code></p>
</li>
<li><p>对象的实例化：</p>
<ol>
<li><p>将本地的html文档中的数据加载到该对象中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;./test.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">soup = BeautifulSoup(fp,<span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>将互联网上获取的页面源码加载到该对象中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">page_text = response.text</span><br><span class="line">soup = BeatifulSoup(page_text,<span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h3 id="（一）根据标签名查找"><a href="#（一）根据标签名查找" class="headerlink" title="（一）根据标签名查找"></a>（一）根据标签名查找</h3><ul>
<li>soup.a   只能找到第一个符合要求的标签</li>
</ul>
<h3 id="（二）获取属性"><a href="#（二）获取属性" class="headerlink" title="（二）获取属性"></a>（二）获取属性</h3><ul>
<li><p>soup.a.attrs  获取a所有的属性和属性值，返回一个字典</p>
</li>
<li><p>soup.a.attrs[‘href’]   获取href属性</p>
</li>
<li><p>soup.a[‘href’]   也可简写为这种形式</p>
</li>
</ul>
<h3 id="（三）获取内容"><a href="#（三）获取内容" class="headerlink" title="（三）获取内容"></a>（三）获取内容</h3><ul>
<li><p>soup.a.string</p>
</li>
<li><p>soup.a.text</p>
</li>
<li><p>soup.a.get_text()</p>
</li>
<li><p>text/get_text()：可以获取某一个标签中所有的文本内容</p>
</li>
<li><p>string：只可以获取该标签下面直系的文本内容</p>
</li>
</ul>
<p><strong>【注意】</strong>如果标签还有标签，那么string获取到的结果为None，而其它两个，可以获取文本内容</p>
<h3 id="（四）find：找到第一个符合要求的标签"><a href="#（四）find：找到第一个符合要求的标签" class="headerlink" title="（四）find：找到第一个符合要求的标签"></a>（四）find：找到第一个符合要求的标签</h3><ul>
<li><p><code>soup.find(&#39;a&#39;)</code>  找到第一个符合要求的</p>
</li>
<li><p><code>soup.find(&#39;a&#39;, title=&quot;xxx&quot;)</code></p>
</li>
<li><p><code>soup.find(&#39;a&#39;, alt=&quot;xxx&quot;)</code></p>
</li>
<li><p><code>soup.find(&#39;a&#39;, class_=&quot;xxx&quot;)</code></p>
</li>
<li><p><code>soup.find(&#39;a&#39;, id=&quot;xxx&quot;)</code></p>
</li>
</ul>
<h3 id="（五）find-all：找到所有符合要求的标签"><a href="#（五）find-all：找到所有符合要求的标签" class="headerlink" title="（五）find_all：找到所有符合要求的标签"></a>（五）find_all：找到所有符合要求的标签</h3><ul>
<li><p><code>soup.find_all(&#39;a&#39;)</code></p>
</li>
<li><p><code>soup.find_all([&#39;a&#39;,&#39;b&#39;])</code> 找到所有的a和b标签</p>
</li>
<li><p><code>soup.find_all(&#39;a&#39;, limit=2)</code>  限制前两个</p>
</li>
</ul>
<h3 id="（六）根据选择器选择指定的内容"><a href="#（六）根据选择器选择指定的内容" class="headerlink" title="（六）根据选择器选择指定的内容"></a>（六）根据选择器选择指定的内容</h3><ul>
<li>select(‘某种选择器（id，class，标签…选择器）’)，返回的是一个列表。</li>
<li>如：<code>select:soup.select(&#39;#feng&#39;)</code></li>
</ul>
<p>常见的选择器：标签选择器(a)、类选择器(.)、id选择器(#)</p>
<ul>
<li>层级选择器：<ul>
<li>soup.select(‘.tang &gt; ul &gt; li &gt; a &gt; .lala &gt; #nems’)：&gt;表示的是一个层级</li>
<li>soup.select(‘.tang &gt; ul a #nems’)：空格表示的多个层级</li>
</ul>
</li>
</ul>
<p><strong>【注意】</strong>select选择器返回<em><strong>永远是列表</strong></em>，需要通过下标提取指定的对象</p>
<h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><p>爬取豆瓣TOP250电影信息及封面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, Border, Side, PatternFill, colors, Alignment</span><br><span class="line"></span><br><span class="line">path=<span class="string">&#x27;./豆瓣&#x27;</span></span><br><span class="line">rank=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化一张工作表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_excel</span>(<span class="params">book,sh</span>):</span></span><br><span class="line">    <span class="comment"># 修改当前sheet标题</span></span><br><span class="line">    sh.title = <span class="string">&#x27;豆瓣TOP250&#x27;</span></span><br><span class="line">    row = [<span class="string">&#x27;排名&#x27;</span>,<span class="string">&#x27;电影&#x27;</span>,<span class="string">&#x27;电影别称&#x27;</span>,<span class="string">&#x27;电影类型&#x27;</span>,<span class="string">&#x27;电影评分&#x27;</span>]</span><br><span class="line">    rows = [<span class="string">&#x27;排名&#x27;</span>, <span class="string">&#x27;电影&#x27;</span>, <span class="string">&#x27;电影别称&#x27;</span>, <span class="string">&#x27;电影类型&#x27;</span>, <span class="string">&#x27;电影评分&#x27;</span>,<span class="string">&#x27;sssssssssssssss&#x27;</span>]</span><br><span class="line">    sh.append(row)</span><br><span class="line">    book.save(<span class="string">&#x27;豆瓣TOP250.xlsx&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;创建工作表完成！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取电影封面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_movie</span>(<span class="params">url,soup,len_movies</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, len_movies):</span><br><span class="line">        <span class="comment"># 每个电影名称（用bs4层级选择器寻找电影名）</span></span><br><span class="line">        img_name = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li img&#x27;</span>)[i][<span class="string">&#x27;alt&#x27;</span>]</span><br><span class="line">        path_img = os.getcwd() + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>) + img_name + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        <span class="comment"># 电影图片（用bs4层级选择器寻找电影封面）</span></span><br><span class="line">        url_img_movie = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li img&#x27;</span>)[i][<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">        <span class="comment"># 获取图片数据并以二进制保存在img_movie里</span></span><br><span class="line">        img_movie = requests.get(url=url_img_movie, headers=header).content</span><br><span class="line">        <span class="comment"># 存储</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path_img, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="comment">#命令行清屏，pycharm无法清屏</span></span><br><span class="line">            os.system(<span class="string">&quot;cls&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;进度：&#x27;</span>+<span class="built_in">str</span>(i/len_movies)+<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">            fp.write(img_movie)</span><br><span class="line">        <span class="comment">#print(img_name + &#x27;已下载完成!&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#电影信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_movie_message</span>(<span class="params">soup,len_movies,book,sh</span>):</span></span><br><span class="line">    <span class="comment">#影名匹配模式</span></span><br><span class="line">    re_mov_name = <span class="string">&#x27;&lt;span class=&quot;title&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span></span><br><span class="line">    <span class="comment">#信息匹配模式</span></span><br><span class="line">    re_messa_movie = <span class="string">&#x27;&lt;br&gt;(.*?[\n]*?.*?[\n]*?.*?)&lt;/p&gt;&#x27;</span></span><br><span class="line">    <span class="comment">#其他影名匹配模式</span></span><br><span class="line">    re_oth_name = <span class="string">&#x27;&lt;span class=&quot;other&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span></span><br><span class="line">    <span class="comment"># 电影评分匹配模式</span></span><br><span class="line">    re_score = <span class="string">&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;([0-9]\.[0-9])&lt;/span&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, len_movies):</span><br><span class="line">        <span class="comment">#添加的内容</span></span><br><span class="line">        list_movie = []</span><br><span class="line">        <span class="keyword">global</span> rank</span><br><span class="line">        rank += <span class="number">1</span></span><br><span class="line">        list_movie.append(rank)</span><br><span class="line">        mov_name1 = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li&#x27;</span>)[i]</span><br><span class="line">        <span class="comment">#用正则表达式寻找电影名字</span></span><br><span class="line">        temp_mov_name = re.findall(pattern=re_mov_name, string=<span class="built_in">str</span>(mov_name1))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 拼接有多个名字的电影</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(temp_mov_name) &gt; <span class="number">1</span>:</span><br><span class="line">            mov_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(temp_mov_name)):</span><br><span class="line">                mov_name += temp_mov_name[a]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mov_name = temp_mov_name[<span class="number">0</span>]</span><br><span class="line">        list_movie.append(mov_name)</span><br><span class="line">        <span class="comment">#print(mov_name)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 电影的其他名字</span></span><br><span class="line">        mov_oth_name = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li .other&#x27;</span>)[i]</span><br><span class="line">        <span class="comment">#用正则表达式寻找电影其他名字</span></span><br><span class="line">        mov_oth_name = re.findall(re_oth_name,<span class="built_in">str</span>(mov_oth_name))[<span class="number">0</span>].split(<span class="string">&#x27;\xa0&#x27;</span>)[<span class="number">2</span>]</span><br><span class="line">        list_movie.append(mov_oth_name)</span><br><span class="line">        <span class="built_in">print</span>(mov_oth_name)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#电影类型(待用正则优化)</span></span><br><span class="line">        type_movie = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li .bd&#x27;</span>)[i]</span><br><span class="line">        num_type_movie = <span class="built_in">str</span>(type_movie).find(<span class="string">&#x27;&lt;br/&gt;&#x27;</span>)</span><br><span class="line">        num_type_movie1 = <span class="built_in">str</span>(type_movie).find(<span class="string">&#x27;&lt;/p&gt;&#x27;</span>)</span><br><span class="line">        temp_num_type_movie = <span class="built_in">str</span>(type_movie)[num_type_movie:num_type_movie1]</span><br><span class="line">        list_movie.append(temp_num_type_movie[<span class="number">5</span>:-<span class="number">6</span>].strip())</span><br><span class="line">        <span class="comment">#print(temp_num_type_movie[5:-6].strip())</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 电影评分（用bs4层级选择器寻找评分，返回列表，并找出对应元素，第i+1个）</span></span><br><span class="line">        score_movie = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li .star&#x27;</span>)[i]</span><br><span class="line">        <span class="comment">#用正则表达式寻找电影评分</span></span><br><span class="line">        score_movie = re.findall(re_score,<span class="built_in">str</span>(score_movie))</span><br><span class="line">        list_movie.append(score_movie[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#print(list_movie)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#将数据导入excel</span></span><br><span class="line">        sh.append(list_movie)</span><br><span class="line">        <span class="comment">#print(score_movie)</span></span><br><span class="line">        book.save(<span class="string">&#x27;豆瓣TOP250.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#网页头信息</span></span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https: // pagead2.googlesyndication.com /&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#图片头信息</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec - ch - ua - mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec - ch - ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v = &quot;89&quot;, &quot;Chromium&quot;;v = &quot;89&quot;, &quot;;Not A Brand&quot;;v = &quot;99&quot;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&#x27;</span></span><br><span class="line">    <span class="comment"># 创建程序所在文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    <span class="comment"># 将工作目录改为刚创建的文件夹里</span></span><br><span class="line">    os.chdir(path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一张excel对象</span></span><br><span class="line">    book = openpyxl.Workbook()</span><br><span class="line">    <span class="comment"># 创建新的工作簿</span></span><br><span class="line">    sh = book.active</span><br><span class="line">    <span class="comment"># 初始化一张工作表</span></span><br><span class="line">    start_excel(book=book, sh=sh)</span><br><span class="line">    <span class="comment">#页数</span></span><br><span class="line">    pagenum=-<span class="number">25</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        pagenum+=<span class="number">25</span></span><br><span class="line">        <span class="comment">#第n页的新网址</span></span><br><span class="line">        new_url=url.<span class="built_in">format</span>(pagenum)</span><br><span class="line">        <span class="comment">#获取整个网页源码</span></span><br><span class="line">        page_data = requests.get(url=new_url,headers=headers).text</span><br><span class="line">        <span class="comment">#煲汤实例化对象</span></span><br><span class="line">        soup = BeautifulSoup(page_data,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        <span class="comment">#寻找各个电影封面（用bs4层级选择器寻找封面所在标签）</span></span><br><span class="line">        len_movies = <span class="built_in">len</span>(soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li img&#x27;</span>))</span><br><span class="line">        <span class="comment">#收集每部电影的封面</span></span><br><span class="line">        get_img_movie(url=new_url,soup=soup,len_movies=len_movies)</span><br><span class="line">        <span class="comment"># 电影信息</span></span><br><span class="line">        get_movie_message(soup=soup,len_movies=len_movies,book=book,sh=sh)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        sh.cell(<span class="number">1</span>, i).font = Font(size=<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 设置行高</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">251</span>):</span><br><span class="line">        sh.row_dimensions[i].height = <span class="number">25</span></span><br><span class="line">    <span class="comment"># 设置列宽</span></span><br><span class="line">    sh.row_dimensions[<span class="number">1</span>].width = <span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">70</span>):</span><br><span class="line">        sh.column_dimensions[<span class="built_in">chr</span>(i)].width = <span class="number">30</span></span><br><span class="line">    <span class="comment"># 通过参数horizontal和vertical来设置文字在单元格里的对齐方式，此外设置值还可为left和right</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">252</span>):</span><br><span class="line">            sh.cell(j,i).alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">    book.save(<span class="string">&#x27;豆瓣TOP250.xlsx&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取完成！&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>openpyxl</title>
    <url>/2021/09/29/Python/%E7%88%AC%E8%99%AB/openpyxl/</url>
    <content><![CDATA[<h1 id="openpyxl"><a href="#openpyxl" class="headerlink" title="openpyxl"></a>openpyxl</h1><p><strong>主要方法</strong></p>
<h2 id="创建新excel"><a href="#创建新excel" class="headerlink" title="创建新excel"></a>创建新excel</h2><p>创建时会自动创建一张新表</p>
<p><code>wb = openpyxl.Workbook()</code>  </p>
<h2 id="加载本地excel文件"><a href="#加载本地excel文件" class="headerlink" title="加载本地excel文件"></a>加载本地excel文件</h2><p><code>wb = openpyxl.load_workbook(&#39;e:\python lianxi\income.xlsx&#39;)</code></p>
<h2 id="获取当前表对象"><a href="#获取当前表对象" class="headerlink" title="获取当前表对象"></a>获取当前表对象</h2><p><code>sh = wb.active</code>  </p>
<h2 id="获取Excel中所有表名"><a href="#获取Excel中所有表名" class="headerlink" title="获取Excel中所有表名"></a>获取Excel中所有表名</h2><p>是列表<code>wb.sheetnames</code></p>
<h2 id="根据名称获取某个工作表对象"><a href="#根据名称获取某个工作表对象" class="headerlink" title="根据名称获取某个工作表对象"></a>根据名称获取某个工作表对象</h2><p><code>sh = wb[&#39;工资表&#39;]</code></p>
<h2 id="修改当前-sheet-的标题"><a href="#修改当前-sheet-的标题" class="headerlink" title="修改当前 sheet 的标题"></a>修改当前 sheet 的标题</h2><p><code>sh.title = &#39;工资表&#39;</code>  </p>
<h2 id="获取当前工作表的表名"><a href="#获取当前工作表的表名" class="headerlink" title="获取当前工作表的表名"></a>获取当前工作表的表名</h2><p><code>sheet_name = sh.title</code></p>
<h2 id="新建工作表"><a href="#新建工作表" class="headerlink" title="新建工作表"></a>新建工作表</h2><p><strong>建在最前：</strong></p>
<p><code>sh1 = wb.create_sheet(&#39;年龄表-最前&#39;,0)</code>（0为插入位置）</p>
<p><strong>建在最后：</strong></p>
<p><code>sh2 = wb.create_sheet(&#39;年龄表-最后&#39;)</code>  </p>
<h2 id="删除工作表"><a href="#删除工作表" class="headerlink" title="删除工作表"></a>删除工作表</h2><p>按工作表名字删除</p>
<p><code>wb.remove(&#39;sheet&#39;)</code></p>
<h2 id="修改单元格的值"><a href="#修改单元格的值" class="headerlink" title="修改单元格的值"></a>修改单元格的值</h2><p>三种方法（都一样）</p>
<ul>
<li><code>sh[&#39;A1&#39;] = &#39;你好&#39;</code></li>
<li><code>sh[&#39;A1&#39;].value= &#39;你好&#39;</code></li>
<li><code>sh.cell(row,columun).value = &#39;你好&#39;</code></li>
</ul>
<p>也可以加公式</p>
<ul>
<li><p><code>sheet[&#39;A6&#39;] = &#39;=SUM(A1:A5)&#39;</code></p>
</li>
<li><p><code>sheet[&#39;A6&#39;].value = &#39;=SUM(A1:A5)&#39;</code></p>
</li>
<li><p><code>sh.cell(row,columun).value = &#39;=SUM(A1:A5)&#39;</code></p>
</li>
</ul>
<h2 id="获取单元格内容"><a href="#获取单元格内容" class="headerlink" title="获取单元格内容"></a>获取单元格内容</h2><p>有两种方法：</p>
<ol>
<li><code>value = sh.cell(row,column).value</code></li>
<li><code>value = sh[&#39;A2&#39;].value</code></li>
</ol>
<h2 id="获取最大行和最大列"><a href="#获取最大行和最大列" class="headerlink" title="获取最大行和最大列"></a>获取最大行和最大列</h2><ul>
<li>最大行：<code>max_row = sh.max_row</code> </li>
<li>最大列：<code>max_col = sh.max_column</code> </li>
</ul>
<h2 id="保存文件（可指定路径，不指定则生成在程序所在目录）"><a href="#保存文件（可指定路径，不指定则生成在程序所在目录）" class="headerlink" title="保存文件（可指定路径，不指定则生成在程序所在目录）"></a>保存文件（可指定路径，不指定则生成在程序所在目录）</h2><p><code>wb.save(&#39;信息.xlsx&#39;)</code>  </p>
<h2 id="插入行"><a href="#插入行" class="headerlink" title="插入行"></a>插入行</h2><ul>
<li><p>在第2行的位置插入1行 </p>
<p><code>sh.insert_rows(2)</code></p>
</li>
<li><p>在第3行的位置插入3行</p>
<p> <code>sh.insert_rows(3,3)</code></p>
</li>
</ul>
<h2 id="插入列"><a href="#插入列" class="headerlink" title="插入列"></a>插入列</h2><ul>
<li><p>在第2列的位置插入1列</p>
<p><code>sh.insert_cols(2) </code></p>
</li>
<li><p>在第2列的位置插入3列</p>
<p><code>sh.insert_cols(2,3)</code></p>
</li>
</ul>
<h2 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h2><ul>
<li><p>在第2行的位置删除1行</p>
<p><code>sh.delete_rows(2)</code></p>
</li>
<li><p>在第3行的位置删除3行</p>
<p><code>sh.delete_rows(3,3)</code></p>
</li>
</ul>
<h2 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h2><ul>
<li><p>在第2列的位置删除1列</p>
<p><code>sh.delete_cols(2)</code></p>
</li>
<li><p>在第3列的位置删除3列</p>
<p><code>sh.delete_cols(3,3)</code></p>
</li>
</ul>
<p>【注意】</p>
<p>sheet.cell(row,column)中参数分别是行和列，且必须为整数，如果列为英文字母，可以利用 <strong>openpyxl.utils</strong> 中的 <strong>column_index_from_string</strong>**(char)<strong>进行字母数字的转化。顺便一说，同理也可以利用</strong>get_column_letter(number)**进行数字字母间的转化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl.utils <span class="keyword">import</span> get_column_letter, column_index_from_string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对列进行字母/数字转化</span></span><br><span class="line">c_num = column_index_from_string(<span class="string">&#x27;B&#x27;</span>)  <span class="comment"># c_num = 2</span></span><br><span class="line">c_char = get_column_letter(<span class="number">5</span>)          <span class="comment"># c_char = &#x27;E‘</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="遍历行和列"><a href="#遍历行和列" class="headerlink" title="遍历行和列"></a>遍历行和列</h2><p>在处理Excel表格有时可能需要对表格进行遍历查找，openpyxl中便提供了一个行和列的生成器**(sheet.rows<strong>和</strong>sheet.columns)**,这两个生成器里面是每一行（或列）的数据，每一行（或列）又由一个tuple包裹，借此可以很方便地完成对行和列的遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对行进行遍历,输出A1,B1,C1 ...</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> sheet.rows:</span><br><span class="line">    <span class="comment"># 对当前行的每一个元素进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">        <span class="built_in">print</span>(cell.value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对列进行遍历,输出A1,A2,A3 ...</span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> sheet.columns:</span><br><span class="line">    <span class="comment"># 对当前列的每一个元素进行遍历</span></span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> column:</span><br><span class="line">        <span class="built_in">print</span>(cell.value)</span><br></pre></td></tr></table></figure>



<p>**list(sheet.rows)[index]**对某一行或列进行遍历</p>
<p>而在此值得注意的是，由于<code>sheet.rows(或sheet.columns)</code>是生成器类型，是不能直接调用的，需将其转化为一个list类型，然后再通过索引遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对某一特定的行进行遍历</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> <span class="built_in">list</span>(sheet.rows)[<span class="number">0</span>]:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 对某一特定的行进行遍历</span></span><br><span class="line"><span class="keyword">for</span> cell <span class="keyword">in</span> <span class="built_in">list</span>(sheet.columns)[<span class="number">0</span>]:</span><br><span class="line">    <span class="built_in">print</span>(cell.value)</span><br></pre></td></tr></table></figure>



<p>同时，也可以通过使用**sheet[行列值:行列值]**来对给定单元格范围进行遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对某一单元格范围进行遍历</span></span><br><span class="line"><span class="keyword">for</span> spaces <span class="keyword">in</span> sheet[<span class="string">&#x27;A1&#x27;</span>:<span class="string">&#x27;B2&#x27;</span>]:</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> spaces:</span><br><span class="line">        <span class="built_in">print</span>(cell.value)</span><br></pre></td></tr></table></figure>

<p><strong>【注意】</strong>这种方法按行遍历</p>
<p><img src="/2021/09/29/Python/%E7%88%AC%E8%99%AB/openpyxl/openpyxl_1.jpg" alt="alt a"></p>
<h2 id="一行或多行写入"><a href="#一行或多行写入" class="headerlink" title="一行或多行写入"></a>一行或多行写入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入一行</span></span><br><span class="line">row = [<span class="number">1</span> ,<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">sh.append(row)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入多行</span></span><br><span class="line">rows = [</span><br><span class="line">    [<span class="string">&#x27;ID&#x27;</span>, <span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Department&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;001&#x27;</span>, <span class="string">&#x27;Lee&#x27;</span>,<span class="string">&#x27;CS&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;002&#x27;</span>, <span class="string">&#x27;John&#x27;</span>,<span class="string">&#x27;MA&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;003&#x27;</span>, <span class="string">&#x27;Amy&#x27;</span>,<span class="string">&#x27;IS&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rows:</span><br><span class="line">	sh.append(i)</span><br></pre></td></tr></table></figure>



<h2 id="设置单元格样式"><a href="#设置单元格样式" class="headerlink" title="设置单元格样式"></a>设置单元格样式</h2><h3 id="导入字体、边框、颜色以及对齐方式相关库"><a href="#导入字体、边框、颜色以及对齐方式相关库" class="headerlink" title="导入字体、边框、颜色以及对齐方式相关库"></a>导入字体、边框、颜色以及对齐方式相关库</h3><p><code>from openpyxl.styles import Font, Border, Side, PatternFill, colors, Alignment</code></p>
<h3 id="（一）字体"><a href="#（一）字体" class="headerlink" title="（一）字体"></a>（一）字体</h3><p>设置字体风格为Times New Roman，大小为16，粗体、斜体，颜色蓝色</p>
<p><code>sh[&#39;A1&#39;].font = Font(name=&#39;Times New Roman&#39;, size=16, bold=True, italic=True, color=colors.BLUE)</code></p>
<p>常用参数：</p>
<ul>
<li><code>name</code>：字体风格名字</li>
<li><code>size</code>：字体大小</li>
<li><code>bold</code>：粗体</li>
<li><code>italic</code>：斜体</li>
<li><code>color</code>：颜色，也可以用RGB十六进制如：”FF0000”</li>
</ul>
<p><img src="/2021/09/29/Python/%E7%88%AC%E8%99%AB/openpyxl/openpyxl_3.jpg" alt="alt 索引颜色"></p>
<p>还支持旧索引颜色以及主题和色调。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = colors.Color(indexed=<span class="number">32</span>)</span><br><span class="line">c = colors.Color(theme=<span class="number">6</span>, tint=<span class="number">0.5</span>)</span><br><span class="line">font = Font(color = c)</span><br></pre></td></tr></table></figure>



<h3 id="（二）对齐方式"><a href="#（二）对齐方式" class="headerlink" title="（二）对齐方式"></a>（二）对齐方式</h3><p>通过参数horizontal和vertical来设置文字在单元格里的对齐方式，此外设置值还可为left和right</p>
<p><code>sh[&#39;A1&#39;].alignment = Alignment(horizontal=&#39;center&#39;,vertical=&#39;center&#39;)</code></p>
<ul>
<li><p><strong>horizontal</strong>：水平参数</p>
</li>
<li><p>可选：</p>
<ul>
<li><p><code>&#39;center&#39;</code>：居中</p>
</li>
<li><p><code>&#39;fill&#39;</code>：用该单元格的值显示排满整个格（值不变）</p>
<p><img src="/2021/09/29/Python/%E7%88%AC%E8%99%AB/openpyxl/openpyxl_2.jpg" alt="alt fill"></p>
</li>
<li><p><code>&#39;general&#39;</code>：默认</p>
</li>
<li><p><code>&#39;left&#39;</code>：左对齐</p>
</li>
<li><p><code>&#39;justify&#39;</code>：自动换行，水平参数为<strong>默认</strong></p>
</li>
<li><p><code>&#39;centerContinuous&#39;</code>：</p>
</li>
<li><p><code>&#39;right&#39;</code>：右对齐</p>
</li>
<li><p><code>&#39;distributed&#39;</code>：自动换行</p>
</li>
</ul>
</li>
<li><p><strong>vertical</strong>：竖直参数</p>
</li>
<li><p>可选：</p>
<ul>
<li><code>&#39;bottom&#39;</code>：底端对齐</li>
<li> <code>&#39;justify&#39;</code>：</li>
<li>`` ‘top’`：顶端对齐</li>
<li><code>&#39;center&#39;</code>：垂直居中</li>
<li><code>&#39;distributed&#39;</code>：自动换行</li>
</ul>
</li>
</ul>
<p><strong>【注意】</strong><code>&#39;distributed&#39;</code>、<code>&#39;justify&#39;</code>和<code>&#39;centerContinuous&#39;</code>建议不要使用，避免不必要的错误</p>
<h3 id="（三）边框"><a href="#（三）边框" class="headerlink" title="（三）边框"></a>（三）边框</h3><p>首先设置边框四个方向的线条种类</p>
<p><code>left, right, top, bottom = [Side(style=&#39;thin&#39;, color=&#39;000000&#39;)] * 4</code></p>
<p>再将各方向线条作为参数传入Border方法</p>
<p><code>sh[&#39;C1&#39;].border = Border(left=left, right=right, top=top, bottom=bottom)</code></p>
<h3 id="（四）设置行高和列宽"><a href="#（四）设置行高和列宽" class="headerlink" title="（四）设置行高和列宽"></a>（四）设置行高和列宽</h3><p>行和列的长度大小可以通过<strong>row_dimensions[序号].height</strong>和<strong>column_dimensions[标号].width</strong>来设置</p>
<ul>
<li><p>设置行高</p>
<p><code>sh.row_dimensions[1].height = 25</code></p>
</li>
<li><p>设置列宽</p>
<p><code>sh.column_dimensions[&#39;D&#39;].width = 15.5</code></p>
</li>
</ul>
<h3 id="（五）合并和拆分单元格"><a href="#（五）合并和拆分单元格" class="headerlink" title="（五）合并和拆分单元格"></a>（五）合并和拆分单元格</h3><ul>
<li><p>合并单元格</p>
<p><code>sh.merge_cells(&#39;A1:B2&#39;)</code></p>
<p><code>sh.merge_cells(&#39;A3:B4&#39;)</code></p>
</li>
<li><p>拆分单元格</p>
<p><code>sh.unmerge_cells(&#39;A1:B2&#39;)</code></p>
</li>
</ul>
<p><strong>【注意】</strong>除了对角矩形区域化合并，也可以对一行或一列进行合并，只需相应修改参数即可。不过，这里要注意的是，合并后单元格显示的文本内容是<strong>合并前最左上角单元格的内容</strong>，而其他单元格内容则会自动清除。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>xpath</title>
    <url>/2021/09/29/Python/%E7%88%AC%E8%99%AB/xpath/</url>
    <content><![CDATA[<h1 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h1><ul>
<li>xpath解析原理：<ol>
<li>实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。</li>
<li>调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获。</li>
</ol>
</li>
<li>环境的安装：<ul>
<li>pip install lxml</li>
</ul>
</li>
</ul>
<h2 id="xpath模板"><a href="#xpath模板" class="headerlink" title="xpath模板"></a>xpath模板</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- 本地文件：</span><br><span class="line">tree = etree.parse(文件名)</span><br><span class="line">data = tree.xpath(<span class="string">&quot;xpath表达式&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"></span><br><span class="line">- 网络数据：</span><br><span class="line">tree = etree.HTML(网页内容字符串)</span><br><span class="line">data = tree.xpath(<span class="string">&quot;xpath表达式&quot;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<h2 id="常用xpath表达式"><a href="#常用xpath表达式" class="headerlink" title="常用xpath表达式"></a><strong>常用xpath表达式</strong></h2><ul>
<li><p>如何实例化一个etree对象：<code>from lxml import etree</code></p>
<ol>
<li><p>将本地的html文档中的源码数据加载到etree对象中：</p>
<pre><code>`etree.parse(filePath)`
</code></pre>
</li>
<li><p>可以将从互联网上获取的源码数据加载到该对象中</p>
<pre><code>`etree.HTML(&#39;page_text&#39;)`
</code></pre>
</li>
</ol>
<ul>
<li><p><code>etree.xpath(&#39;xpath表达式&#39;)</code></p>
<ol>
<li><p>**/**：表示的是从根节点开始定位。表示的是一个层级。</p>
</li>
<li><p>**//**：表示的是多个层级。可以表示从任意位置开始定位。</p>
</li>
<li><p><strong>属性定位：</strong></p>
<ul>
<li><p>找到class属性值为song的div标签</p>
</li>
<li><p><code>//div[@class=&quot;song&quot;] </code></p>
</li>
</ul>
</li>
<li><p><strong>索引定位：</strong></p>
<ul>
<li><em><strong>索引是从1开始的</strong></em></li>
<li>找到class属性值为tang的div的直系子标签ul下的第二个子标签li下的直系子标签a</li>
<li><code>//div[@class=&quot;tang&quot;]/ul/li[2]/a</code></li>
</ul>
</li>
<li><p><strong>逻辑运算：</strong></p>
<ul>
<li>找到href属性值为空且class属性值为du的a标签</li>
<li><code>//a[@href=&quot;&quot; and @class=&quot;du&quot;]</code></li>
</ul>
</li>
<li><p><strong>模糊匹配：</strong></p>
<ul>
<li><code>//div[contains(@class, &quot;ng&quot;)]</code></li>
<li><code>//div[starts-with(@class, &quot;ta&quot;)]</code></li>
</ul>
</li>
<li><p><strong>取文本：</strong></p>
<ul>
<li>/text() 获取的是标签中直系的文本内容</li>
<li>//text() 标签中直系和非直系的文本内容（所有的文本内容）</li>
<li><code>//div[@class=&quot;song&quot;]/p[1]/text()</code></li>
<li><code>//div[@class=&quot;tang&quot;]//text()</code></li>
</ul>
</li>
<li><p><strong>取属性：</strong></p>
<ul>
<li><code>//div[@class=&quot;tang&quot;]//li[2]/a/@href</code></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><em><strong>解析后标签仍是标签的，还能再解析</strong></em></p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li_list = tree.xpath(&#x27;//ul[@class=&quot;house-list-wrap&quot;]/li&#x27;)</span><br><span class="line">title = li_list[0].xpath(&#x27;.//div[@class=&quot;list-info&quot;]/h2/a/text()&#x27;)[0]</span><br></pre></td></tr></table></figure>



<h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><p>解析彼岸图网的图片，并打印出网址和图片名<a href="http://pic.netbian.com/4kmeinv/">http://pic.netbian.com/4kmeinv/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree </span><br><span class="line">url = <span class="string">&#x27;http://pic.netbian.com/4kmeinv/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line"><span class="comment">#获取页面原始编码格式</span></span><br><span class="line"><span class="built_in">print</span>(response.encoding)</span><br><span class="line">page_text = response.text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;slist&quot;]/ul/li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    img_url = <span class="string">&#x27;http://pic.netbian.com&#x27;</span>+li.xpath(<span class="string">&#x27;./a/img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    img_name = li.xpath(<span class="string">&#x27;./a/img/@alt&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    img_name = img_name.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(img_url,img_name)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>形参*args 和 **kwargs</title>
    <url>/2021/09/29/Python/%E8%AF%AD%E6%B3%95%E7%BB%86%E8%8A%82/args%20%E5%92%8C%20kwargs/</url>
    <content><![CDATA[<h1 id="args-和-kwargs-主要用于函数定义。"><a href="#args-和-kwargs-主要用于函数定义。" class="headerlink" title="*args 和 **kwargs 主要用于函数定义。"></a>*args 和 **kwargs 主要用于函数定义。</h1><p>你可以将不定数量的参数传递给一个函数。不定的意思是：预先并不知道, 函数使用者会传递多少个参数给你, 所以在这个场景下使用这两个关键字。其实并不是必须写成 *args 和 **kwargs。***(星号) 才是必须的. 你也可以写成 <em>ar  和 <em>k</em></em> 。而写成 *args 和**kwargs 只是一个通俗的命名约定。</p>
<p>python函数传递参数的方式有两种：</p>
<p>位置参数（positional argument）<br>关键词参数（keyword argument）如：<br>*args 与 **kwargs 的区别，两者都是 python 中的可变参数：</p>
<ul>
<li>*args 表示任何多个无名参数，它本质是一个 <strong>tuple</strong>（元组）</li>
<li>**kwargs 表示关键字参数，它本质上是一个 <strong>dict</strong>（字典）</li>
</ul>
<p>如果同时使用 *args 和 **kwargs 时，<strong>必须 *args 参数列要在 **kwargs 之前。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;args=&#x27;</span>, args)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;kwargs=&#x27;</span>, kwargs)</span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, A=<span class="string">&#x27;a&#x27;</span>, B=<span class="string">&#x27;b&#x27;</span>, C=<span class="string">&#x27;c&#x27;</span>, D=<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">args= (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kwargs= &#123;<span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 *args</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">name, *args</span>):</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;你好:&#x27;</span>, name)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;你的宠物有:&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">fun(<span class="string">&quot;Geek&quot;</span>, <span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>你好: Geek</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>你的宠物有: dog</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>你的宠物有: cat</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用 **kwargs</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line">	<span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; 喜欢 &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(key, value))</span><br><span class="line">        </span><br><span class="line">fun(Geek=<span class="string">&quot;cat&quot;</span>, cat=<span class="string">&quot;box&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Geek 喜欢 cat</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cat 喜欢 box</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP算法</title>
    <url>/2021/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/KMP/</url>
    <content><![CDATA[<h1 id="KMP匹配算法"><a href="#KMP匹配算法" class="headerlink" title="KMP匹配算法"></a>KMP匹配算法</h1><p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是长文本s的长度，m是模式p的长度</span></span><br><span class="line"><span class="comment">//求模式串的Next数组：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>ne数组赋值</p>
<p>例如：</p>
<img src="/2021/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/KMP/1.png" alt="1" style="zoom:50%;">

<img src="/2021/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/KMP/2.png" alt="2" style="zoom:50%;">

<img src="/2021/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/KMP/3.png" alt="3" style="zoom:50%;">

<img src="/2021/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/KMP/4.png" alt="4" style="zoom:50%;">

<img src="/2021/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/KMP/5.png" alt="5" style="zoom:50%;">

<img src="/2021/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/KMP/6.png" alt="6" style="zoom:50%;">

<img src="/2021/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/KMP%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/KMP/7.png" alt="7" style="zoom:50%;">





<p>同理，用模板字符串区匹配字符串s时，同样的方法和<a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">思路</a></p>
<h2 id="例题（ACWing-831-KMP字符串）"><a href="#例题（ACWing-831-KMP字符串）" class="headerlink" title="例题（ACWing 831. KMP字符串）"></a>例题（ACWing 831. KMP字符串）</h2><p>题目：<a href="https://www.acwing.com/problem/content/833/">https://www.acwing.com/problem/content/833/</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">char</span> s[N], p[N];</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">int</span> ne[N]; <span class="comment">//从1开始</span></span><br><span class="line"><span class="comment">//每次遇到下一个字符不匹配时，j回退到可回退的最大长度，即模板字符串往后移动最大的长度</span></span><br><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是长文本s的长度，m是模式p的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; p + <span class="number">1</span> &gt;&gt; n &gt;&gt; s + <span class="number">1</span>; <span class="comment">// 字符串也从1开始</span></span><br><span class="line">    <span class="comment">//ne初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j]; <span class="comment">//判断第i位和第j+1位元素是否相等，否则将j回退</span></span><br><span class="line">        <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j++; <span class="comment">// 匹配成功</span></span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//kmp</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j]; <span class="comment">//判断第i位和第j+1位元素是否相等，否则将j回退</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j++; <span class="comment">// 匹配成功</span></span><br><span class="line">        <span class="keyword">if</span> (j == m) <span class="comment">//模式串全部匹配成功</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i - j &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            j = ne[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

























]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>KMP算法</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2021/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Queue/SeqQueue/</url>
    <content><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><ul>
<li><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表</p>
</li>
<li><p>进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p>
</li>
<li><p>在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队</p>
</li>
<li><p>先进先出，像实际生活中的排队</p>
</li>
</ul>
<h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><p>模板题：<a href="https://www.acwing.com/problem/content/156/">AcWing 154. 滑动窗口</a></p>
<p>模型：找出滑动窗口中的最大值/最小值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> front = <span class="number">0</span>, rear = <span class="number">-1</span>; <span class="comment">// 队头、队尾指针</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (front &lt;= rear &amp;&amp; <span class="built_in">check_out</span>(q[front])) front ++ ;  <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">    <span class="keyword">while</span> (front &lt;= rear &amp;&amp; <span class="built_in">check</span>(q[rear], i)) rear -- ;</span><br><span class="line">    q[ ++ rear] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>逻辑：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a[]为需要找的数组，k为滑动窗口大小</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (front &lt;= rear &amp;&amp; i - k + <span class="number">1</span> &gt; q[front]) <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">        front++;</span><br><span class="line">    <span class="keyword">while</span> (front &lt;= rear &amp;&amp; a[i] &lt;= a[q[rear]])</span><br><span class="line">        rear--; <span class="comment">// 清除当前队列中的元素</span></span><br><span class="line">    que[++rear] = i;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; a[q[front]] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当找最小值时，队列中队头元素是最小的，依次往后排都是比前一个大的元素，当当前元素<code>a[i]&lt;=</code>队头的最小元素时，循环判断队列中的元素是否有小于<code>a[i]</code>，没有则继续从后向前判断，并将队头出队</p>
<h1 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h1><p>建立顺序队列结构必须为其静态分配或动态申请一片连续的存储空间，并设置两个指针进行管理。一个是队头指针front，它指向队头元素；另一个是队尾指针rear，它指向下一个入队元素的存储位置</p>
<p><img src="/2021/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Queue/SeqQueue/%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97.png" alt="顺序队列"></p>
<p>顺序队列中的溢出现象：</p>
<p>（1） “下溢”现象：当队列为空时，做出队运算产生的溢出现象。“下溢”是正常现象，常用作程序控制转移的条件。</p>
<p>（2）”真上溢”现象：当队列满时，做进栈运算产生空间溢出的现象。“真上溢”是一种出错状态，应设法避免。</p>
<p>（3）”假上溢”现象：由于入队和出队操作中，头尾指针只增加不减小，致使被删元素的空间永远无法重新利用。当队列中实际的元素个数远远小于向量空间的规模时，也可能由于尾指针已超越向量空间的上界而不能做入队操作。该现象称为”假上溢”现象。如图（d）</p>
<h1 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h1><ul>
<li>在实际使用队列时，为了使队列空间能重复使用，往往对队列的使用方法稍加改进：无论插入或删除，一旦rear指针增1或front指针增1 时超出了所分配的队列空间，就让它指向这片连续空间的起始位置。</li>
</ul>
<p>当队空时：<code>front=rear</code><br>当队满时：<code>front=rear</code> 亦成立<br>因此只凭等式front=rear无法判断队空还是队满。  有两种方法处理上述问题：</p>
<ul>
<li><p>（一）另设一个标志位以区别队列是空还是满。设置tag==0时为空，设置tag==1时为满</p>
</li>
<li><p>（二）<strong>少用一个元素空间</strong>，约定以“队列头指针front在队尾指针rear的下一个位置上”作为队列“满”状态的标志。即：</p>
</li>
<li><p><strong>队空</strong>时：<code> front=rear</code></p>
</li>
<li><p><strong>队满</strong>时：<code>(rear+1)%maxsize=front</code></p>
<p>这样会腾出一个结点来，<strong>即容量上限为n，则实际容量为n-1</strong></p>
</li>
</ul>
<p><strong>队尾rear始终指向队尾元素的下一个位置</strong></p>
<h1 id="循环队列概述"><a href="#循环队列概述" class="headerlink" title="循环队列概述"></a>循环队列概述</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//队列容量上限</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 5</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//结点内容的指针</span></span><br><span class="line">	string* base;</span><br><span class="line">	<span class="comment">//队头</span></span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="comment">//队尾</span></span><br><span class="line">	<span class="keyword">int</span> rear;</span><br><span class="line">	<span class="comment">//初始化</span></span><br><span class="line">	<span class="built_in">Queue</span>()</span><br><span class="line">	&#123; &#125;</span><br><span class="line">    <span class="comment">//获取长度</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Qlength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(string data)</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">    <span class="comment">//获取队头</span></span><br><span class="line">	<span class="function">string <span class="title">get_head</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>结点的内容可任意类型</strong></p>
<h1 id="初始化循环队列"><a href="#初始化循环队列" class="headerlink" title="初始化循环队列"></a>初始化循环队列</h1><ul>
<li>给队列申请一段数组内存，并且是结点内容的类型</li>
<li>判断是否创建成功</li>
<li>再设置队头和队尾指针为0</li>
</ul>
<p><strong>【注意】</strong>这里 front 和 rear 虽然类型不是指针类型，但可以理解它为一个箭头</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//给循环队列申请连续内存</span></span><br><span class="line">    base = <span class="keyword">new</span> string[MaxSize];</span><br><span class="line">    <span class="comment">//判断base是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;base) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//设置队头和队尾为0</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;front = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h1><p>==通过取模运算，来得出队列长度==</p>
<p>这里 <strong>rear - front</strong> 有可能是负数，所以要加上容量，</p>
<ul>
<li>（一）设置标志方法</li>
</ul>
<p>因为这种方法实际容量==容量上限，当队满的时候，取模运算得0，所以需加判断条件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Qlength</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//取模求长度</span></span><br><span class="line">    <span class="keyword">int</span> len = (<span class="keyword">this</span>-&gt;rear - <span class="keyword">this</span>-&gt;front + MaxSize) % MaxSize;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span> &amp;&amp; tag == <span class="number">1</span>) len = MaxSize;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>（二）非设置标志方法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Qlength</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//取模求长度</span></span><br><span class="line">    <span class="keyword">int</span> len = (<span class="keyword">this</span>-&gt;rear - <span class="keyword">this</span>-&gt;front + MaxSize) % MaxSize;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Queue/SeqQueue/%E8%8E%B7%E5%8F%96%E9%95%BF%E5%BA%A6.png" alt="获取长度"></p>
<h1 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h1><ul>
<li><strong>（一）设置标志来判断队列为空或满</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(string data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//当对头和队尾相等，并且标志为1时，判断队满</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;rear == <span class="keyword">this</span>-&gt;front &amp;&amp; tag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队满&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;rear] = data;</span><br><span class="line">    <span class="comment">//队尾+1</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;rear = (<span class="keyword">this</span>-&gt;rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    <span class="comment">//设置标志为满</span></span><br><span class="line">    tag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里不必担心为什么队还没满就设置tag=1，因为队还没满的时候，rear != front，所以判断队列是否为满的时候还不会成立，而且只有在入队的时候，才需要判断队是否为满，来防止溢出</p>
<p><img src="/2021/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Queue/SeqQueue/%E8%AE%BE%E7%BD%AE%E6%A0%87%E5%BF%97%E9%98%9F%E6%BB%A1%E5%88%A4%E6%96%AD.png" alt="设置标志队满判断"></p>
<p><strong>【提醒】</strong>rear指针总是指向队尾元素的下一个位置</p>
<ul>
<li><strong>（二）<code>(rear + 1) % maxsize = front</code></strong></li>
</ul>
<p>利用模运算来判断</p>
<p>这种方法实际容量要-1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(string data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断队是否为满</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">this</span>-&gt;rear + <span class="number">1</span>) % MaxSize == <span class="keyword">this</span>-&gt;front)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队满&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;rear] = data;</span><br><span class="line">    <span class="comment">//队尾+1</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;rear = (<span class="keyword">this</span>-&gt;rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Queue/SeqQueue/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E4%B8%BA%E6%BB%A1.png" alt="循环队列为满"></p>
<p><img src="/2021/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Queue/SeqQueue/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E4%B8%BA%E6%BB%A1%E5%8F%96%E6%A8%A1.png" alt="循环队列为满取模"></p>
<h1 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h1><ul>
<li><strong>（一）设置标志来判断队列为空或满</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//对头和队尾相等时，并且标志为0时，队为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;front == <span class="keyword">this</span>-&gt;rear &amp;&amp; tag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;弹出&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;front] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">this</span>-&gt;front = (<span class="keyword">this</span>-&gt;front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">    <span class="comment">//设置标志为空</span></span><br><span class="line">    tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的tag=1跟入队操作一样，只有在出队时才需要判断队列是否为空，以防止越界操作</p>
<ul>
<li><strong>（二）利用<code>front==rear</code>来判断队列是否为空</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断队是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;front == <span class="keyword">this</span>-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;队为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;弹出&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;front] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">this</span>-&gt;front = (<span class="keyword">this</span>-&gt;front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Queue/SeqQueue/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E4%B8%BA%E7%A9%BA.png" alt="循环队列为空"></p>
<h1 id="获取队头"><a href="#获取队头" class="headerlink" title="获取队头"></a>获取队头</h1><ul>
<li>判断队列是否为空</li>
<li>再通过数组下标方式访问队头的元素</li>
</ul>
<p>（一）设置标志</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取队头</span></span><br><span class="line"><span class="function">string <span class="title">get_head</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;front == <span class="keyword">this</span>-&gt;rear &amp;&amp; tag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;队为空&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（二）非设置标志</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取队头</span></span><br><span class="line"><span class="function">string <span class="title">get_head</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;front != <span class="keyword">this</span>-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;front];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;队列为空&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="SeqQueue全部代码"><a href="#SeqQueue全部代码" class="headerlink" title="SeqQueue全部代码"></a>SeqQueue全部代码</h1><h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h2><h3 id="（一）设置标志方法"><a href="#（一）设置标志方法" class="headerlink" title="（一）设置标志方法"></a><strong>（一）设置标志方法</strong></h3><p>==实际容量=MaxSize==</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//队列容量上限</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//结点内容</span></span><br><span class="line">	string* base;</span><br><span class="line">	<span class="comment">//队头</span></span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="comment">//队尾</span></span><br><span class="line">	<span class="keyword">int</span> rear;</span><br><span class="line">    <span class="comment">//标志</span></span><br><span class="line">    <span class="keyword">int</span> tag;</span><br><span class="line">	<span class="comment">//初始化</span></span><br><span class="line">	<span class="built_in">Queue</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//给循环队列申请连续内存</span></span><br><span class="line">		base = <span class="keyword">new</span> string[MaxSize];</span><br><span class="line">		<span class="comment">//判断是否创建成功</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;base) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		<span class="comment">//设置队头和队尾为0</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;front = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//设置标志为空</span></span><br><span class="line">        tag = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取长度</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Qlength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//取模求长度</span></span><br><span class="line">		<span class="keyword">int</span> len = (<span class="keyword">this</span>-&gt;rear - <span class="keyword">this</span>-&gt;front + MaxSize) % MaxSize;</span><br><span class="line">		<span class="keyword">if</span> (len == <span class="number">0</span>) len = MaxSize;</span><br><span class="line">		<span class="keyword">return</span> len;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//入队</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(string data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//当对头和队尾相等，并且标志为1时，判断队满</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;rear == <span class="keyword">this</span>-&gt;front &amp;&amp; tag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;队满&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;rear] = data;</span><br><span class="line">        <span class="comment">//队尾+1</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;rear = (<span class="keyword">this</span>-&gt;rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">        <span class="comment">//设置标志为满</span></span><br><span class="line">        tag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//出队</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//对头和队尾相等时，并且标志为0时，队为空</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;front == <span class="keyword">this</span>-&gt;rear &amp;&amp; tag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;队为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;弹出&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;front] &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;front = (<span class="keyword">this</span>-&gt;front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">        <span class="comment">//设置标志为空</span></span><br><span class="line">        tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取队头</span></span><br><span class="line">    <span class="function">string <span class="title">get_head</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;front == <span class="keyword">this</span>-&gt;rear &amp;&amp; tag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;队为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;front];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="（二）非设置标志方法"><a href="#（二）非设置标志方法" class="headerlink" title="（二）非设置标志方法"></a>（二）<strong>非设置标志方法</strong></h3><p>==实际容量=MaxSize-1==</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//队列容量上限</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//结点内容</span></span><br><span class="line">	string* base;</span><br><span class="line">	<span class="comment">//队头</span></span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="comment">//队尾</span></span><br><span class="line">	<span class="keyword">int</span> rear;</span><br><span class="line">	<span class="comment">//初始化</span></span><br><span class="line">	<span class="built_in">Queue</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//给循环队列申请连续内存</span></span><br><span class="line">		base = <span class="keyword">new</span> string[MaxSize];</span><br><span class="line">		<span class="comment">//判断是否创建成功</span></span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;base) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		<span class="comment">//设置队头和队尾为0</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;front = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取长度</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Qlength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//取模求长度</span></span><br><span class="line">		<span class="keyword">int</span> len = (<span class="keyword">this</span>-&gt;rear - <span class="keyword">this</span>-&gt;front + MaxSize) % MaxSize;</span><br><span class="line">		<span class="keyword">return</span> len;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//入队</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(string data)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//判断队是否为满</span></span><br><span class="line">		<span class="keyword">if</span> ((<span class="keyword">this</span>-&gt;rear + <span class="number">1</span>) % MaxSize == <span class="keyword">this</span>-&gt;front)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;队满&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;rear] = data;</span><br><span class="line">		<span class="comment">//队尾+1</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;rear = (<span class="keyword">this</span>-&gt;rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//出队</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//判断队是否为空</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;front == <span class="keyword">this</span>-&gt;rear)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;队为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;弹出&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;front] &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">this</span>-&gt;front = (<span class="keyword">this</span>-&gt;front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取队头</span></span><br><span class="line">	<span class="function">string <span class="title">get_head</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;front != <span class="keyword">this</span>-&gt;rear)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>-&gt;base[<span class="keyword">this</span>-&gt;front];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&quot;队列为空&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>SeqList</title>
    <url>/2021/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/SeqList/SeqList/</url>
    <content><![CDATA[<h1 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h1><p><strong>顺序表</strong>是在计算机内存中<strong>以数组的形式保存</strong>的线性表，表中的结点依次存放在计算机内存中一组地址<strong>连续的存储单元</strong>中。</p>
<p><strong>线性表的顺序存储</strong>：</p>
<ul>
<li>线性表的逻辑顺序与物理顺序一致;</li>
<li>数据元素之间的关系是以元素在计算机内“物理位置相邻”来体现。</li>
</ul>
<h2 id="表中的数据"><a href="#表中的数据" class="headerlink" title="表中的数据"></a>表中的数据</h2><p>表中的数据可以用结构体来表示，这里以Book信息为例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//书名</span></span><br><span class="line">	string name;</span><br><span class="line">    <span class="comment">//书价</span></span><br><span class="line">	<span class="keyword">float</span> price;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>表中每一个元素存放的是struct类型的Book对象，而Book对象中存放着Book信息</p>
<p>即–&gt;每个元素存放的是struct类型的Book信息</p>
<p><img src="/2021/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/SeqList/SeqList/SeqList%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg" alt="alt 存储结构"></p>
<h2 id="实现顺序表基本方法概述"><a href="#实现顺序表基本方法概述" class="headerlink" title="实现顺序表基本方法概述"></a>实现顺序表基本方法概述</h2><p>以Book为例：</p>
<p>首先应该先定义一个类为顺序表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明一个图书信息的指针作为地址</span></span><br><span class="line">    Book* elem;</span><br><span class="line">    <span class="comment">//图书本书</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>同时我们需要加入一些方法，例如：插入，删除，查找，打印等等方法。我们先声明这些方法，然后后续逐一定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeqList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明一个图书信息的指针作为地址</span></span><br><span class="line">    Book* elem;</span><br><span class="line">    <span class="comment">//图书本书</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="comment">//初始化顺序表</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="初始化顺序表"><a href="#初始化顺序表" class="headerlink" title="初始化顺序表"></a>初始化顺序表</h2><p>根据顺序表的存储结构方式，应该要创建一个struct类型的数组</p>
<p>我们将数组开辟到堆区</p>
<p>将其初始化写入类的构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以Book为例</span></span><br><span class="line"><span class="built_in">SeqList</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//声明elem作为图书信息的地址，并在堆区创建Book类型的数组，</span></span><br><span class="line">    Book* elem = <span class="keyword">new</span> Book[N];<span class="comment">//这里N为表容量上限</span></span><br><span class="line">    <span class="comment">//判断elem是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(!elem)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;表未初始化成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="任意位置插入"><a href="#任意位置插入" class="headerlink" title="任意位置插入"></a>任意位置插入</h2><ul>
<li><p>首先判断插入的位置是否合法</p>
</li>
<li><p>其次判断表长度是否达到上限</p>
</li>
<li><p>最后移动该位置和其后面的元素</p>
</li>
<li><p>最最后才能插入</p>
</li>
</ul>
<p><img src="/2021/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/SeqList/SeqList/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E4%BB%BB%E6%84%8F%E4%BD%8D%E7%BD%AE%E6%8F%92%E5%85%A5.gif" alt="alt 插入"></p>
<p>将其写入类方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(string name, <span class="keyword">float</span> price, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//判断插入位置i是否合法</span></span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;N || i&gt;<span class="keyword">this</span>-&gt;length)</span><br><span class="line">	&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;超出范围&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//判断表长度是否达到上限</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;length == N)</span><br><span class="line">	&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;顺序表已满&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后移该位置和其后面的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="keyword">this</span>-&gt;length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; j--)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">this</span>-&gt;elem[j + <span class="number">1</span>] = <span class="keyword">this</span>-&gt;elem[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;elem[i - <span class="number">1</span>].name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;elem[i - <span class="number">1</span>].price = price;</span><br><span class="line">    length++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="删除任意位置元素"><a href="#删除任意位置元素" class="headerlink" title="删除任意位置元素"></a>删除任意位置元素</h2><p>与插入相似</p>
<ul>
<li>先判断要删除的位置是否合法</li>
<li>然后将该元素的后面的元素逐一从前往后移</li>
</ul>
<p><img src="/2021/10/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/SeqList/SeqList/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E4%BB%BB%E6%84%8F%E4%BD%8D%E7%BD%AE%E5%88%A0%E9%99%A4.gif" alt="alt 删除"></p>
<p>将其写入类方法中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按name删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;elem[i].name == name)</span><br><span class="line">        &#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//往前移</span></span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt; <span class="keyword">this</span>-&gt;length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;elem[i - <span class="number">1</span>] = <span class="keyword">this</span>-&gt;elem[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;length--;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;删除成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;表中无此项！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>按name查找</p>
<ul>
<li>通过下标挨个访问顺序表中的元素判断是否存在</li>
<li>存在即返回索引值</li>
</ul>
<p>将其写入类方法中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (elem[i].name == name) <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;没有此书！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p>遍历顺序表中每个元素并打印</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;书籍信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Name\tPrice&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;elem[i].name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;elem[i].price &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="SeqList全部代码"><a href="#SeqList全部代码" class="headerlink" title="SeqList全部代码"></a>SeqList全部代码</h2><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//图书信息</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Book</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name;</span><br><span class="line">	<span class="keyword">float</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//顺序表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seqlist</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Book* elem;<span class="comment">//图书表地址</span></span><br><span class="line">	<span class="keyword">int</span> length;<span class="comment">//图书个数</span></span><br><span class="line">	<span class="comment">//表初始化</span></span><br><span class="line">	<span class="built_in">Seqlist</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		elem = <span class="keyword">new</span> Book[N];</span><br><span class="line">		<span class="keyword">if</span> (!elem)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;已有表！&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		length = <span class="number">0</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;OK&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//查找</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (elem[i].name == name) <span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;没有此书！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//插入</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(string name, <span class="keyword">float</span> price, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;N || i&gt;<span class="keyword">this</span>-&gt;length)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;超出范围&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;length == N)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;顺序表已满&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//后移</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="keyword">this</span>-&gt;length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; j--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;elem[j + <span class="number">1</span>] = <span class="keyword">this</span>-&gt;elem[j];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>-&gt;elem[i - <span class="number">1</span>].name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;elem[i - <span class="number">1</span>].price = price;</span><br><span class="line">		length++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;elem[i].name == name)</span><br><span class="line">			&#123;</span><br><span class="line">				index = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//往前移</span></span><br><span class="line">		<span class="keyword">if</span> (index != <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt; <span class="keyword">this</span>-&gt;length; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">this</span>-&gt;elem[i - <span class="number">1</span>] = <span class="keyword">this</span>-&gt;elem[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>-&gt;length--;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;删除成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;表中无此项！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//打印</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;书籍信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Name\tPrice&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;length; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="keyword">this</span>-&gt;elem[i].name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;elem[i].price &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
        <tag>SqList</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2021/10/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Stack/%E6%A0%88/</url>
    <content><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p>计数方式：</p>
<ul>
<li>  将元素留在栈中计数</li>
</ul>
<p>模板题： <a href="https://www.acwing.com/problem/content/832/">AcWing 830. 单调栈</a></p>
<p>模型：找出每个数左边离它最近的比它大/小的数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (top &amp;&amp; <span class="built_in">check</span>(st[top - <span class="number">1</span>], i)) top -- ;</span><br><span class="line">    st[ ++ top] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>check()</code> 就是判断栈顶元素与其他元素之间的关系，与题目有关</p>
<h1 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h1><ul>
<li><p>栈（stack）又名堆栈，它是一种运算受限的线性表。</p>
</li>
<li><p>限定仅在表尾进行插入和删除操作的线性表。这一端被称为栈顶，相对地，把另一端称为栈底。</p>
</li>
<li><p>向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素。</p>
</li>
<li><p>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p>
</li>
</ul>
<p><img src="/2021/10/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Stack/%E6%A0%88/%E6%A0%88%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.gif"></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>用c++模板来模糊定义栈里面的元素类型</p>
<p>根据栈的数据存储结构，需要有栈顶指针和栈底指针，还需要压栈、出栈和获取栈顶元素等方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeqStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//栈底指针</span></span><br><span class="line">	T* base;</span><br><span class="line">	<span class="comment">//栈顶指针</span></span><br><span class="line">	T* top;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">SeqStack</span>()</span><br><span class="line">	&#123; &#125;</span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T&amp; t)</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">	<span class="comment">//出栈</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">    <span class="comment">//获取栈顶元素</span></span><br><span class="line">	<span class="function">T <span class="title">get_top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="初始化顺序栈"><a href="#初始化顺序栈" class="headerlink" title="初始化顺序栈"></a>初始化顺序栈</h2><p>顺序栈嘛，顾名思义，跟顺序表差不多，物理内存有顺序，连续</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">SeqStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//申请一段类型为T的数组内存，并把首地址赋值给栈底指针</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;base = <span class="keyword">new</span> T[MAXSIZE];</span><br><span class="line">    <span class="comment">//判断是否申请内存成功</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;base) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//将战地指针赋值给栈顶指针</span></span><br><span class="line">    top = base;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="压栈"><a href="#压栈" class="headerlink" title="压栈"></a>压栈</h2><p><img src="/2021/10/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Stack/%E6%A0%88/%E5%8E%8B%E6%A0%88.gif" alt="压栈"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//压栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T&amp; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断是否栈满</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;top - <span class="keyword">this</span>-&gt;base == MAXSIZE)<span class="comment">//这里MAXSIZE需要宏定义一下，表示栈的最大容量</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈满&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    *top = t;</span><br><span class="line">    <span class="comment">//移动top指针</span></span><br><span class="line">    top++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h2><img src="/2021/10/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Stack/%E6%A0%88/出栈.gif" alt="出栈" style="zoom: 50%;">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断是否栈空</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;base == <span class="keyword">this</span>-&gt;top)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; *(top<span class="number">-1</span>) &lt;&lt; endl;</span><br><span class="line">    top--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="获取栈顶元素"><a href="#获取栈顶元素" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h2><p>注意一下top指针的指向</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">get_top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;base != <span class="keyword">this</span>-&gt;top)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//栈顶指针总是指向栈顶元素的下一个位置</span></span><br><span class="line">        <span class="keyword">return</span> *(top - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="顺序栈全部代码"><a href="#顺序栈全部代码" class="headerlink" title="顺序栈全部代码"></a>顺序栈全部代码</h2><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h3><p>顺序栈程序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeqStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//栈底指针</span></span><br><span class="line">	T* base;</span><br><span class="line">	<span class="comment">//栈顶指针</span></span><br><span class="line">	T* top;</span><br><span class="line">	<span class="comment">//栈可用最大容量</span></span><br><span class="line">	<span class="keyword">int</span> stacksize;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">	<span class="built_in">SeqStack</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;base = <span class="keyword">new</span> T[MAXSIZE];</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;base) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		top = base;</span><br><span class="line">		<span class="keyword">this</span>-&gt;stacksize = MAXSIZE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//压栈</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T&amp; t)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//判断是否栈满</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;top - <span class="keyword">this</span>-&gt;base == MAXSIZE)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;栈满&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//赋值</span></span><br><span class="line">		*top = t;</span><br><span class="line">		<span class="comment">//移动top指针</span></span><br><span class="line">		top++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//出栈</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//判断是否栈空</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;base == <span class="keyword">this</span>-&gt;top)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;栈空&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; *(top<span class="number">-1</span>) &lt;&lt; endl;</span><br><span class="line">		top--;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//获取栈顶元素</span></span><br><span class="line">	<span class="function">T <span class="title">get_top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;base != <span class="keyword">this</span>-&gt;top)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//栈顶指针总是指向栈顶元素的下一个位置</span></span><br><span class="line">			<span class="keyword">return</span> *(top - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>链式有序表合并</title>
    <url>/2021/10/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LinkList/%E9%93%BE%E5%BC%8F%E6%9C%89%E5%BA%8F%E8%A1%A8%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<h1 id="链式有序表合并"><a href="#链式有序表合并" class="headerlink" title="链式有序表合并"></a>链式有序表合并</h1><p><strong>要有序的合并链表，需先将链表改成有序表，或者有序集合</strong>  </p>
<h1 id="有序链表"><a href="#有序链表" class="headerlink" title="有序链表"></a>有序链表</h1><p>以Num结构体为例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Num</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	Num* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>类里定义的一些属性和方法跟普通单链表一样，但是要重写类方法</li>
<li><strong>主要难点</strong>在于有序链表插入，需要判断大小。来判断插入的位置</li>
<li>要用到<strong>双指针</strong></li>
<li>除了<strong>插入</strong>操作不同之外，其他跟普通链表一样</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Num* a0;</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">	<span class="comment">//单链表初始化</span></span><br><span class="line">	<span class="built_in">LinkList</span>()</span><br><span class="line">	&#123; &#125;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">	<span class="comment">//查找</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">	<span class="comment">//打印</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>这里初始化与普通链表差不多</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单链表初始化</span></span><br><span class="line"><span class="built_in">LinkList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//新建头结点</span></span><br><span class="line">    a0 = <span class="keyword">new</span> Num;</span><br><span class="line">    <span class="comment">//头结点的next指针指向NULL</span></span><br><span class="line">    a0-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//长度设置为0</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>需要判断插入的数与表中的数作比较，来判断插入的位置，这里使用双指针，先移动 t2 探路，查看结点中的元素是否大于插入的元素，如果大于，则将 t1 的 next 指针指向插入元素，而插入元素的 next 指针指向 t2 </p>
<ul>
<li>这个是没有重复元素的有序链表，即类似于有序集合</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Num* t1 = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">    Num* t2 = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">    <span class="keyword">while</span> (t1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断t2是否到链表末尾，是的话，加在链表末尾</span></span><br><span class="line">        <span class="keyword">if</span> (t2-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//新建结点</span></span><br><span class="line">            Num* s = <span class="keyword">new</span> Num;</span><br><span class="line">            s-&gt;data = data;</span><br><span class="line">            t1-&gt;next = s;</span><br><span class="line">            s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            ++<span class="keyword">this</span>-&gt;length;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则开递（移动t2指针）</span></span><br><span class="line">        t2 = t2-&gt;next;</span><br><span class="line">        <span class="comment">//如果链表中有相等的元素，则退出</span></span><br><span class="line">        <span class="keyword">if</span> (data == t2-&gt;data) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//否则判断大小，这里判断如果插入的数大于t2位置的元素，则将移动t1指针，并且继续while</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data &lt; t2-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            Num* s = <span class="keyword">new</span> Num;</span><br><span class="line">            s-&gt;data = data;</span><br><span class="line">            t1-&gt;next = s;</span><br><span class="line">            s-&gt;next = t2;</span><br><span class="line">            ++<span class="keyword">this</span>-&gt;length;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            t1 = t1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LinkList/%E9%93%BE%E5%BC%8F%E6%9C%89%E5%BA%8F%E8%A1%A8%E5%90%88%E5%B9%B6/%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5.gif"></p>
<ul>
<li>有重复元素</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Num* t1 = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">    Num* t2 = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">    <span class="keyword">while</span> (t1)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断t2是否到链表末尾，是的话，加在链表末尾</span></span><br><span class="line">        <span class="keyword">if</span> (t2-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//新建结点</span></span><br><span class="line">            Num* s = <span class="keyword">new</span> Num;</span><br><span class="line">            s-&gt;data = data;</span><br><span class="line">            t1-&gt;next = s;</span><br><span class="line">            s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            ++<span class="keyword">this</span>-&gt;length;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则开递（移动t2指针）</span></span><br><span class="line">        t2 = t2-&gt;next;</span><br><span class="line">        <span class="comment">//判断大小，这里判断如果插入的数大于等于t2位置的元素，则将移动t1指针，并且继续while</span></span><br><span class="line">        <span class="keyword">if</span> (data &lt;= t2-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            Num* s = <span class="keyword">new</span> Num;</span><br><span class="line">            s-&gt;data = data;</span><br><span class="line">            t1-&gt;next = s;</span><br><span class="line">            s-&gt;next = t2;</span><br><span class="line">            ++<span class="keyword">this</span>-&gt;length;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            t1 = t1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="有序链表全部代码"><a href="#有序链表全部代码" class="headerlink" title="有序链表全部代码"></a>有序链表全部代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">filename = LinkList_data.h</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Num</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	Num* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Num* a0;</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">	<span class="comment">//单链表初始化</span></span><br><span class="line">	<span class="built_in">LinkList</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		a0 = <span class="keyword">new</span> Num;</span><br><span class="line">		a0-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//插入</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Num* t1 = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">        Num* t2 = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">        <span class="keyword">while</span> (t1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断t2是否到链表末尾，是的话，加在链表末尾</span></span><br><span class="line">            <span class="keyword">if</span> (t2-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//新建结点</span></span><br><span class="line">                Num* s = <span class="keyword">new</span> Num;</span><br><span class="line">                s-&gt;data = data;</span><br><span class="line">                t1-&gt;next = s;</span><br><span class="line">                s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                ++<span class="keyword">this</span>-&gt;length;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//否则开递（移动t2指针）</span></span><br><span class="line">            t2 = t2-&gt;next;</span><br><span class="line">            <span class="comment">//判断大小，这里判断如果插入的数大于等于t2位置的元素，则将移动t1指针，并且继续while</span></span><br><span class="line">            <span class="keyword">if</span> (data &lt;= t2-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                Num* s = <span class="keyword">new</span> Num;</span><br><span class="line">                s-&gt;data = data;</span><br><span class="line">                t1-&gt;next = s;</span><br><span class="line">                s-&gt;next = t2;</span><br><span class="line">                ++<span class="keyword">this</span>-&gt;length;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                t1 = t1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//查找</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">		Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">		<span class="keyword">while</span> (temp-&gt;next &amp;&amp; j &lt; i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			++j;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;书籍信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt;  temp-&gt;data &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (temp-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			++j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!temp-&gt;next || !temp-&gt;next-&gt;next) <span class="keyword">return</span>;</span><br><span class="line">		temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">		--<span class="keyword">this</span>-&gt;length;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//打印</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;书籍信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">while</span> (temp-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = temp-&gt;next;</span><br><span class="line">			cout &lt;&lt;  temp-&gt;data &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="合并有序链表"><a href="#合并有序链表" class="headerlink" title="合并有序链表"></a>合并有序链表</h1><p>用双指针，看图</p>
<p><img src="/2021/10/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LinkList/%E9%93%BE%E5%BC%8F%E6%9C%89%E5%BA%8F%E8%A1%A8%E5%90%88%E5%B9%B6/%E5%90%88%E5%B9%B6.gif" alt="合并"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;LinkList_data.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Merge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Num* p;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(LinkList&amp; l1, LinkList&amp; l2)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//将1表头结点给总表用</span></span><br><span class="line">		p = l1.a0;</span><br><span class="line">		Num* t = p;</span><br><span class="line">		<span class="comment">//两个表的首个元素结点</span></span><br><span class="line">		Num* p1 = l1.a0-&gt;next;</span><br><span class="line">		Num* p2 = l2.a0-&gt;next;</span><br><span class="line">		<span class="comment">//判断p1和p2里的data哪个小就哪个先</span></span><br><span class="line">        <span class="comment">//p1和p2有一个为空都退出循环</span></span><br><span class="line">		<span class="keyword">while</span> (p1 &amp;&amp; p2)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (p1-&gt;data &gt; p2-&gt;data)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//总表next指针指向2表该元素地址</span></span><br><span class="line">				t-&gt;next = p2;</span><br><span class="line">				<span class="comment">//将总表指针移至下一结点，与 t = t-&gt;next 一样</span></span><br><span class="line">				t = p2;</span><br><span class="line">				<span class="comment">//p2被获取后，移向下一节点</span></span><br><span class="line">				p2 = p2-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">//否则如果t1和t2指向的结点两元素相等，则连接一个即可（这个是合并有序链表没有重复元素的表，若有重复元素，则两个都连接上）</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (p1-&gt;data == p2-&gt;data)</span><br><span class="line">			&#123;</span><br><span class="line">				t-&gt;next = p2;</span><br><span class="line">				t = p2;</span><br><span class="line">				p2 = p2-&gt;next;</span><br><span class="line">				p1 = p1-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">//p1元素&lt;p2元素时，总表指针移动至p1该元素，与上面p1&gt;p2差不多</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				t-&gt;next = p1;</span><br><span class="line">				t = p1;</span><br><span class="line">				p1 = p1-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//退出循环后，将长的那个表接上，即将总表的指针连接上非空的表的g元素</span></span><br><span class="line">		<span class="comment">//如果p1非空，则t-&gt;next=p1</span></span><br><span class="line">		t-&gt;next = p1 ? p1 : p2;</span><br><span class="line">		<span class="keyword">delete</span> l2.a0;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



























]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
        <tag>LinkList</tag>
      </tags>
  </entry>
  <entry>
    <title>LinkList</title>
    <url>/2021/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LinkList/LinkList/</url>
    <content><![CDATA[<h1 id="LinkList"><a href="#LinkList" class="headerlink" title="LinkList"></a>LinkList</h1><ul>
<li><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p>
</li>
<li><p>链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。</p>
</li>
<li><p>每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 </p>
</li>
</ul>
<p><img src="/2021/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LinkList/LinkList/%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png"></p>
<h2 id="与顺序表的区别"><a href="#与顺序表的区别" class="headerlink" title="与顺序表的区别"></a>与顺序表的区别</h2><ul>
<li>链表可以充分利用计算机内存空间，实现灵活的内存动态管理，而线性表顺序别构只能利用连续的内存空间</li>
<li>但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大，而顺序结构能随机存取</li>
</ul>
<p><strong>链式结构可以组成多个链表</strong></p>
<p>先从单链表开始说起，还是以C++为例</p>
<h2 id="表中每个单元格的数据"><a href="#表中每个单元格的数据" class="headerlink" title="表中每个单元格的数据"></a>表中每个单元格的数据</h2><p>以Num为例，根据链表的存储结构，在结构体中定义<strong>要储存的信息</strong>，和<strong>该结构体的指针</strong></p>
<p><code>typedef</code>是用来为复杂的声明定义简单的别名</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Num</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//内容</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">    <span class="comment">//下一单元格的地址</span></span><br><span class="line">	Num* next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h2><p>先创建一个名为LinkList的类：</p>
<p>里面包含一些属性，每个单元格的指针，即结构体指针，和链表长度，还有一些链表的方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Num* a0;</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">LinkList</span>()</span><br><span class="line">    &#123; &#125;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123; &#125;</span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123; &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123; &#125;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="头结点"><a href="#头结点" class="headerlink" title="头结点"></a>头结点</h2><ul>
<li><p>在单链表的开始结点之前附设一个类型相同的结点，称之为头结点。</p>
</li>
<li><p>头结点的数据域可以不存储任何信息，头结点的指针域存储指向开始结点的指针（即第一个元素结点的存储位置）。</p>
</li>
</ul>
<p><img src="/2021/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LinkList/LinkList/%E5%A4%B4%E7%BB%93%E7%82%B9.png"></p>
<h3 id="头结点作用"><a href="#头结点作用" class="headerlink" title="头结点作用"></a>头结点作用</h3><ol>
<li>便于受源结点的处理</li>
<li>便于空表和非空表的统一处理</li>
</ol>
<p>【注意】若链表不设头结点，则头指针所指结点为该线性表的首元结点</p>
<h2 id="初始化链表"><a href="#初始化链表" class="headerlink" title="初始化链表"></a>初始化链表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单链表初始化</span></span><br><span class="line"><span class="built_in">LinkList</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//给结构体指针申请内存</span></span><br><span class="line">    a0 = <span class="keyword">new</span> Num;</span><br><span class="line">    <span class="comment">//将Num结构体里的next指针指向NULL</span></span><br><span class="line">    a0-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//设置长度为0</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><ul>
<li>（判断）插入的时候，需先判断插入位置是否合法</li>
<li>（遍历）再移动指针，移动到链表最后一个元素或者指定位置的元素</li>
<li>（赋值）再判断该结点是否为空，指针移动到的位置是否在目标位置后面，若<strong>都为否</strong>，则赋值</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//新建一个局部变量指针帮忙遍历</span></span><br><span class="line">    <span class="comment">//将头结点赋值到局部变量来</span></span><br><span class="line">    Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp &amp;&amp; j&lt;i<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//目标位置前一个结点</span></span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果temp为空或者遍历到的位置在目标位置后面，则程序无法继续执行且返回</span></span><br><span class="line">    <span class="keyword">if</span> (!temp || j &gt; i<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//新建一个单元格，并给她申请内存</span></span><br><span class="line">    Num* s = <span class="keyword">new</span> Num;</span><br><span class="line">    <span class="comment">//修改新结点的指针指向</span></span><br><span class="line">    s-&gt;next = temp-&gt;next;</span><br><span class="line">    <span class="comment">//修改目标位置前一个结点的指针指向</span></span><br><span class="line">    temp-&gt;next = s;</span><br><span class="line">    s-&gt;data = d;</span><br><span class="line">    ++<span class="keyword">this</span>-&gt;length;<span class="comment">//长度加1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LinkList/LinkList/%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5.gif"></p>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul>
<li>（遍历）移动指针至目标位置</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//新建一个局部变量指针帮忙遍历</span></span><br><span class="line">    Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next &amp;&amp; j &lt; i)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; temp-&gt;data &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul>
<li>（判断）先判断i输入是否合法</li>
<li>（遍历）再移动指针，移动到目标位置的前一个结点</li>
<li>（赋值）再判断<strong>该结点的下一结点</strong>和<strong>该结点的下一结点的下一结点</strong>是否为空，若<strong>都非空</strong>，则将<strong>该结点的指针</strong>指向<strong>该结点的下一结点的下一结点</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="keyword">this</span>-&gt;length||i&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;输入有误！&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新建一个局部变量指针帮忙遍历</span></span><br><span class="line">    Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!temp-&gt;next || !temp-&gt;next-&gt;next) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//修改指针指向</span></span><br><span class="line">    temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">    --<span class="keyword">this</span>-&gt;length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需将蓝色结点的指针指向绿色结点的指针即可</p>
<p><img src="/2021/10/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LinkList/LinkList/%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4.gif"></p>
<h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><ul>
<li>遍历</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打工仔</span></span><br><span class="line">    Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">    <span class="comment">//遍历打印</span></span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        cout &lt;&lt; temp-&gt;data &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="LinkList全部代码"><a href="#LinkList全部代码" class="headerlink" title="LinkList全部代码"></a>LinkList全部代码</h2><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Num</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//内容</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">    <span class="comment">//下一单元格的地址</span></span><br><span class="line">	Num* next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Num* a0;</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">    <span class="comment">//单链表初始化</span></span><br><span class="line">    <span class="built_in">LinkList</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//给结构体指针申请内存</span></span><br><span class="line">        a0 = <span class="keyword">new</span> Num;</span><br><span class="line">        <span class="comment">//将Num结构体里的next指针指向NULL</span></span><br><span class="line">        a0-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//设置长度为0</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//新建一个局部变量指针帮忙遍历</span></span><br><span class="line">        <span class="comment">//将头结点赋值到局部变量来</span></span><br><span class="line">        Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp &amp;&amp; j&lt;i<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//目标位置前一个结点</span></span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果temp为空或者遍历到的位置在目标位置后面，则程序无法继续执行且返回</span></span><br><span class="line">        <span class="keyword">if</span> (!temp || j &gt; i<span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//新建一个单元格，并给她申请内存</span></span><br><span class="line">        Num* s = <span class="keyword">new</span> Num;</span><br><span class="line">        <span class="comment">//修改新结点的指针指向</span></span><br><span class="line">        s-&gt;next = temp-&gt;next;</span><br><span class="line">        <span class="comment">//修改目标位置前一个结点的指针指向</span></span><br><span class="line">        temp-&gt;next = s;</span><br><span class="line">        s-&gt;data = d;</span><br><span class="line">        ++<span class="keyword">this</span>-&gt;length;<span class="comment">//长度加1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//新建一个局部变量指针帮忙遍历</span></span><br><span class="line">        Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next &amp;&amp; j &lt; i)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; temp-&gt;data &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="keyword">this</span>-&gt;length||i&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;输入有误！&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新建一个局部变量指针帮忙遍历</span></span><br><span class="line">        Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (!temp-&gt;next || !temp-&gt;next-&gt;next) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//修改指针指向</span></span><br><span class="line">        temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">        --<span class="keyword">this</span>-&gt;length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//打工仔</span></span><br><span class="line">        Num* temp = <span class="keyword">this</span>-&gt;a0;</span><br><span class="line">        <span class="comment">//遍历打印</span></span><br><span class="line">        <span class="keyword">while</span> (temp-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">            cout &lt;&lt; temp-&gt;data &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="用数组模拟实现"><a href="#用数组模拟实现" class="headerlink" title="用数组模拟实现"></a>用数组模拟实现</h1><p>用动态链表这种方式有个明显的缺点，就是不能随机存取。如果要在某个节点之后插入或者删除节点，复杂度是O(n)，因为要从头开始逐个遍历到需要插入或者删除的节点（通过next指针找）。而且还有一个原因就是C++里要new一个node比较慢。</p>
<p>静态的就是在编译的时候就帮你申请好空间了，而运行时间不算编译时间进去</p>
<p>如果先生成n个静态结点，那么运行时间会短些，但还是没数组通过下标访问快</p>
<p><strong>【注意】</strong>一般做算法题不需要考虑内存内存浪费和内存泄漏问题，这些在写工程的时候才会考虑到</p>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表：</p>
<ul>
<li>  结点数据</li>
<li>  next指针</li>
</ul>
<p>模拟就完事了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前可用的哪个节点</span></span><br><span class="line"><span class="comment">// 数组下标k-1表示第k个插入的元素</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>; <span class="comment">// 链表容量</span></span><br><span class="line"><span class="keyword">int</span> head, e[N], next[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头插入一个数a（头插）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = head;</span><br><span class="line">    head = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将头结点删除，需要保证头结点存在（头删）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将第k个插入的元素的下一个元素删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ne[k]=ne[ne[k]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><p>双链表就是在单链表的基础上多加了一个指向前驱的指针</p>
<p>双链表：</p>
<ul>
<li>  结点数据</li>
<li>  prev指针</li>
<li>  next指针</li>
</ul>
<p>模拟就完事了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e[]表示节点的值，re[]表示节点的prev指针，ne[]表示节点的next指针，idx表示当前可用的哪个节点</span></span><br><span class="line"><span class="comment">// 数组下标k-1表示第k个插入的元素</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>; <span class="comment">// 链表容量</span></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head=<span class="number">0</span>;</span><br><span class="line">    ne[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    ne[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">    re[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    re[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    idx=<span class="number">2</span>; <span class="comment">// 因为这里下标0和1，分别已经初始化为链表头结点和尾结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在第k个结点的后驱添加一个结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx]=x;</span><br><span class="line">    ne[idx]=ne[k];</span><br><span class="line">    re[idx]=k;</span><br><span class="line">    re[ne[k]]=idx;</span><br><span class="line">    ne[k]=idx;</span><br><span class="line">    idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第k个插入的结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ne[re[k]]=ne[k];</span><br><span class="line">    re[ne[k]]=re[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
        <tag>LinkList</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希表</title>
    <url>/2021/12/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h1 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h1><p>离散化是哈希的一种特殊形式，我觉得也是映射，<strong>值映射到下标</strong></p>
<p>适用于：整个<strong>数据范围跨度很大</strong>，但只用的数据不多，很稀疏</p>
<p>模板题：<a href="https://www.acwing.com/problem/content/description/804/">AcWing 802. 区间和</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; alls; <span class="comment">// 存储所有待离散化的值，其实他们的下标可以认为是他们的离散化坐标</span></span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()); <span class="comment">// 将所有值排序</span></span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());   <span class="comment">// 去掉重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分求出x对应的离散化的值 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= alls[mid]) <span class="comment">// 返回第一个大于等于x的下标</span></span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// 映射到1, 2, ...n（看你选择，这是下标从1开始的）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实你直接可以认为<code>alls[]</code> 的值所离散化的下标就是他们在 <code>alls[]</code> 中的下标，只是需要查找到这个值，大部分题一般先排序，对解题有用，然后顺便用二分查找到这个值。</p>
<p>离散化有个问题就是<strong>需要去重，这是必然的</strong>，因为重复元素再次映射会影响到结果</p>
<p>当然这个去重函数 <code>unique()</code> 用在 <code>vector</code> 上的，他是将重复元素放到数组后面，并返回第一个重复元素的迭代器</p>
<h1 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h1><p>取模运算，取模的数最好是质数，而且是远离 $2^n$ 的数，这样可以减少冲突</p>
<p>解决冲突问题：</p>
<ul>
<li>  拉链法（√）</li>
<li>开放地址法<ul>
<li>  线性探测法（√）</li>
<li>  平方探测法</li>
<li>  双哈希</li>
</ul>
</li>
</ul>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) 拉链法</span><br><span class="line">    <span class="comment">// h[]为哈希表，e[]表示拉链的结点，ne[k]表示k结点next结点的下标，idx表示当前可用的结点下标</span></span><br><span class="line">    <span class="keyword">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向哈希表中插入一个数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = (x % N + N) % N; <span class="comment">// 防止x是负数，造成取模也是负数的情况，这样做可以把取模数变成正数</span></span><br><span class="line">        e[idx] = x;</span><br><span class="line">        ne[idx] = h[k];</span><br><span class="line">        h[k] = idx ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在哈希表中查询某个数是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = (x % N + N) % N; <span class="comment">// 防止x是负数，造成取模也是负数的情况，这样做可以把取模数变成正数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">            <span class="keyword">if</span> (e[i] == x)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//初始化全部为-1</span></span><br><span class="line">	<span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 开放寻址法</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>; <span class="comment">// 无穷大（十亿多）（1061109567）</span></span><br><span class="line">    <span class="keyword">int</span> h[N]; <span class="comment">// 开的数组长度要开题目数据大小的2~3倍</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = (x % N + N) % N;</span><br><span class="line">        <span class="keyword">while</span> (h[k] != INF &amp;&amp; h[k] != x) <span class="comment">// 如果当前遍历到的结点不是无穷大 且 不是目标点，则继续</span></span><br><span class="line">			k=(k + <span class="number">1</span>) % N; <span class="comment">// 如果k==N，则从头开始</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> k; <span class="comment">// 有可能是INF</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//初始化全部为INF</span></span><br><span class="line">	<span class="built_in">memset</span>(h, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br></pre></td></tr></table></figure>

<p><strong>以上两种方法对<code>h[]</code>数组的初始化均用</strong> <code>memset()</code> 函数，需要包含头文件<code>#include&lt;cstring&gt;</code> 或 <code>#include&lt;string.h&gt;</code></p>
<p><code>meset(数组名, 数组每个元素的每个字节赋值, 数组大小)</code> 此方法是对数组中每个元素赋值，赋值是对<strong>每个元素的每个字节赋值</strong></p>
<p>常用的有</p>
<ul>
<li><p>数组 h 赋值为 0</p>
<p>  <code>memset(h, 0, sizeof(h))</code></p>
</li>
<li><p>数组 h 赋值为 -1</p>
<p>  <code>memset(h, -1, sizeof(h))</code></p>
</li>
<li><p>数组 h 赋值为 int无穷大</p>
<p>  <code>memset(h, 0x3f, sizeof(h))</code></p>
</li>
</ul>
<p>而每个元素实际赋值出来的值是 <code>INF = 0x3f3f3f3f</code></p>
<h1 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h1><p>实质上就是 <strong>P 进制转换</strong>，当然还需要<strong>前缀和思想</strong>。这里的 P 最好是 <strong>131</strong> 或 <strong>13331</strong> 。可以在99%的情况下避免冲突，想知道为什么去学密码学</p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">核心思想：将字符串看成P进制数，P的经验值是<span class="number">131</span>或<span class="number">13331</span>，取这两个值的冲突概率低</span><br><span class="line">小技巧：取模的数用<span class="number">2</span>^<span class="number">64</span>，这样直接用<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>存储，溢出的结果就是取模的结果</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = 比题目数据量大即可;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">131</span>; <span class="comment">// P进制 131 或 13331</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL; <span class="comment">// 哈希数组长度设为unsigned long long类型的话，</span></span><br><span class="line">                                <span class="comment">// 可以省去取模2^64，因为这类型是64位，溢出即取模</span></span><br><span class="line">ULL h[N], p[N]; <span class="comment">// h[k]存储字符串前k个字母的哈希值，这里存的是前k个字符的ASCII，p[k]存储 P^k mod 2^64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，h[0]默认初始化为0</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="comment">// 字符串默认从1开始</span></span><br><span class="line">&#123;</span><br><span class="line">    h[i] = h[i - <span class="number">1</span>] * P + str[i]; <span class="comment">// 前缀和思想</span></span><br><span class="line">    p[i] = p[i - <span class="number">1</span>] * P; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算子串 str[l ~ r] 的哈希值</span></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>]; <span class="comment">// 进制的问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>解释 <code>h[r] - h[l - 1] * p[r - l + 1]</code></strong></p>
<img src="/2021/12/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/字符串哈希.png" alt="字符串哈希" style="zoom: 67%;">

























<h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><p>通过判断条件来<strong>扩展</strong>或<strong>收缩</strong>移动窗口</p>
<h2 id="例子：无重复字符的最长子串"><a href="#例子：无重复字符的最长子串" class="headerlink" title="例子：无重复字符的最长子串"></a>例子：无重复字符的最长子串</h2><p>返回字串长度</p>
<p>思路：</p>
<ul>
<li><p>  利用滑动窗口来扩展和收缩子串长度</p>
</li>
<li><p>  利用哈希集合来判断字符是否存在</p>
</li>
<li><p>判断当滑动窗口中有字符w时，收缩子串，具体收缩多少，取决于字符w的位置</p>
<p>  并且收缩后的子串应当排除掉上一次子串中出现的字符w</p>
</li>
<li><p>  记录最长子串长度</p>
</li>
<li><p>  最后返回最长子串长度</p>
</li>
</ul>
<p><img src="/2021/12/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%93%88%E5%B8%8C%E8%A1%A8/%E5%93%88%E5%B8%8C%E8%A1%A8/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.gif"></p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//哈希集合(无序)</span></span><br><span class="line">        unordered_set&lt;<span class="keyword">char</span>&gt; occ;</span><br><span class="line">        <span class="keyword">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//模仿char数组</span></span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">-1</span>,num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//收缩滑动窗口</span></span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                occ.<span class="built_in">erase</span>(s[i<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断是否达到字符串长度，且滑动窗口中是否存在该字符s[index+1]</span></span><br><span class="line">            <span class="comment">//存在即直接继续循环</span></span><br><span class="line">            <span class="keyword">while</span>(index+<span class="number">1</span>&lt;n&amp;&amp;!occ.<span class="built_in">count</span>(s[index+<span class="number">1</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                occ.<span class="built_in">insert</span>(s[index+<span class="number">1</span>]);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比较出最大的子串长度</span></span><br><span class="line">            num=<span class="built_in">max</span>(num,index+<span class="number">1</span>-i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>链式二叉树</title>
    <url>/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/LinkTree/</url>
    <content><![CDATA[<h1 id="LinkTree的构建"><a href="#LinkTree的构建" class="headerlink" title="LinkTree的构建"></a>LinkTree的构建</h1><blockquote>
<p>本篇是如何构建</p>
<p>原理：<a href="https://duegin.github.io/2021/10/26/Tree/">https://duegin.github.io/2021/10/26/Tree/</a></p>
</blockquote>
<p>根据其每个结点存储结构创建</p>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/LinkTree/%E9%93%BE%E5%BC%8F%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8D%95%E5%85%83%E6%A0%BC%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.gif" alt="链式二叉树单元格存储结构"></p>
<p>这里用结构体表示其每个结点，我这里用模板来声明</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//左孩子指针</span></span><br><span class="line">	Data* lchild;</span><br><span class="line">    <span class="comment">//右孩子指针</span></span><br><span class="line">	Data* rchild;</span><br><span class="line">    <span class="comment">//存放数据域，这里用模板来声明</span></span><br><span class="line">	T dd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>再根据链式二叉树的存储结构</p>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/LinkTree/%E9%93%BE%E5%BC%8F%E4%BA%8C%E5%8F%89%E6%A0%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.gif" alt="链式二叉树存储结构"></p>
<p>用一个类来构建起这个链式二叉树，这里同样用模板来创建</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//按层创建树</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//按先序遍历创建树（递归）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">XianXu_creat</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//按层遍历树打印</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">layer_print</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归先序遍历树打印</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">XianXu_print</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//非递归先序遍历树打印</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">NotRecXianXu_print</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算树深度</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//统计二叉树结点的个数</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">NodeCount</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//叶子个数</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">leavesCount</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//树宽度</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">treeWidth</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="按层创建树"><a href="#按层创建树" class="headerlink" title="按层创建树"></a>按层创建树</h2><p>我的设计想法是：传入数据的数组，然后依次赋值</p>
<p>这里需要用到队列的数据结构，使左孩子和右孩子排队依次给他们的左孩子和右孩子赋值（套娃）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按层创建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(T* num, Data&lt;T&gt;* &amp;data,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建队列</span></span><br><span class="line">    queue&lt;Data&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//num数组非空时，申请根结点内存，赋值并且将根结点地址入队</span></span><br><span class="line">    <span class="keyword">if</span> (num)</span><br><span class="line">    &#123;</span><br><span class="line">        data = <span class="keyword">new</span> Data&lt;T&gt;;</span><br><span class="line">        data-&gt;dd = num[i++];</span><br><span class="line">        q.<span class="built_in">push</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则根结点指向NULL</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        data = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环添加</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将根结点的地址出队并且赋值给n（将队列第一个元素作为根结点）</span></span><br><span class="line">        Data&lt;T&gt;* n = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//左儿子</span></span><br><span class="line">        <span class="comment">//判断数组下标是否到达数组总长，</span></span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>&lt;=length)</span><br><span class="line">        &#123;<span class="comment">//与创建根结点差不多，给左儿子申请内存，赋值，并且将其入队，</span></span><br><span class="line">            <span class="comment">//然后再下一次while循环时，q.front()即为左儿子的地址，即n也是左儿子的地址，这时候把左儿子看作根结点</span></span><br><span class="line">            <span class="comment">//即像根结点一样给左、右儿子赋值</span></span><br><span class="line">            n-&gt;lchild = <span class="keyword">new</span> Data&lt;T&gt;;</span><br><span class="line">            n-&gt;lchild-&gt;dd = num[i++];</span><br><span class="line">            q.<span class="built_in">push</span>(n-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            n-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右儿子</span></span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>&lt;=length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在左儿子入队后，右儿子也跟着入队，在n=左儿子地址的下一个while循环，即n=右儿子地址</span></span><br><span class="line">            n-&gt;rchild = <span class="keyword">new</span> Data&lt;T&gt;;</span><br><span class="line">            n-&gt;rchild-&gt;dd = num[i++];</span><br><span class="line">            q.<span class="built_in">push</span>(n-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            n-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="递归先序遍历创建树"><a href="#递归先序遍历创建树" class="headerlink" title="递归先序遍历创建树"></a>递归先序遍历创建树</h2><p>递归遍历很容易理解</p>
<p>先序遍历的话，顺序是：左，根，右</p>
<p>按照这个顺序设计程序即可，</p>
<blockquote>
<p>这里有个问题没解决：在<strong>判断结束</strong>那，我不知道怎么统一判断string类型和其他数字类型的结束</p>
<p>所以如果 T 的类型为数字类型（int，float，double）那使用下面的判断语句即可</p>
<p>如果 T 的类型是string类型，将判断条件改为<code>data == &quot;000&quot;</code></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归先序遍历创建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XianXu_creat</span><span class="params">(Data&lt;T&gt;* &amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T data;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;input：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; data;</span><br><span class="line">    <span class="comment">//判断结束</span></span><br><span class="line">    <span class="keyword">if</span> (data == <span class="number">000</span>)</span><br><span class="line">        d = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//用先序遍历法赋值</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//新建结点</span></span><br><span class="line">        d = <span class="keyword">new</span> Data&lt;T&gt;;</span><br><span class="line">        d-&gt;dd = data;</span><br><span class="line">        <span class="comment">//遍历并创建左结点</span></span><br><span class="line">        <span class="built_in">XianXu_creat</span>(d-&gt;lchild);</span><br><span class="line">        <span class="comment">//遍历并创建右结点</span></span><br><span class="line">        <span class="built_in">XianXu_creat</span>(d-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="按层打印树"><a href="#按层打印树" class="headerlink" title="按层打印树"></a>按层打印树</h2><p>思想跟按层创建树差不多，同样要用到队列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按层打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">layer_print</span><span class="params">(Data&lt;T&gt;*&amp; data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建队列</span></span><br><span class="line">    queue&lt;Data&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(!data)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;树为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q.<span class="built_in">push</span>(data);</span><br><span class="line">    <span class="comment">//循环打印</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将根结点的地址出队并且赋值给n（将队列第一个元素作为根结点）</span></span><br><span class="line">        Data&lt;T&gt;* n = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//打印根结点</span></span><br><span class="line">        cout &lt;&lt; n-&gt;dd &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左儿子</span></span><br><span class="line">        <span class="keyword">if</span> (n-&gt;lchild)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(n-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//右儿子</span></span><br><span class="line">        <span class="keyword">if</span> (n-&gt;rchild)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(n-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="递归先序遍历树打印"><a href="#递归先序遍历树打印" class="headerlink" title="递归先序遍历树打印"></a>递归先序遍历树打印</h2><p>   按照先序遍历顺序：根 左 右 设计</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XianXu_print</span><span class="params">(Data&lt;T&gt;* d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; d-&gt;dd &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">NnredursionPreorder</span>(d-&gt;lchild);</span><br><span class="line">        <span class="built_in">NnredursionPreorder</span>(d-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="非递归先序遍历树打印"><a href="#非递归先序遍历树打印" class="headerlink" title="非递归先序遍历树打印"></a>非递归先序遍历树打印</h2><p><em><strong>补！</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NotRecXianXu_print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="计算树深度"><a href="#计算树深度" class="headerlink" title="计算树深度"></a>计算树深度</h2><p>同样用递归从后往前计数，分别用两个局部变量来记录左、右孩子的结点个数。然后作比较谁的深度更深即返回。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算树深度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(Data&lt;T&gt;* data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断树是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//遍历左儿、右儿，当遍历到其中一儿子没有结点时，另一结点比这结点大，即返回</span></span><br><span class="line">        <span class="keyword">int</span> m = <span class="built_in">Depth</span>(data-&gt;lchild);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">Depth</span>(data-&gt;rchild);</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="统计二叉树结点的个数"><a href="#统计二叉树结点的个数" class="headerlink" title="统计二叉树结点的个数"></a>统计二叉树结点的个数</h2><p>递归遍历所有结点，然后计数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计二叉树结点的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NodeCount</span><span class="params">(Data&lt;T&gt;* data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断树是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">NodeCount</span>(data-&gt;lchild) + <span class="built_in">NodeCount</span>(data-&gt;rchild) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="叶子个数"><a href="#叶子个数" class="headerlink" title="叶子个数"></a>叶子个数</h2><p>叶子是度为0的结点，即其后面没有两孩子，按照其来作为判断条件</p>
<p>同样递归遍历所有结点，加个条件判断是否为叶子即可</p>
<p>用两个变量来记录左右孩子下的叶子个数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//叶子个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leavesCount</span><span class="params">(Data&lt;T&gt;* data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断树是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断左儿和右儿为空的时候，确立这个根结点是叶子</span></span><br><span class="line">        <span class="keyword">if</span> (data-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; data-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;<span class="comment">//不都为空则继续遍历左儿、右儿</span></span><br><span class="line">            <span class="keyword">int</span> num1 = <span class="built_in">leavesCount</span>(data-&gt;lchild);</span><br><span class="line">            <span class="keyword">int</span> num2 = <span class="built_in">leavesCount</span>(data-&gt;rchild);</span><br><span class="line">            <span class="keyword">return</span> num1 + num2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="树宽度"><a href="#树宽度" class="headerlink" title="树宽度"></a>树宽度</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//树宽度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">treeWidth</span><span class="params">(Data&lt;T&gt;* data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断树是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//双端队列</span></span><br><span class="line">    deque&lt;Data&lt;T&gt;*&gt; dequeTreeNode;</span><br><span class="line">    <span class="keyword">int</span> maxWidth = <span class="number">1</span>;</span><br><span class="line">    dequeTreeNode.<span class="built_in">push_back</span>(data);<span class="comment">//头结点入队</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mlength = dequeTreeNode.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (mlength == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">while</span> (mlength &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Data&lt;T&gt;* temp = dequeTreeNode.<span class="built_in">front</span>();</span><br><span class="line">            dequeTreeNode.<span class="built_in">pop_front</span>();</span><br><span class="line">            mlength--;</span><br><span class="line">            <span class="keyword">if</span> (temp-&gt;lchild)</span><br><span class="line">            &#123;</span><br><span class="line">                dequeTreeNode.<span class="built_in">push_back</span>(temp-&gt;lchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp-&gt;rchild)</span><br><span class="line">            &#123;</span><br><span class="line">                dequeTreeNode.<span class="built_in">push_back</span>(temp-&gt;rchild);</span><br><span class="line">            &#125;</span><br><span class="line">            maxWidth = maxWidth &gt; dequeTreeNode.<span class="built_in">size</span>() ? maxWidth : dequeTreeNode.<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	Data* lchild;</span><br><span class="line">	Data* rchild;</span><br><span class="line">	T dd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//递归先序遍历创建树</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">XianXu_creat</span><span class="params">(Data&lt;T&gt;* &amp;d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        T data;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;input：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; data;</span><br><span class="line">        <span class="comment">//判断结束</span></span><br><span class="line">        <span class="keyword">if</span> (data == <span class="number">000</span>)</span><br><span class="line">            d = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//用先序遍历法赋值</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//新建结点</span></span><br><span class="line">            d = <span class="keyword">new</span> Data&lt;T&gt;;</span><br><span class="line">            d-&gt;dd = data;</span><br><span class="line">            <span class="comment">//遍历并创建左结点</span></span><br><span class="line">            <span class="built_in">XianXu_creat</span>(d-&gt;lchild);</span><br><span class="line">            <span class="comment">//遍历并创建右结点</span></span><br><span class="line">            <span class="built_in">XianXu_creat</span>(d-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//按层创建树</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(T* num, Data&lt;T&gt;* &amp;data,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//创建队列</span></span><br><span class="line">        queue&lt;Data&lt;T&gt;*&gt; q;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//num数组非空时，申请根结点内存，赋值并且将根结点地址入队</span></span><br><span class="line">        <span class="keyword">if</span> (num)</span><br><span class="line">        &#123;</span><br><span class="line">            data = <span class="keyword">new</span> Data&lt;T&gt;;</span><br><span class="line">            data-&gt;dd = num[i++];</span><br><span class="line">            q.<span class="built_in">push</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则根结点指向NULL</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            data = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环添加</span></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将根结点的地址出队并且赋值给n（将队列第一个元素作为根结点）</span></span><br><span class="line">            Data&lt;T&gt;* n = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="comment">//左儿子</span></span><br><span class="line">            <span class="comment">//判断数组下标是否到达数组总长，</span></span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span>&lt;=length)</span><br><span class="line">            &#123;<span class="comment">//与创建根结点差不多，给左儿子申请内存，赋值，并且将其入队，</span></span><br><span class="line">                <span class="comment">//然后再下一次while循环时，q.front()即为左儿子的地址，即n也是左儿子的地址，这时候把左儿子看作根结点</span></span><br><span class="line">                <span class="comment">//即像根结点一样给左、右儿子赋值</span></span><br><span class="line">                n-&gt;lchild = <span class="keyword">new</span> Data&lt;T&gt;;</span><br><span class="line">                n-&gt;lchild-&gt;dd = num[i++];</span><br><span class="line">                q.<span class="built_in">push</span>(n-&gt;lchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                n-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右儿子</span></span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span>&lt;=length)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//在左儿子入队后，右儿子也跟着入队，在n=左儿子地址的下一个while循环，即n=右儿子地址</span></span><br><span class="line">                n-&gt;rchild = <span class="keyword">new</span> Data&lt;T&gt;;</span><br><span class="line">                n-&gt;rchild-&gt;dd = num[i++];</span><br><span class="line">                q.<span class="built_in">push</span>(n-&gt;rchild);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                n-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//按层打印</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">layer_print</span><span class="params">(Data&lt;T&gt;*&amp; data)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//创建队列</span></span><br><span class="line">		queue&lt;Data&lt;T&gt;*&gt; q;</span><br><span class="line">		<span class="keyword">if</span>(!data)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;树为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		q.<span class="built_in">push</span>(data);</span><br><span class="line">		<span class="comment">//循环添加</span></span><br><span class="line">		<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//将根结点的地址出队并且赋值给n</span></span><br><span class="line">			Data&lt;T&gt;* n = q.<span class="built_in">front</span>();</span><br><span class="line">			q.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="comment">//打印根结点</span></span><br><span class="line">			cout &lt;&lt; n-&gt;dd &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//左儿子</span></span><br><span class="line">			<span class="comment">//判断数组下标是否到达数组总长</span></span><br><span class="line">			<span class="keyword">if</span> (n-&gt;lchild)</span><br><span class="line">			&#123;<span class="comment">//与创建根结点差不多，给左儿子申请内存，赋值，并且将其入队，</span></span><br><span class="line">			<span class="comment">//然后再下一次while循环时，q.front()即为左儿子的地址，即n也是左儿子的地址，这时候把左儿子看作根结点</span></span><br><span class="line">			<span class="comment">//即像根结点一样给左、右儿子赋值</span></span><br><span class="line">				q.<span class="built_in">push</span>(n-&gt;lchild);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//右儿子</span></span><br><span class="line">			<span class="keyword">if</span> (n-&gt;rchild)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//在左儿子入队后，右儿子也跟着入队，在n=左儿子地址的下一个while循环，即n=右儿子地址</span></span><br><span class="line">				q.<span class="built_in">push</span>(n-&gt;rchild);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归先序遍历打印</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">XianXu_print</span><span class="params">(Data&lt;T&gt;* d)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (d)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; d-&gt;dd &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			<span class="built_in">NnredursionPreorder</span>(d-&gt;lchild);</span><br><span class="line">			<span class="built_in">NnredursionPreorder</span>(d-&gt;rchild);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//非递归算法</span></span><br><span class="line">	<span class="comment">//void NnredursionPreorder(Data&lt;T&gt;* d)</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//计算树深度</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(Data&lt;T&gt;* data)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//判断树是否为空</span></span><br><span class="line">		<span class="keyword">if</span> (data == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//遍历左儿、右儿，当遍历到其中一儿子没有结点时，另一结点比这结点大，即返回</span></span><br><span class="line">			<span class="keyword">int</span> m = <span class="built_in">Depth</span>(data-&gt;lchild);</span><br><span class="line">			<span class="keyword">int</span> n = <span class="built_in">Depth</span>(data-&gt;rchild);</span><br><span class="line">			<span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> m + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//统计二叉树结点的个数</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">NodeCount</span><span class="params">(Data&lt;T&gt;* data)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//判断树是否为空</span></span><br><span class="line">		<span class="keyword">if</span> (data == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">NodeCount</span>(data-&gt;lchild) + <span class="built_in">NodeCount</span>(data-&gt;rchild) + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//叶子个数</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">leavesCount</span><span class="params">(Data&lt;T&gt;* data)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//判断树是否为空</span></span><br><span class="line">		<span class="keyword">if</span> (data == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//判断左儿和右儿为空的时候，确立这个根结点是叶子</span></span><br><span class="line">			<span class="keyword">if</span> (data-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; data-&gt;rchild == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;<span class="comment">//不都为空则继续遍历左儿、右儿</span></span><br><span class="line">				<span class="keyword">int</span> num1 = <span class="built_in">leavesCount</span>(data-&gt;lchild);</span><br><span class="line">				<span class="keyword">int</span> num2 = <span class="built_in">leavesCount</span>(data-&gt;rchild);</span><br><span class="line">				<span class="keyword">return</span> num1 + num2;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//树宽度</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">treeWidth</span><span class="params">(Data&lt;T&gt;* data)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="comment">//判断树是否为空</span></span><br><span class="line">		<span class="keyword">if</span> (data == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//双端队列</span></span><br><span class="line">		deque&lt;Data&lt;T&gt;*&gt; dequeTreeNode;</span><br><span class="line">		<span class="keyword">int</span> maxWidth = <span class="number">1</span>;</span><br><span class="line">		dequeTreeNode.<span class="built_in">push_back</span>(data);<span class="comment">//头结点入队</span></span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> mlength = dequeTreeNode.<span class="built_in">size</span>();</span><br><span class="line">			<span class="keyword">if</span> (mlength == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">while</span> (mlength &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				Data&lt;T&gt;* temp = dequeTreeNode.<span class="built_in">front</span>();</span><br><span class="line">				dequeTreeNode.<span class="built_in">pop_front</span>();</span><br><span class="line">				mlength--;</span><br><span class="line">				<span class="keyword">if</span> (temp-&gt;lchild)</span><br><span class="line">				&#123;</span><br><span class="line">					dequeTreeNode.<span class="built_in">push_back</span>(temp-&gt;lchild);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (temp-&gt;rchild)</span><br><span class="line">				&#123;</span><br><span class="line">					dequeTreeNode.<span class="built_in">push_back</span>(temp-&gt;rchild);</span><br><span class="line">				&#125;</span><br><span class="line">				maxWidth = maxWidth &gt; dequeTreeNode.<span class="built_in">size</span>() ? maxWidth : dequeTreeNode.<span class="built_in">size</span>();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> maxWidth;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树原理</title>
    <url>/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/Tree/</url>
    <content><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><ul>
<li><p>二叉树是n个有限元素的集合，该集合或者为空、或者由一个称为根（root）的元素及两个不相交的、被分别称为左子树和右子树的二叉树组成，是有序树。</p>
</li>
<li><p>当集合为空时，称该二叉树为空二叉树。</p>
</li>
<li><p>在二叉树中，一个元素也称作一个结点</p>
</li>
</ul>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/Tree/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%BE%8B%E5%AD%90.png" alt="二叉树例子"></p>
<h2 id="二叉树分类"><a href="#二叉树分类" class="headerlink" title="二叉树分类"></a>二叉树分类</h2><ul>
<li><p>（一）满二叉树</p>
<ul>
<li><strong>国内定义</strong>：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。<ul>
<li>外观上是一个三角形结构</li>
<li>层数为 K 时，结点总数为$2^K-1$</li>
<li>层数为 K 的<strong>最后一层</strong>结点总数为$2^{K-1}$</li>
<li>第 i 层上的结点数为：$2^i-1$</li>
</ul>
</li>
</ul>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/Tree/%E5%9B%BD%E5%86%85%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="国内满二叉树例子"></p>
<ul>
<li><p><strong>国际定义</strong>：如果一棵二叉树的结点要么是叶子结点，要么它有两个子结点，这样的树就是满二叉树。（但反过来不成立，因为完全二叉树也满足这个要求，但不是满二叉树）</p>
<ul>
<li><p><strong>国际定义这个二叉树也是满二叉树。但是按照国内的定义，它却不是满二叉树。</strong></p>
</li>
<li><p>满二叉树的任意节点，要么度为0，要么度为2。换个说法即要么为叶子结点，要么同时具有左右孩子。</p>
</li>
</ul>
</li>
<li><p>国内满二叉树的特点：每一层上的结点数都是最大结点数，即每一层 i 的结点数都具有最大值$2^{i-1}$</p>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/Tree/%E5%9B%BD%E9%99%85%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="国际满二叉树"></p>
</li>
</ul>
</li>
<li><p>（二）完全二叉树</p>
<p>深度为k，有n个结点的二叉树当且仅当其每一个结点都与深度为k的满二叉树中编号从1到n的结点一 一对应时，称之为完全二叉树。</p>
<ul>
<li>一棵深度为k且有$2^K-1$个结点的二叉树称为满二叉树。</li>
<li>如果一棵二叉树是满二叉树, 则它必定是完全二叉树。</li>
<li>完全二叉树特点：<ul>
<li>（一）叶子结点只可能在层次最大的两层上出现；</li>
<li>（二）对任一结点，若其右分支下的子孙的最大层次为 l，则其左分支下的子孙的最大层次必为 l 或 l+1。即层次：左分支 &gt;= 右分支</li>
</ul>
</li>
</ul>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/Tree/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.jpg" alt="完全二叉树"></p>
</li>
<li><p>（三）平衡树（<a href="https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E6%A0%91?fromtitle=%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91&fromid=10421057">Balance Tree</a>）</p>
<p>任意节点的子树的高度差都小于等于1。</p>
<p>常见的符合平衡树的有，<a href="https://baike.baidu.com/item/B%E6%A0%91/5411672">B树</a>（多路平衡搜索树）、<a href="https://baike.baidu.com/item/AVL%E6%A0%91/10986648?fr=aladdin">AVL树</a>（二叉平衡搜索树）等。</p>
</li>
</ul>
<h2 id="二叉树相关术语"><a href="#二叉树相关术语" class="headerlink" title="二叉树相关术语"></a>二叉树相关术语</h2><ul>
<li>（一）结点：包含一个数据元素及若干指向子树分支的信息。</li>
<li>（二）结点的度：一个结点拥有子树的数目称为结点的度。</li>
<li>（三）叶子结点：也称为终端结点，没有子树的结点或者度为零的结点。</li>
<li>（四）分支结点：也称为非终端结点，度不为零的结点称为非终端结点。</li>
<li>（五）树的度：树中所有结点的度的最大值。</li>
<li>（六）结点的层次：从根结点开始，假设根结点为第1层，根结点的子节点为第2层，依此类推，如果某一个结点位于第L层，则其子节点位于第L+1层 。</li>
<li>（七）树的深度：也称为树的高度，树中所有结点的层次最大值称为树的深度。</li>
<li>（八）有序树：如果树中各棵子树的次序是有先后次序，则称该树为有序树。</li>
<li>（九）无序树：如果树中各棵子树的次序没有先后次序，则称该树为无序树 。</li>
<li>（十）森林：由m（m≥0）棵互不相交的树构成一片森林。如果把一棵非空的树的根结点删除，则该树就变成了一片森林，森林中的树由原来根结点的各棵子树构成。</li>
</ul>
<h2 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h2><ul>
<li><p><strong>性质1：</strong>二叉树的第i层上至多有2i-1（i≥1）个节点 。</p>
</li>
<li><p><strong>性质2：</strong>深度为h的二叉树中至多含有2h-1个节点。</p>
</li>
<li><p><strong>性质3：</strong>若在任意一棵二叉树中，有n0个叶子节点，有n2个度为2的节点，则必有n0=n2+1。</p>
</li>
<li><p><strong>性质4：</strong>具有n个节点的完全二叉树深为log2x+1（其中x表示不大于n的最大整数）。</p>
</li>
<li><p><strong>性质5：</strong>若对一棵有n个节点的完全二叉树进行顺序编号（1≤i≤n），那么，对于编号为i（i≥1）的节点：</p>
<ul>
<li><p>当i=1时，该节点为根，它无双亲节点 [6] 。</p>
</li>
<li><p>当i&gt;1时，该节点的双亲节点的编号为i/2 [6] 。</p>
</li>
<li><p>若2i≤n，则有编号为2i的左节点，否则没有左节点 [6] 。</p>
</li>
<li><p>若2i+1≤n，则有编号为2i+1的右节点，否则没有右节点 [6] 。</p>
</li>
</ul>
</li>
</ul>
<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p><em>摘至<a href="https://blog.csdn.net/hellowd123/article/details/99692395">blog</a></em></p>
<ul>
<li>普通的二叉树，很难构成现实的应用场景，但因其简单，常用于学习研究，<strong>平衡二叉树</strong>则是实际应用比较多的。常见于快速匹配、搜索等方面。</li>
<li>常用的树有：AVL树、红黑树、B+树、Trie（字典）树。<ul>
<li>（一）AVL树: 最早的平衡二叉树之一。应用相对其他数据结构比较少。windows对进程地址空间的管理用到了AVL树。</li>
<li>（二）红黑树: 平衡二叉树，广泛用在C++的STL中。如map和set都是用红黑树实现的。还有Linux文件管理。</li>
<li>（三）B/B+树: 用在磁盘文件组织 数据索引和数据库索引。</li>
<li>（四）Trie树(字典树): 用在统计和排序大量字符串，如自动机、M数据库索引。</li>
</ul>
</li>
</ul>
<h1 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h1><p><strong>在构建二叉树之前，我们需要先知道如何遍历一棵二叉树，因为懂得遍历，即懂得赋值</strong></p>
<p>有三种普遍方法可以遍历：</p>
<ul>
<li>先序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
</ul>
<p>遍历的顺序即是访问根结点的顺序，访问左、右孩子的顺序都是，先左，后右。</p>
<p>即如：中序遍历：先访问左孩子，然后访问根结点，最后访问右孩子</p>
<p>由其<strong>先序序列和中序序列</strong>，或者其<strong>中序序列和后序序列</strong>均能唯一地确定一颗二叉树</p>
<p>还有一种是：<strong>层次遍历</strong></p>
<p><em>以下的图摘至<a href="https://blog.csdn.net/chinesekobe/article/details/110874773">blog</a></em></p>
<ul>
<li>（一）先序遍历</li>
</ul>
<blockquote>
<p>先序遍历可以想象为，一个小人从一棵二叉树根节点为起点，沿着二叉树外沿，逆时针走一圈回到根节点，路上遇到的元素顺序，就是先序遍历的结果</p>
</blockquote>
<p>先序遍历结果为：A B D H I E J C F K G</p>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/Tree/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86.gif" alt="先序遍历"></p>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/Tree/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E5%B0%8F%E4%BA%BA%E8%B7%91.gif" alt="先序遍历小人跑"></p>
<p><strong>小人沿着外围跑一圈（直到跑回根节点）</strong></p>
<ul>
<li>中序遍历</li>
</ul>
<blockquote>
<p>中序遍历可以看成，二叉树每个节点，垂直方向投影下来（可以理解为每个节点从最左边开始垂直掉到地上），然后从左往右数，得出的结果便是中序遍历的结果</p>
</blockquote>
<p>中遍历结果为：H D I B E J A F K C G</p>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/Tree/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.gif" alt="中序遍历"></p>
<p><strong>中序遍历就是从最左边开始，把每个节点垂直投影到同一直线上，然后从左往右读值就可以了</strong></p>
<ul>
<li>后序遍历</li>
</ul>
<blockquote>
<p>后序遍历就像是剪葡萄，我们要把一串葡萄一颗一颗地剪下来。规定从左向右剪，从下往上剪才能剪一颗一颗剪下来。</p>
</blockquote>
<p><strong>后序遍历中，根节点默认最后面</strong></p>
<p>后序遍历结果：H I D J E B K F G C A</p>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/Tree/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.gif" alt="后序遍历"></p>
<ul>
<li>层次遍历</li>
</ul>
<blockquote>
<p>层次遍历很好理解，就是从根节点开始，一层一层，从上到下，每层从左到右，依次写值就可以了</p>
</blockquote>
<p>层次遍历结果：A B C D E F G H I J K</p>
<p><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/Tree/%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86.png" alt="层次遍历"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/2021/12/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><p>其实就是多个集合，但这些集合是用树存储的</p>
<h2 id="（一）朴素并查集："><a href="#（一）朴素并查集：" class="headerlink" title="（一）朴素并查集："></a>（一）朴素并查集：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> p[N]; <span class="comment">//存储每个点的祖宗节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回x的祖宗节点，并起到路径压缩的作用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n（它本身）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：（将其中一个祖宗接到；另一个祖宗下面）</span></span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b); <span class="comment">// a的祖宗结点find(a)的祖宗结点p[find(a)] 接到b的祖宗结点find(b)下</span></span><br></pre></td></tr></table></figure>



<h2 id="（二）维护cnt的并查集："><a href="#（二）维护cnt的并查集：" class="headerlink" title="（二）维护cnt的并查集："></a>（二）维护cnt的并查集：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> p[N], cnt[N];</span><br><span class="line"><span class="comment">//p[]存储每个点的祖宗节点, cnt[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回x的祖宗节点，且路径压缩</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n，每个结点都是数量1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    cnt[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">cnt[<span class="built_in">find</span>(b)] += cnt[<span class="built_in">find</span>(a)]; <span class="comment">// b所在集合点的个数 + a所在集合点的个数</span></span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b); </span><br></pre></td></tr></table></figure>



<h2 id="（三）维护到祖宗节点距离的并查集："><a href="#（三）维护到祖宗节点距离的并查集：" class="headerlink" title="（三）维护到祖宗节点距离的并查集："></a>（三）维护到祖宗节点距离的并查集：</h2><p><strong>有权并查集</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> p[N], d[N];</span><br><span class="line"><span class="comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="built_in">find</span>(p[x]); <span class="comment">// u存放x的祖宗结点</span></span><br><span class="line">        d[x] += d[p[x]]; <span class="comment">// x到根结点的距离，距离量视题目情况而定</span></span><br><span class="line">        p[x] = u; <span class="comment">// x的祖宗结点赋值为u</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    p[i] = i;</span><br><span class="line">    d[i] = <span class="number">0</span>; <span class="comment">//初始化距离都为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">d[<span class="built_in">find</span>(a)] = distance; <span class="comment">// 根据具体问题，初始化find(a)的偏移量</span></span><br></pre></td></tr></table></figure>

<p>例题：**<a href="https://www.acwing.com/problem/content/242/">ACWing 240. 食物链</a>**</p>
<img src="/2021/12/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%B9%B6%E6%9F%A5%E9%9B%86/有权并查集同类.png" alt="有权并查集同类" style="zoom:61%;">

<img src="/2021/12/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%B9%B6%E6%9F%A5%E9%9B%86/有权并查集x吃y.png" alt="有权并查集x吃y" style="zoom:61%;">

<p><code>px</code> 是 <code>x</code> 的祖宗结点，<code>py</code> 是 <code>y</code> 的祖宗节点</p>
<p><code>d[]</code> 是点到其父节点的距离，其实通过<code>find()</code> 后，他的距离就是到根节点的距离，因为 <code>find()</code> 会路径压缩</p>
<p> <code>px == py</code> 可以确定俩点在同一个集合，即在这食物链这题中为同类</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>堆</title>
    <url>/2021/12/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/%E5%A0%86/</url>
    <content><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>手写堆与系统里的堆实现逻辑不一样，手写堆是<strong>完全二叉树</strong></p>
<p>主要是实现大小根堆</p>
<p>即：</p>
<ul>
<li><p>  根结点是最小值</p>
</li>
<li><p>  根节点是最大值</p>
</li>
</ul>
<p><strong>C++ STL：</strong>优先队列，头文件<code>#include&lt;priority_queue&gt;</code> ，默认是大根堆</p>
<p>具体看C++的 STL 篇，或者网上查</p>
<h2 id="模拟堆"><a href="#模拟堆" class="headerlink" title="模拟堆"></a>模拟堆</h2><p>实现这五个功能：</p>
<ol>
<li> 插入一个数 x；</li>
<li> 输出当前集合中的最小值；</li>
<li> 删除当前集合中的最小值（数据保证此时的最小值唯一）；</li>
<li> 删除第 k 个插入的数；</li>
<li> 修改第 k 个插入的数，将其变为 x</li>
</ol>
<p>主要是第4和第5个功能需要用到<code>ph[]</code>和<code>hp[]</code></p>
<p><strong>模板：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span></span><br><span class="line"><span class="comment">// ph[k]存储第k个插入的点在堆中的位置</span></span><br><span class="line"><span class="comment">// hp[k]存储堆中下标是k的点是第几个插入的</span></span><br><span class="line"><span class="comment">// cnt是当前堆中的元素个数，堆数组默认从1开始</span></span><br><span class="line"><span class="comment">// 主要是down()和up()的实现</span></span><br><span class="line"><span class="keyword">int</span> h[N], ph[N], hp[N], cnt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换两个点，及其映射关系</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= cnt &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= cnt &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, u / <span class="number">2</span>);</span><br><span class="line">        u /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n)建堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i; i -- ) <span class="built_in">down</span>(i);</span><br></pre></td></tr></table></figure>

<p>这里建堆<code>i = n / 2</code>的原因：</p>
<p>把他看成一棵满二叉树，则第 $i$ 层的结点数是 $2^{i-1}$ ，而树深度为 $k$ 时，总结点数是 $2^k$ ，你会发现 $2^0+2^1+…+2^{k-1} == 2^k-1$</p>
<p>也就是，除了树最底层，其上面的所有节点都会<code>down()</code> 一次，而底层的肯定会受到影响</p>
<p>删除某个元素时，因为删除中间的元素非常的困难，要移动数组元素，还得改变 <code>hp[]</code> 和 <code>ph[]</code> 的值，但删除最后一个点的值很容易，只要 <code>cnt--</code> 即可，所以将想要删除的元素与最后的值交换，然后执行 <code>down()</code>和 <code>up()</code> 即可，而这俩函数只会深度执行其一。同理，删除根结点的话，与最后的结点交换，而且只要down一下即可</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2021/11/09/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h1><p>简称DP</p>
<p>称为记忆化搜索</p>
<p>最大特点是：</p>
<ul>
<li>  用“空间”换“时间”</li>
<li>  不需要重复计算已经计算的值</li>
</ul>
<h2 id="核心解决的思路及问题："><a href="#核心解决的思路及问题：" class="headerlink" title="核心解决的思路及问题："></a><strong>核心解决的思路及问题：</strong></h2><ul>
<li>  dp数组及下标的含义</li>
<li>  递推公式</li>
<li>  dp数组如何初始化</li>
<li>遍历顺序（比较考究）<ul>
<li>  如：从后往前遍历</li>
</ul>
</li>
<li>  （出现问题时）打印dp数组判断错误</li>
</ul>
<h2 id="递推公式一般类型："><a href="#递推公式一般类型：" class="headerlink" title="递推公式一般类型："></a><strong>递推公式一般类型：</strong></h2><ul>
<li><p>斐波那契型F(n) = F(n - 1) + F(n - 2)</p>
<p>  这种只需管理两个值F(n - 1) 和 F(n - 2)来递推出F(n)</p>
<p>  如：</p>
<ul>
<li>  爬楼梯问题</li>
</ul>
</li>
<li></li>
</ul>
<p>应用情况：</p>
<ul>
<li>  股票问题</li>
<li>  背包问题</li>
<li>  递归函数或一般函数循环中出现大量重复计算的结点</li>
<li>  寻路</li>
<li>  子序列问题</li>
</ul>
<p>动态规划一般思路：</p>
<p><img src="/2021/11/09/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%80%E8%88%AC%E6%80%9D%E8%B7%AF.gif"></p>
<ul>
<li>  在程序中出现大量重复计算的结点时，尝试用动态规划</li>
<li>  用哈希表来记录已计算的结点</li>
<li>  再次遇到计算重复的节点时，直接查表，避免重复计算</li>
</ul>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="斐波那契型"><a href="#斐波那契型" class="headerlink" title="斐波那契型"></a>斐波那契型</h2><h3 id="509-斐波那契数列"><a href="#509-斐波那契数列" class="headerlink" title="509.斐波那契数列"></a>509.斐波那契数列</h3><p><strong>动态规划新手题</strong></p>
<p>初始化为<code>fib(0)=0;  fib(1)=1</code></p>
<p>而<code>fib(2) = fib(1) + fib(0)</code></p>
<p>不难看出当n&gt;1时，fib 的递推公式就是<code>F(n) = F(n - 1) + F(n - 2)</code></p>
<p>而这里只需要管理两个值 F(n - 1) 和 F(n - 2) 就可以递推，没必要记录整个递推数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//dp[2]记录F(n - 1) 和 F(n - 2)的值</span></span><br><span class="line">        <span class="keyword">int</span> dp[<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//初始化dp数组为0和1，因为F(0)=0, F(1)=1</span></span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//递推公式</span></span><br><span class="line">            <span class="comment">//F(n) = F(n - 1) + F(n - 2)，dp[2]为当前值</span></span><br><span class="line">            dp[<span class="number">2</span>]=dp[<span class="number">1</span>]+dp[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//赋值，让F(n - 2) = F(n - 1), 让F(n - 1) = F(n)</span></span><br><span class="line">            <span class="comment">//为了能在下次循环中，保证F(n -2)和F(n - 1)的值是正确的</span></span><br><span class="line">            dp[<span class="number">0</span>]=dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>]=dp[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  心得：</p>
<ul>
<li>  真没发现斐波那契数列还能有其他方法，而且比递归快多了</li>
</ul>
</blockquote>
<h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h2><p>题目：假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>通过枚举，不难发现</p>
<ul>
<li>  爬到第一层楼梯有一种方法，爬到二层楼梯有两种方法</li>
<li>  那么第一层楼梯再跨两步就到第三层，第二层楼梯再跨一步就到第三层</li>
<li>  所以到第三层楼梯的状态可以由<strong>到第二层楼梯</strong>和<strong>到第一层楼梯</strong>状态推导出来</li>
<li>  那么就可以想到动态规划了</li>
<li>  其递推公式有点类似斐波那契数列的动态规划</li>
</ul>
<p>这里有两种方法：</p>
<ul>
<li>  记录整个递推数组</li>
<li>  不记录整个递推数组</li>
</ul>
<p>相对来说，不记录整个递推数组占内存会少一点，虽然力扣上的内存消耗显示都一样是5.8MB（→__→）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt; n &amp;&amp; n &lt; <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不记录整个数组</span></span><br><span class="line">        <span class="comment">/*//表示第i层有dp[i]种方法</span></span><br><span class="line"><span class="comment">        int dp[4];</span></span><br><span class="line"><span class="comment">        //初始化</span></span><br><span class="line"><span class="comment">        dp[1] = 1;</span></span><br><span class="line"><span class="comment">        dp[2] = 2;</span></span><br><span class="line"><span class="comment">        for(int i = 3; i &lt;= n; ++i)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            //递推公式</span></span><br><span class="line"><span class="comment">            //与斐波那契数列同样的递推公式，且可以不记录整个数组</span></span><br><span class="line"><span class="comment">             dp[3] = dp[2] + dp[1];</span></span><br><span class="line"><span class="comment">            dp[1] = dp[2];</span></span><br><span class="line"><span class="comment">            dp[2] = dp[3]; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return dp[3]*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录整个数组的</span></span><br><span class="line">        <span class="comment">//表示第i层有dp[i]种方法，这里dp[0]时，没用，所以得多一个空间</span></span><br><span class="line">        <span class="keyword">int</span> dp[n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  心得：</p>
<ul>
<li>  做的那时候，没有枚举，所以我没发现原来跟斐波那契数列的递推公式是一样的</li>
<li>  这让我意识到了读到题的前期，一定要枚举，不然发现不了规律</li>
</ul>
</blockquote>
<h2 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53.最大子序和"></a>53.最大子序和</h2><p>思路：</p>
<ul>
<li><p>利用<strong>第 i 个数结尾的「连续子数组的最大和」pre&lt; 0</strong>来推断出递推公式</p>
<p>  若前面子数组最大和&lt;0，即<strong>对后续无增益效果</strong>，这个可以演化成为<code>pre + nums[i] &lt; nums[i]</code> 若为true，则前面最大子数组和 &lt; 0</p>
</li>
<li><p>  记录第 i 个数结尾的「连续子数组的最大和」pre 和 目前最大值 ansMax</p>
</li>
<li><p>  比较当前最大值pre和目前最大值ansMax</p>
</li>
</ul>
<p><img src="/2021/11/09/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.gif"></p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//num为前面连续子数组的最大和，ansmax为最大值</span></span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>,ansmax=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//递推公式</span></span><br><span class="line">            <span class="comment">//num + nums[i]表示第 i 个数结尾的「连续子数组的最大和」</span></span><br><span class="line">            <span class="comment">//和第i个数比较</span></span><br><span class="line">            <span class="comment">//与 num&lt;0 的判断异曲同工</span></span><br><span class="line">            num=<span class="built_in">max</span>(num+nums[i],nums[i]);</span><br><span class="line">            <span class="comment">//和上一次最大值比较</span></span><br><span class="line">            ansmax=<span class="built_in">max</span>(num,ansmax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ansmax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>小技巧</title>
    <url>/2021/12/14/%E7%AE%97%E6%B3%95/%E5%B0%8F%E6%8A%80%E5%B7%A7/%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="一维转二维"><a href="#一维转二维" class="headerlink" title="一维转二维"></a>一维转二维</h2><p><code>s[]:</code> <code>1 2 3 4 5 6 7 c 8 9 10 11</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s[4][3]:</span><br><span class="line">1  2  3 </span><br><span class="line">4  5  6</span><br><span class="line">7  c  8</span><br><span class="line">9  10 11</span><br></pre></td></tr></table></figure>

<p>若我们求 $c$ 的坐标 $(x,y)$ ，我们要先知道 $c$ 在一维中的是第 $k$ 个元素，然后可以用一次函数的思想 $y=ax+b$ ，因为一次函数是二维的嘛，而这里的 $a$ 可以看作是 <code>s[][]</code> 一层中<strong>共有</strong>  $a$ 个元素，而 $b$ 可以看作是 <code>s[][]</code> 这一层中第 $b$ 个元素</p>
<blockquote>
<p>  那x —&gt; <code>x = k / a</code><br>  而y —&gt; <code>y = k % a</code><br>  如上的例子：<br>  <code>k = 7, a = 3</code><br>  <code>x = 7 / 3 = 2, y = 7 % 3 = 1</code><br>  则 <code>s[x][y]</code> 就是 $c$ 的坐标</p>
<p>  <strong>一维数组的坐标用二维坐标表示</strong>就是用一次函数的思想：<code>s[a*x+y]</code><br>  即：<code>s[3 * 2 + 1] = s[7]</code></p>
</blockquote>
<img src="/2021/12/14/%E7%AE%97%E6%B3%95/%E5%B0%8F%E6%8A%80%E5%B7%A7/%E5%B0%8F%E6%8A%80%E5%B7%A7/一次函数.png" alt="一次函数" style="zoom:61%;">



<h2 id="二维转一维"><a href="#二维转一维" class="headerlink" title="二维转一维"></a>二维转一维</h2><p>同样也需要用一次函数来转换 $y=ax+b$ ，同样的，其实就是上面的逆运算，$a$ 同样是一层中有多少个元素， $b$ 则是本层中第 $b$ 个元素</p>
<p><code>s[]:</code> <code>1 2 3 4 5 6 7 c 8 9 10 11</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s[4][3]:</span><br><span class="line">1  2  3 </span><br><span class="line">4  5  6</span><br><span class="line">7  c  8</span><br><span class="line">9  10 11</span><br></pre></td></tr></table></figure>

<p><code>s[x][y]</code> ，求 x 和 y ：已知 $c$ 在一维数组中的下标 <code>k = 7</code></p>
<p><code>x = k / a</code><br><code>y = k % a</code></p>
<blockquote>
<p>  <code>x = 7 / 3 = 2</code></p>
<p>  <code>y = 7 % 3 = 1</code></p>
<p>  <code>s[2][1] = c</code></p>
</blockquote>
]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>广度优先搜索</title>
    <url>/2021/11/16/%E7%AE%97%E6%B3%95/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="Breadth-First-Search（BFS）"><a href="#Breadth-First-Search（BFS）" class="headerlink" title="Breadth-First-Search（BFS）"></a>Breadth-First-Search（BFS）</h1><p>广度优先搜索，其实在二叉树中的层次遍历也是广度优先的思想</p>
<p>实现广度优先的基本思路：用队列</p>
<h1 id="邻接矩阵广度优先"><a href="#邻接矩阵广度优先" class="headerlink" title="邻接矩阵广度优先"></a>邻接矩阵广度优先</h1><p>顶点入队前一定要设置已访问的标志，并且访问它</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//广度优先搜索</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="keyword">this</span>-&gt;numVertexes; ++k)</span><br><span class="line">    &#123;</span><br><span class="line">        visited[k] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;numVertexes; ++i) <span class="comment">// 如果为连通图，则下面的if只进去一次</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i])</span><br><span class="line">        &#123;</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;vexs[i] &lt;&lt; endl;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> index = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>-&gt;numVertexes; ++j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/*遍历到某个结点的所有孩子时，必须要先转换标志和打印，不止一个孩子入队后</span></span><br><span class="line"><span class="comment">                        下一次循环未必到那个孩子转换标志，有可能造成多次访问，所以在父辈访问到这个孩子的时候，先转换标志*/</span></span><br><span class="line">                    <span class="keyword">if</span> (arc[index][j] &gt;= <span class="number">1</span> &amp;&amp; arc[index][j] != INF &amp;&amp; !visited[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        visited[index] = <span class="literal">true</span>;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;vexs[index] &lt;&lt; endl;</span><br><span class="line">                        q.<span class="built_in">push</span>(j);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>搜索算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>广度优先搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>常见模型</title>
    <url>/2021/12/10/%E7%AE%97%E6%B3%95/%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B/%E5%B8%B8%E8%A7%81%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="常见模型"><a href="#常见模型" class="headerlink" title="常见模型"></a>常见模型</h1><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p>模板题： <a href="https://www.acwing.com/problem/content/832/">AcWing 830. 单调栈</a></p>
<p>模型：找出每个数左边离它最近的比它大/小的数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (top &amp;&amp; <span class="built_in">check</span>(st[top - <span class="number">1</span>], i)) top -- ;</span><br><span class="line">    st[ ++ top] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>check()</code> 就是判断栈顶元素与其他元素之间的关系，与题目有关</p>
<h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><p>模板题：<a href="https://www.acwing.com/problem/content/156/">AcWing 154. 滑动窗口</a></p>
<p>模型：找出滑动窗口中的最大值/最小值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> front = <span class="number">0</span>, rear = <span class="number">-1</span>; <span class="comment">// 队头、队尾指针</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (front &lt;= rear &amp;&amp; <span class="built_in">check_out</span>(q[front])) front ++ ;  <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">    <span class="keyword">while</span> (front &lt;= rear &amp;&amp; <span class="built_in">check</span>(q[rear], i)) rear -- ;</span><br><span class="line">    q[ ++ rear] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>逻辑：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a[]为需要找的数组，k为滑动窗口大小</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (front &lt;= rear &amp;&amp; i - k + <span class="number">1</span> &gt; q[front]) <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">        front++;</span><br><span class="line">    <span class="keyword">while</span> (front &lt;= rear &amp;&amp; a[i] &lt;= a[q[rear]])</span><br><span class="line">        rear--; <span class="comment">// 清除当前队列中的元素</span></span><br><span class="line">    que[++rear] = i;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; a[q[front]] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当找最小值时，队列中队头元素是最小的，依次往后排都是比前一个大的元素，当当前元素<code>a[i]&lt;=</code>队头的最小元素时，循环判断队列中的元素是否有小于<code>a[i]</code>，没有则继续从后向前判断，并将队头出队</p>
]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2021/11/29/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><ul>
<li>  冒泡排序</li>
<li>  选择排序</li>
<li>  快速排序（√）</li>
<li>  归并排序（√）</li>
<li>  堆排序    （√）</li>
<li>  插入排序</li>
<li>  希尔排序</li>
</ul>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><ul>
<li>  确定分界点（常用：左端点 l 、右端点 r 、中间点）</li>
<li>  划分区间</li>
<li>  递归</li>
</ul>
<p>用双指针来进行排序，随便取一个分界线值x，小于x的值放左边，大于x的值放右边，然后左递归运算，将大区间递归分成俩小区间，小区间再分。</p>
<img src="/2021/11/29/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/快速排序.gif" alt="快速排序" style="zoom:50%;">

<h2 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h2><h3 id="从小到大排序："><a href="#从小到大排序：" class="headerlink" title="从小到大排序："></a>从小到大排序：</h3><p><strong>j</strong> 作为边界</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//递归的终止情况</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第一步：分成子问题</span></span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x = q[l + r &gt;&gt; <span class="number">1</span>]; <span class="comment">// 向下取整，可能会取到r，也可写成(l + r) / 2 </span></span><br><span class="line">    					   <span class="comment">//将 j 作为边界，不能选q[r]，即不能为右端点值</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第二步：递归处理子问题</span></span><br><span class="line">    <span class="comment">// j作为边界</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j); <span class="comment">// 处理左边</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r); <span class="comment">// 处理右边</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第三步：子问题合并.快排这一步不需要操作，但归并排序的核心在这一步骤</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>i</strong> 作为边界</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//递归的终止情况</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第一步：分成子问题</span></span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x = q[l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>]; <span class="comment">// 向上取整，可能会取到l，也可以写成(l + r + 1) / 2 </span></span><br><span class="line">    						   <span class="comment">//将 i 作为边界，不能选q[l]，即不能为左端点值</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第二步：递归处理子问题</span></span><br><span class="line">    <span class="comment">// i作为边界</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, i - <span class="number">1</span>); <span class="comment">// 处理左边</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, i, r); <span class="comment">// 处理右边</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>上面动图的排序</strong>，只是在上面基础上多加了判断当俩指针相遇时，判断当前值是否大于分界点值，大于则交换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = nums[l + r &gt;&gt; <span class="number">1</span>]; <span class="comment">//将分界线设为nums数组中间的值</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123; <span class="comment">//移动指针</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span> (nums[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">while</span> (nums[j] &gt; x);</span><br><span class="line">        <span class="comment">//交换两数</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">        <span class="comment">//多加的</span></span><br><span class="line">        <span class="comment">//当俩指针相遇时，如果比分界点大，则交换</span></span><br><span class="line">        <span class="keyword">if</span>(i==j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;x)</span><br><span class="line">                <span class="built_in">swap</span>(nums[i],nums[l+r&gt;&gt;<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(nums, l, j);</span><br><span class="line">    <span class="built_in">quick_sort</span>(nums, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="从大到小排序："><a href="#从大到小排序：" class="headerlink" title="从大到小排序："></a>从大到小排序：</h3><p>j 作为边界，与从小到大排序仅仅改两个符号</p>
<p>将<code>do i++; while(q[i] &lt; x);</code> 改成 <code>do i++; while(q[i] &gt; x);</code></p>
<p>将<code>do j--; while(q[j] &gt; x);</code> 改成 <code>do j--; while(q[j] &lt; x);</code></p>
<h2 id="边界问题"><a href="#边界问题" class="headerlink" title="边界问题"></a>边界问题</h2><p>这里将左指针<code>i</code>设为<code>l - 1</code>，将右指针<code>j</code>设为<code>r + 1</code>，涉及到一个边界问题</p>
<p>以 j 为划分时，x 不能选 <code>q[r]</code> （若以 i 为划分,则 x 不能选 <code>q[l]</code> ）</p>
<p>假设 <code>x = q[r]</code></p>
<p>关键句子<code>quick_sort(q, l, j), quick_sort(q, j + 1, r);</code></p>
<p>由于 j 的最小值是 <code>l</code>，所以<code>q[j+1..r]</code>不会造成无限划分</p>
<p>但<code>q[l..j] 即quick_sort(q, l, j)</code>却可能造成无限划分，<strong>因为 j 可能为 r，而 [j+1..r]显然是在函数if(l&gt;=r)的时候就退出了，而 [l .. j] 划分后还是本区间</strong>，则同样的区间就会一直递归下去</p>
<p>例如：若 x 选为 q[r]，数组中 <code>q[l..r-1] &lt; x</code>，那么这一轮循环结束时 i = r， j = r，显然会造成无限划分</p>
<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>平均时间复杂度：$O(nlog_2n)$</p>
<p>最快时间复杂度：$O(n^2)$</p>
<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><ul>
<li>  确定分界点为数组中间元素</li>
<li>  递归二分区间</li>
<li>  归并数组</li>
</ul>
<p>跟快速排序算法思想一样，分而治之和递归思想，先递归二分区间，再回溯合并二分的数组，比较两数组的值，再自底向上排序</p>
<img src="/2021/11/29/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/归并排序全过程.png" alt="归并排序全过程" style="zoom:70%;">

<img src="/2021/11/29/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/归并排序.gif" alt="归并排序" style="zoom: 45%;">



<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="从小到大"><a href="#从小到大" class="headerlink" title="从小到大"></a>从小到大</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> temp[<span class="number">100002</span>]; <span class="comment">// 临时数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//判断递归结束</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归二分数组</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(s, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(s, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//下面是当前二分数组后，在被二分的数组执行的操作</span></span><br><span class="line">    <span class="comment">//归并有序数组</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt; s[j])</span><br><span class="line">            temp[k++] = s[j++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp[k++] = s[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当其中一个数组中还有数据，则将剩下的数据赋值到临时数组中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        temp[k++] = s[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r)</span><br><span class="line">        temp[k++] = s[j++];</span><br><span class="line">    <span class="comment">//将临时数组的数据赋值回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++)</span><br><span class="line">        s[i] = temp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从大到小只需把<code>if(s[i] &gt; s[j])</code> 变成 <code>if(s[i] &lt; s[j])</code>即可</p>
<h2 id="边界问题-1"><a href="#边界问题-1" class="headerlink" title="边界问题"></a>边界问题</h2><p>同快速排序边界差不多</p>
<h2 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p><img src="/2021/11/29/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%AE%A1%E7%AE%97.jpg" alt="归并排序时间复杂度计算"></p>
<p>每层都是$O(n)$的计算量，比如第三层，每一段的时间复杂度是$O(\frac{n}{4})$</p>
<p>n 除 $log_2n$次才能等于1，即有$log_2n$层</p>
<p>时间复杂度：$O(nlog_2n)$</p>
<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1>]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>深度优先搜索</title>
    <url>/2021/11/13/%E7%AE%97%E6%B3%95/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="Depth-First-Search（DFS）"><a href="#Depth-First-Search（DFS）" class="headerlink" title="Depth-First-Search（DFS）"></a>Depth-First-Search（DFS）</h1><p>深度优先搜索 (DFS) 是一种用于遍历或搜索树或图数据结构的算法。一个从根开始（在图的情况下选择某个任意节点作为根）并在回溯之前沿着每个分支尽可能地探索。</p>
<img src="/2021/11/13/%E7%AE%97%E6%B3%95/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/Tree Depth-First-Search.gif" alt="Depth-First-Search" style="zoom: 67%;">

<img src="/2021/11/13/%E7%AE%97%E6%B3%95/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/Brute-Force-Depth-First-Search.gif" alt="Brute-Force-Depth-First-Search">



<p>基本思路：</p>
<ul>
<li><p>深度优先遍历图的方法是，从图中某顶点v出发：</p>
<ul>
<li><p>  （一）访问顶点v；</p>
</li>
<li><p>  （二）依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；</p>
</li>
<li><p>  （三）若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。</p>
</li>
</ul>
</li>
<li><p>  深度优先遍历树的方法，其实遍历树的先序、中序、后序遍历即是深度优先遍历</p>
</li>
</ul>
<h1 id="邻接矩阵深度优先遍历"><a href="#邻接矩阵深度优先遍历" class="headerlink" title="邻接矩阵深度优先遍历"></a>邻接矩阵深度优先遍历</h1><p>不多bb，看GIF</p>
<p><img src="/2021/11/13/%E7%AE%97%E6%B3%95/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E5%9B%BE.gif" alt="深度优先遍历图"></p>
<p>递归算法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[MAXNUM];<span class="comment">//访问标志的数组</span></span><br><span class="line"><span class="comment">//深度优先递归算法，从第1个结点开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(AMGraph&amp; G,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visited[i] = <span class="literal">true</span>;</span><br><span class="line">    cout &lt;&lt; G.ves[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G.vexnum; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (G.arc[i][j] &gt;= <span class="number">1</span> &amp;&amp; !visited[j])</span><br><span class="line">            <span class="built_in">DFS</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//邻接矩阵深度遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(AMGraph&amp; G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化所有顶点状态为未访问的状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//如果还有结点未访问则调用DFS，</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//若是连通图，只会调用一次</span></span><br><span class="line">        <span class="keyword">if</span> (!visited[i])</span><br><span class="line">            <span class="built_in">DFS</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>非递归算法</p>
<p>利用栈容器来模拟栈</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">bool</span> visited[MAXNUM];<span class="comment">//访问标志的数组</span></span><br><span class="line"><span class="comment">//非递归深度优先，从第1个结点开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(AMGraph&amp; G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; G.vesnum; ++k)</span><br><span class="line">    &#123;</span><br><span class="line">        visited[k] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G.vesnum; i++) <span class="comment">// 从第1个结点开始遍历，若为连通图，下面的if(!visited[i])只执行一遍</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> start = i;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(i); </span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; G.ves[i] &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> index = s.<span class="built_in">top</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;; j++) </span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (G.arc[index][j] != <span class="number">0</span> &amp;&amp; G.arc[index][j] != INF &amp;&amp; !visited[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        visited[j] = <span class="literal">true</span>;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; G.ves[j] &lt;&lt; endl;</span><br><span class="line">                        <span class="comment">// 核心，将索引转到j号结点</span></span><br><span class="line">                        index = j;</span><br><span class="line">                        j = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (j == vesnum)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 当栈顶元素==出发点，说明全部遍历完了</span></span><br><span class="line">                        <span class="keyword">if</span> (start == s.<span class="built_in">top</span>())</span><br><span class="line">                        &#123;</span><br><span class="line">                            s.<span class="built_in">pop</span>();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">/* 否则说明没遍历完或者，栈还有元素，</span></span><br><span class="line"><span class="comment">                               弹出此元素，并将遍历的索引修改成上一个结点的索引，</span></span><br><span class="line"><span class="comment">                               j=0重新从此结点开始寻找还没遍历的结点 */</span></span><br><span class="line">                        s.<span class="built_in">pop</span>();</span><br><span class="line">                        index = s.<span class="built_in">top</span>();</span><br><span class="line">                        j = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="邻接表深度优先遍历"><a href="#邻接表深度优先遍历" class="headerlink" title="邻接表深度优先遍历"></a>邻接表深度优先遍历</h1><p>这个就很好理解了吧，而且只是在递归函数中将访问数组换成访问链表而已</p>
<p>从某一个顶点进去，然后开始遍历该顶点第一个结点下的结点，如果遍历过了或者没有，则回溯就OK了</p>
<p>递归算法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//邻接表深度优先递归算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(AdjGraph&amp; GL, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; GL.vertices[i].data &lt;&lt; <span class="string">&quot; &quot;</span>;  <span class="comment">//打印当前结点</span></span><br><span class="line">    EdgeNode* p = GL.vertices[i].firstnext;   <span class="comment">//打工人</span></span><br><span class="line">    visited[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断当前结点</span></span><br><span class="line">        <span class="keyword">if</span> (!visited[p-&gt;adjvex])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">DFS</span>(p-&gt;adjvex);</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;nextarc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化所有顶点状态为未访问的状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; GL.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果还有结点未访问则调用DFS，</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; GL.vexnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//若是连通图，只会调用一次</span></span><br><span class="line">        <span class="keyword">if</span> (!visited[i])</span><br><span class="line">            <span class="built_in">DFS</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>非递归算法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归深度优先</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="keyword">this</span>-&gt;vesnum; ++k)</span><br><span class="line">    &#123;</span><br><span class="line">        visited[k] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">int</span> index; <span class="comment">// 当前顶点的索引</span></span><br><span class="line">    EdgeNode* e; <span class="comment">// 用来遍历与顶点相连的每个结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="keyword">this</span>-&gt;vesnum; i++) <span class="comment">// 从第1个结点开始遍历，若为连通图，下面的if(!visited[i])只执行一遍</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> start = i;</span><br><span class="line">        <span class="keyword">if</span> (!visited[i])</span><br><span class="line">        &#123;</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;vertices[i].data &lt;&lt; endl;</span><br><span class="line">            s.<span class="built_in">push</span>(i);</span><br><span class="line">            <span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                index = s.<span class="built_in">top</span>();</span><br><span class="line">                e= <span class="keyword">this</span>-&gt;vertices[index].firstnext;</span><br><span class="line">                <span class="keyword">while</span>(e) <span class="comment">// 需要考虑顶点后有没有与其他相连，没有就是为NULL</span></span><br><span class="line">                &#123;</span><br><span class="line">                    index = e-&gt;adjvex;</span><br><span class="line">                    <span class="comment">//如果访问过了该结点，那就移动指针到该顶点的其他结点呗</span></span><br><span class="line">                    <span class="keyword">if</span> (!visited[index])</span><br><span class="line">                    &#123;</span><br><span class="line">                        cout &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;vertices[index].data &lt;&lt; endl;</span><br><span class="line">                        visited[index] = <span class="literal">true</span>;</span><br><span class="line">                        s.<span class="built_in">push</span>(index);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        e = e-&gt;nextarc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!e) <span class="comment">// 这里while在中途退出的话，e不可能为NULL</span></span><br><span class="line">                    s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="递归转非递归"><a href="#递归转非递归" class="headerlink" title="递归转非递归"></a>递归转非递归</h1><p>核心思想：将递归的过程，需要改变的参数，用循环模拟出来，当然肯定需要栈</p>
<h1 id="两种存储结构区别"><a href="#两种存储结构区别" class="headerlink" title="两种存储结构区别"></a>两种存储结构区别</h1><p>对比两个不同存储结构的深度优先遍历算法，对于 n 个顶点 e 条边的图来说，邻接矩阵由于是二维数组，要查找每个顶点的邻接点需要访问矩阵中的所有元素，因此都需要 $O(n^2)$的时间 而邻接表做存储结构时，找邻接点所需的时间取决于顶点和边的数量，所以是 $O(n+e)$ 。显然对于点多边少的稀疏图来说，邻接表结构使得算法在时间效率上大大提高。</p>
<p>对于有向图而言，由于它只是对通道存在可行或不可行，算法上没有变化，是完全可以通用的。这里就不再详述了。</p>
]]></content>
      <categories>
        <category>搜索算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>深度优先搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路径</title>
    <url>/2021/11/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Graph/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="ShortestPath"><a href="#ShortestPath" class="headerlink" title="ShortestPath"></a>ShortestPath</h1><p>常用算法：</p>
<ul>
<li>  迪杰斯特拉（Dijkstra）算法</li>
<li>  弗洛伊德（Floyd）算法</li>
<li>  贝尔曼-福特（Bellman-Ford）算法</li>
</ul>
<h1 id="Dijkstra算法-O-n-2"><a href="#Dijkstra算法-O-n-2" class="headerlink" title="Dijkstra算法 $O(n^2)$"></a>Dijkstra算法 $O(n^2)$</h1><p>此算法是从某个顶点作为起点，计算起点到各个顶点的最短路径</p>
<p>此算法实现与pirm最小生成树算法差不多，**<a href="https://www.bilibili.com/video/BV1zz4y1m7Nq?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">算法思路</a>**</p>
<p>迪杰斯特拉算法采用了贪心+动态规划的思维，使用了两次贪心算法。通过由起点出发，到达每个顶点的路径，取最小，并保存起来</p>
<p>局部最优：</p>
<ul>
<li>  （第一次）每次从最短路径数组中取最小值，并纳入最小路径的点中</li>
<li>  （第二次）每次该点纳入最小路径的点后，需要找其分支上的权值，与最短路径数组上到各点的权值，取最小值</li>
</ul>
<p>全局最优：</p>
<ul>
<li>  每次取最小值能推出整体最小值，即最短路径</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迪杰斯特拉最短路径（贪心算法 + 动态规划）跟prim最小生成树算法一个思路</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortestPath_Dijkstra</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Pathmatirx[numVertexes];     <span class="comment">// 记录该顶点前一个所在最短路径顶点的索引</span></span><br><span class="line">    <span class="keyword">int</span> shortPathTable[numVertexes]; <span class="comment">// 记录顶点i到任一顶点的最短路径</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">final</span>[numVertexes];         <span class="comment">// 记录收录最短路径的顶点，置1即已是最短路径中的顶点</span></span><br><span class="line">    <span class="keyword">int</span> minVex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化数据列表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;numVertexes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        shortPathTable[i] = INF;</span><br><span class="line">        <span class="keyword">final</span>[i] = <span class="literal">false</span>;</span><br><span class="line">        shortPathTable[i] = arc[index][i];</span><br><span class="line">        <span class="keyword">if</span> (arc[index][i] != INF &amp;&amp; arc[index][i] != <span class="number">0</span>)</span><br><span class="line">            Pathmatirx[i] = index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span>[index] = <span class="literal">true</span>;</span><br><span class="line">    shortPathTable[index] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numVertexes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minVex = INF;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>; <span class="comment">// 记录最小路径点的索引</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出出发点到某点的最短路径，记录索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numVertexes; j++)</span><br><span class="line">        &#123; <span class="comment">//如果它不在最短路径中</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">final</span>[j] &amp;&amp; minVex &gt; shortPathTable[j])</span><br><span class="line">            &#123;</span><br><span class="line">                minVex = shortPathTable[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span>[k] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//更新结点最短路径表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numVertexes; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = shortPathTable[k] + arc[k][j];</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; shortPathTable[j] &amp;&amp; !<span class="keyword">final</span>[j])</span><br><span class="line">            &#123;</span><br><span class="line">                shortPathTable[j] = sum;</span><br><span class="line">                Pathmatirx[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numVertexes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = i;</span><br><span class="line">        cout &lt;&lt; t;</span><br><span class="line">        <span class="keyword">while</span> (t != index)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &lt;- &quot;</span> &lt;&lt; Pathmatirx[t];</span><br><span class="line">            t = Pathmatirx[t];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出此算法时间复杂度为$O(n^2)$</p>
<p>此算法如果想要求各点到各点的最短路径，则需要再加多一层外循环，那么时间复杂度变成了$O(n^3)$</p>
<h1 id="Floyd算法-O-n-3"><a href="#Floyd算法-O-n-3" class="headerlink" title="Floyd算法 $O(n^3)$"></a>Floyd算法 $O(n^3)$</h1><p>此算法是计算各点到各点的最短路径</p>
<p>此算法用来动态规划的思维，<a href="https://www.bilibili.com/video/BV1q4411M7r9?spm_id_from=333.1007.top_right_bar_window_history.content.click">算法思路</a>，空降7：45</p>
<p>其实就是两个二维dp数组，一个记录各点到各点的最短路径，另一个是记录各点到各点需要经过的中间点</p>
<p>需要注意的是：三层循环那的下标问题，外层循环是表示当前需要判断的点k，画一下图就会明白了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弗洛伊德最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShortestPath_Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ShortPathTable[numVertexes][numVertexes]; <span class="comment">// 记录各点到各点的最短路径</span></span><br><span class="line">    <span class="keyword">int</span> Pathmatirx[numVertexes][numVertexes];     <span class="comment">// 记录邻接的顶点</span></span><br><span class="line">    <span class="comment">// 初始化数据列表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numVertexes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numVertexes; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ShortPathTable[i][j] = <span class="keyword">this</span>-&gt;arc[i][j];</span><br><span class="line">            Pathmatirx[i][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; numVertexes; k++) <span class="comment">// 本质上是看两个任意节点的最短路径是否k</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numVertexes; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numVertexes;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ShortPathTable[i][k] + ShortPathTable[k][j] &lt; ShortPathTable[i][j])</span><br><span class="line">                    &#123;   <span class="comment">// 设置更小的权值</span></span><br><span class="line">                        ShortPathTable[i][j] = ShortPathTable[i][k] + ShortPathTable[k][j];</span><br><span class="line">                        Pathmatirx[i][j] = Pathmatirx[i][k]; <span class="comment">// 设为路径经过下标k的顶点</span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印各点到各点的最短路径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numVertexes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numVertexes; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Path:&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;--&gt;&quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot; weight:&quot;</span> &lt;&lt; ShortPathTable[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">            <span class="keyword">int</span> k = Pathmatirx[i][j];</span><br><span class="line">            <span class="keyword">while</span> (k != j)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; k;</span><br><span class="line">                k = Pathmatirx[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此算法时间复杂度是$O(n^3)$</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
        <tag>Graph</tag>
        <tag>最短路径</tag>
      </tags>
  </entry>
  <entry>
    <title>最小生成树</title>
    <url>/2021/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Graph/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<h1 id="Minimum-Spanning-Tree（MST）"><a href="#Minimum-Spanning-Tree（MST）" class="headerlink" title="Minimum Spanning Tree（MST）"></a>Minimum Spanning Tree（MST）</h1><p>有两种算法生成：</p>
<ul>
<li>  普里姆（Prim）算法</li>
<li>  克鲁斯卡尔( Kruskal )算法</li>
</ul>
<h1 id="Prim算法-O-n-2"><a href="#Prim算法-O-n-2" class="headerlink" title="Prim算法 $O(n^2)$"></a>Prim算法 $O(n^2)$</h1><p>我个人觉得核心是贪心算法，而且用了两次贪心</p>
<p>用两个数组来记录顶点的权值和索引： lowcost 来记录当前连接到的顶点下的最小的权值， adjvex 来记录与 lowcost 对应的各个最小权值的邻接点（它爸）的索引</p>
<p><img src="/2021/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Graph/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/prim%E7%AE%97%E6%B3%95.gif" alt="prim算法"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32676</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXNUM 100</span></span><br><span class="line"><span class="comment">// prim最小生成树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MiniSpanTree_Prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min, i, j, k;</span><br><span class="line">    <span class="keyword">int</span> adjvex[MAXNUM];  <span class="comment">// 当前已连接点的最小权值的集合</span></span><br><span class="line">    <span class="keyword">int</span> lowcost[MAXNUM]; <span class="comment">// 记录最小权值的邻接点索引</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;numVertexes; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        lowcost[i] = <span class="keyword">this</span>-&gt;arc[<span class="number">0</span>][i]; <span class="comment">// 先初始化全为第一个顶点的权值</span></span><br><span class="line">        adjvex[i] = <span class="number">0</span>;                <span class="comment">//初始化全为0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从1开始，因为第一个顶点已经确定了</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">this</span>-&gt;numVertexes; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        min = INF; <span class="comment">// 重置最小值为无穷大</span></span><br><span class="line">        k = <span class="number">0</span>;     <span class="comment">// 记录当前最小权值的索引</span></span><br><span class="line">        <span class="comment">// 取与当前顶点相连的边的最小权值，并记录当前最小权值边的顶点索引（贪心思维）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;numVertexes; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] != <span class="number">0</span> &amp;&amp; min &gt; lowcost[j])</span><br><span class="line">            &#123;</span><br><span class="line">                min = lowcost[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; adjvex[k] &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; k &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        lowcost[k] = <span class="number">0</span>; <span class="comment">//置0表示该点完成生成树任务</span></span><br><span class="line">        <span class="comment">//进入这个最小权值的顶点，来依次赋值给lowcost</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;numVertexes; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 在lowcost和arc[k]这里面一一比较获取最小值（贪心思维）</span></span><br><span class="line"><span class="comment">                这里k是当前最小权值的顶点索引*/</span></span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] != <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>-&gt;arc[k][j] &lt; lowcost[j])</span><br><span class="line">            &#123;</span><br><span class="line">                lowcost[j] = <span class="keyword">this</span>-&gt;arc[k][j];</span><br><span class="line">                adjvex[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由算法代码中的循环嵌套可得知此算法的时间复杂度为 $O(n^2)$</p>
<h1 id="Kruskal算法-O-elog-2e"><a href="#Kruskal算法-O-elog-2e" class="headerlink" title="Kruskal算法 $O(elog_2e)$"></a>Kruskal算法 $O(elog_2e)$</h1><p>这个就是把全部边都去掉，然后对他们的权值进行升序排序，判断是否成环，否则从小到大给边。</p>
<p>GIF</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Kruskal最小生成树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MiniSpanTree_Kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> begin;</span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        <span class="keyword">int</span> weight;</span><br><span class="line">    &#125;;</span><br><span class="line">    Edge edges[numEdges];</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;numVertexes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>-&gt;numVertexes; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;arc[i][j] != INF &amp;&amp; <span class="keyword">this</span>-&gt;arc[i][j] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                edges[k].begin = i;</span><br><span class="line">                edges[k].end = j;</span><br><span class="line">                edges[k].weight = <span class="keyword">this</span>-&gt;arc[i][j];</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> minIndex;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (edges[j].weight &lt; edges[minIndex].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIndex != i)</span><br><span class="line">        &#123;</span><br><span class="line">            Edge temp = edges[i];</span><br><span class="line">            edges[i] = edges[minIndex];</span><br><span class="line">            edges[minIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 以上赋值排序 */</span></span><br><span class="line">    <span class="keyword">int</span> parent[<span class="keyword">this</span>-&gt;numVertexes]; <span class="comment">// 索引记录边的起始点，其对应值用来记录边的结束点，判断边与边是否成环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;numVertexes; i++)</span><br><span class="line">        parent[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//找出边的两头所对应的索引的索引</span></span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">find</span>(parent, edges[i].begin); </span><br><span class="line">        <span class="keyword">int</span> m = <span class="built_in">find</span>(parent, edges[i].end);</span><br><span class="line">        <span class="keyword">if</span> (n != m)</span><br><span class="line">        &#123;</span><br><span class="line">            parent[n] = m;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; &quot;(&quot; &lt;&lt; edges[i].begin &lt;&lt; &quot;,&quot; &lt;&lt; edges[i].end &lt;&lt; &quot;)&quot; &lt;&lt; edges[i].weight &lt;&lt; endl;</span></span><br><span class="line">            cout &lt;&lt; edges[i].begin &lt;&lt; <span class="string">&quot; ——— &quot;</span> &lt;&lt; edges[i].end &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> *parent, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 根据整条路的</span></span><br><span class="line">    <span class="keyword">while</span> (parent[index])</span><br><span class="line">        index = parent[index];</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由算法代码中的循环嵌套可得知此算法的时间复杂度为$O(elog_2e)$，e为边数</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
        <tag>Graph</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>图</title>
    <url>/2021/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Graph/%E7%94%9F%E6%88%90%E5%9B%BE/%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><p>像这样的称为图：</p>
<ul>
<li>  无向图、有向图</li>
</ul>
<p><img src="/2021/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Graph/%E7%94%9F%E6%88%90%E5%9B%BE/%E5%9B%BE/无向图例子.jpg" alt="无向图例子" style="zoom: 80%;">             <img src="/2021/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Graph/%E7%94%9F%E6%88%90%E5%9B%BE/%E5%9B%BE/有向图例子.png" alt="有向图例子" style="zoom: 67%;"></p>
<p>基本术语：</p>
<ul>
<li><p>  子图（Sub-Graph）：当图G’=(V’,E’)其中V‘包含于V，E’包含于E，则G’称作图G=(V,E)的子图。每个图都是本身的子图。</p>
</li>
<li><p>度（Degree）：一个顶点的度是指与该顶点相关联的边的条数，顶点v的度记作d(v)。</p>
<ul>
<li>  入度（In-degree）：一个顶点的入度是指与其关联的各边之中，以其为终点的边数（箭头指向该顶点的箭头数）</li>
<li>  出度（Out-degree）：出度则是相对的概念，指以该顶点为起点的边数。（这个顶点往外指的箭头数）</li>
</ul>
</li>
<li><p>无向完全图和有向完全图：</p>
<ul>
<li>  <strong>无向完全图</strong>，在无向图中，如果<strong>任意两个顶点之间</strong>都存在边，则称该图为无向完全图<strong>，具有$n(n-1)/2$条边。</strong></li>
<li>  <strong>有向完全图</strong>，在有向图中，如果<strong>任意两个顶点之间</strong>都存在 <strong>方向互为相反</strong> 的<strong>两条弧</strong>，<strong>具有$n(n-1)$条弧</strong></li>
</ul>
</li>
<li><p>  稀疏图和稠密图：有很少条边或弧（如$e&lt;nlog_2n$）的图称为稀疏图，反之称为稠密图</p>
</li>
</ul>
<h1 id="创建图"><a href="#创建图" class="headerlink" title="创建图"></a>创建图</h1><p>有两种方法：</p>
<ul>
<li>  邻接矩阵</li>
<li>  邻接表</li>
</ul>
<h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>邻接矩阵就像一个二维数组，<strong>无向图的邻接矩阵是一个对称矩阵</strong></p>
<img src="/2021/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Graph/%E7%94%9F%E6%88%90%E5%9B%BE/%E5%9B%BE/邻接矩阵解释.png" alt="邻接矩阵解释" style="zoom:50%;">

<p>优点：</p>
<ul>
<li>  便于判断两个顶点之间是否有边，即根据<code>arc[i][j]=0或其他数</code>来判断</li>
<li>便于计算各个顶点的度。<ul>
<li>  对于<strong>无向图</strong>，邻接矩阵第 i 行元素之和 = 顶点 i 的度；</li>
<li>  对于<strong>有向图</strong>，第 i 行元素之和 = 顶点 i 的出度，第 i 列元素之和 = 顶点 i 的入度</li>
</ul>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>  不便于增加和删除顶点</li>
<li>  不便于统计边的数目</li>
<li>  空间复杂度高，$O(n^2)$，对于稀疏图而言浪费很多空间</li>
</ul>
<p>根据储存结构来创建邻接矩阵</p>
<p>邻接矩阵就像是二维数组，所以需要定义一个二维数组来存放顶点与顶点间的权值</p>
<p>还需要定义一些与图相关的信息，比如图的点数vexnum即顶点数，图的的边数arcnum等等</p>
<p>先写好需要定义或者需要用到的，并写在类中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXNUM 100<span class="comment">//顶点存放的最大容量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767<span class="comment">//表示无穷大，也可以直接用INT32_MAX</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AMGraph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string ves[MAXNUM];<span class="comment">//顶点表</span></span><br><span class="line">    <span class="keyword">int</span> arcs[MAXNUM][MAXNUM];<span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;<span class="comment">//图的点数和边数</span></span><br><span class="line">    <span class="comment">//创建邻接矩阵</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//遍历打印图</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_AMGraph</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建邻接矩阵"><a href="#创建邻接矩阵" class="headerlink" title="创建邻接矩阵"></a>创建邻接矩阵</h3><p>这里传入一个二维数组来创建邻接矩阵，如果一个一个数据手动输入的话太过于麻烦。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建邻接矩阵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(string c[],<span class="keyword">int</span> data[][MAXNUM],<span class="keyword">int</span> vexnum,<span class="keyword">int</span> arcnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;vexnum=vexnum;</span><br><span class="line">    <span class="keyword">this</span>-&gt;arcnum=arcnum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ves[i]=c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;vexnum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;arcs[i][j]=data[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="遍历打印邻接矩阵"><a href="#遍历打印邻接矩阵" class="headerlink" title="遍历打印邻接矩阵"></a>遍历打印邻接矩阵</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_AMGraph</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexnum;i++)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\t&quot;</span>&lt;&lt;ves[i];</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ves[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;vexnum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arcs[i][j]==INF)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;∞\t&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;arcs[i][j]&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p>按照其存储结构</p>
<p>需要有边结点和顶点结点</p>
<p>顶点结点：</p>
<ul>
<li>  顶点结点相当于链表的头结点</li>
</ul>
<p>边结点：</p>
<ul>
<li>  边结点相当于链表除头结点以外的结点</li>
</ul>
<img src="/2021/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Graph/%E7%94%9F%E6%88%90%E5%9B%BE/%E5%9B%BE/邻接表.png" alt="邻接表" style="zoom: 50%;">

<p>这里顶点结点所连的一串结点，都是与顶点结点相连的顶点，比如：A顶点，与B和E顶点相连，而B顶点的索引是1，E顶点的索引是4，最后一个结点的next指针要置空</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//邻接表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdjList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//边结点(相当于链表的其他结点)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> adjvex;<span class="comment">//该边顶点的编号</span></span><br><span class="line">        ArcNode* nextarc;<span class="comment">//指向下一条边</span></span><br><span class="line">        <span class="keyword">int</span> weight;<span class="comment">//权值</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//顶点结点(相当于链表的头结点)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> data;<span class="comment">//顶点数据</span></span><br><span class="line">        ArcNode* firstnext;<span class="comment">//下一个顶点</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//邻接表头顶点数组</span></span><br><span class="line">    VNode vertices[MAXNUM];</span><br><span class="line">    <span class="comment">//顶点数、边数</span></span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;</span><br><span class="line">    <span class="comment">//创建邻接表</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//遍历打印</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_Graph</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建邻接表"><a href="#创建邻接表" class="headerlink" title="创建邻接表"></a>创建邻接表</h3><p>这里还是传入二维数组来创建</p>
<p>这里有点小坑，头结点和其他结点数据类型不同，所以只能用头插</p>
<p>跟链表插入一个新结点差不多</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">(<span class="keyword">int</span> data[][MAXNUM],<span class="keyword">int</span> vexnum,<span class="keyword">int</span> arcnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;vexnum=vexnum;</span><br><span class="line">    <span class="keyword">this</span>-&gt;arcnum=arcnum;</span><br><span class="line">    <span class="comment">//初始化邻接表全部表头结点的next指针为null</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexnum;i++)</span><br><span class="line">        <span class="keyword">this</span>-&gt;vertices[i].firstnext=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//头插法添加（因为头结点和其他结点类型不同，所以只能用头插）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;vertices[i].data=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=vexnum<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//赋值，并将边结点添加到表头结点的next下</span></span><br><span class="line">            <span class="keyword">if</span>(data[i][j]!=<span class="number">0</span>&amp;&amp;data[i][j]!=INF)</span><br><span class="line">            &#123;</span><br><span class="line">                ArcNode* s=<span class="keyword">new</span> ArcNode;</span><br><span class="line">                s-&gt;adjvex=j;</span><br><span class="line">                s-&gt;weight=data[i][j];</span><br><span class="line">                s-&gt;nextarc=<span class="keyword">this</span>-&gt;vertices[i].firstnext;</span><br><span class="line">                <span class="keyword">this</span>-&gt;vertices[i].firstnext=s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="遍历打印邻接表"><a href="#遍历打印邻接表" class="headerlink" title="遍历打印邻接表"></a>遍历打印邻接表</h3><p>没啥好说的，跟遍历打印链表差不多，只不过这里是链表数组而已</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_Graph</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>-&gt;vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//声明局部变量指针遍历</span></span><br><span class="line">        ArcNode* t=<span class="keyword">this</span>-&gt;vertices[i].firstnext;</span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        cout&lt;&lt;<span class="keyword">this</span>-&gt;vertices[i].data&lt;&lt;<span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(t)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;t-&gt;adjvex&lt;&lt;<span class="string">&quot;[&quot;</span>&lt;&lt;t-&gt;weight&lt;&lt;<span class="string">&quot;]&quot;</span>&lt;&lt;<span class="string">&quot; -&gt; &quot;</span>;</span><br><span class="line">            t=t-&gt;nextarc;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot; ^ &quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>数据结构</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>字典树</title>
    <url>/2021/12/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/%E5%AD%97%E5%85%B8%E6%A0%91/%E5%AD%97%E5%85%B8%E6%A0%91/</url>
    <content><![CDATA[<h1 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h1><p>字典树</p>
<p>例如：存几个单词“ word ”、“ world ”、“ work ”</p>
<img src="/2021/12/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/%E5%AD%97%E5%85%B8%E6%A0%91/%E5%AD%97%E5%85%B8%E6%A0%91/Tire例子.png" alt="Tire例子" style="zoom: 50%;">

<p>存储方式就像是一颗树</p>
<p>每个结点都有一层数组，在第p层，而每个结点<code>son[p][u]</code> 都是存储下一个结点在第几层</p>
<p>假设依次存储三个单词：“abc” ，“abd” ，“acb”</p>
<img src="/2021/12/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Tree/%E5%AD%97%E5%85%B8%E6%A0%91/%E5%AD%97%E5%85%B8%E6%A0%91/Trie.gif" alt="Trie" style="zoom: 40%;">

<p><strong>模板：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"><span class="comment">// 0号点既是根节点，又是空节点</span></span><br><span class="line"><span class="comment">// son[][]存储树中每个节点的下一个节点在第几层</span></span><br><span class="line"><span class="comment">// cnt[]存储以每个节点结尾的单词数量，初始化为0</span></span><br><span class="line"><span class="comment">// idx当前最后一个加进来结点的层数</span></span><br><span class="line"><span class="comment">// 例如：将字母映射成0~25的下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">        p = son[p][u]; <span class="comment">//跳转到第p层</span></span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询字符串出现的次数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/2021/12/01/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BD%8D%E8%BF%90%E7%AE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="求整数-n-二进制的第-k-位"><a href="#求整数-n-二进制的第-k-位" class="headerlink" title="求整数$n$二进制的第$k$位"></a>求整数$n$二进制的第$k$位</h1><p><strong>结论：</strong><code>n &gt;&gt; k &amp; 1</code></p>
<blockquote>
<p>  例子：</p>
<p>  10的二进制数是1010</p>
<p>  <code>10 &gt;&gt; 1</code>  —&gt;  101</p>
<p>  <code>10 &gt;&gt; 2</code>  —&gt;  10</p>
<p>  <code>10 &gt;&gt; 3</code>  —&gt;  1</p>
<p>  <code>10 &gt;&gt; 4</code>  —&gt;  0</p>
<p>  我把它们理解成在前面补零，比如<code>10 &gt;&gt; 2</code>  —&gt;  0010</p>
</blockquote>
<blockquote>
<p>  <code>&amp;</code>按位与</p>
<p>  只有一种情况是1，凡是出现0都为0</p>
<p>  <code>1 &amp; 1 = 1</code></p>
<p>  <code>0 &amp; 1 = 0</code></p>
<p>  <code>1 &amp; 0 = 0</code></p>
<p>  <code>0 &amp; 0 = 0</code></p>
</blockquote>
<h1 id="求整数二进制中出现1的次数"><a href="#求整数二进制中出现1的次数" class="headerlink" title="求整数二进制中出现1的次数"></a>求整数二进制中出现1的次数</h1><p><strong>结论：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回最后一位1，包括1后面的所有0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>  <code>-x = ~x + 1</code></p>
<p>  例如：</p>
<p>  <code>x = 1011</code></p>
<p>  <code>~x = 0100</code></p>
<p>  <code>~x + 1 = 0101</code></p>
<p>  即 -11=0101</p>
</blockquote>
<h1 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h1><p>按位与操作，<code>0 &amp; 0 = 0</code>，<code>0 &amp; 1 = 0</code>，<code>1 &amp; 0 = 0</code>，<code>1 &amp; 1 = 1</code></p>
<p><code>x &amp; 1</code> 可以取最低位</p>
<blockquote>
<p>  例如：</p>
<p>  0 &amp; 1 = 0</p>
<p>  1 &amp; 1 = 1</p>
<p>  2 &amp; 1 = 10 &amp; 01 = 0</p>
<p>  3 &amp; 1 = 11 &amp; 01 = 1</p>
</blockquote>
<h1 id><a href="#" class="headerlink" title="^"></a>^</h1><p>异或操作，如果a、b两个值不相同，则异或结果为1。如果a、b两个值相同，异或结果为0。</p>
<p><code>x ^ 1</code> ==&gt; 可以加1，和减1 操作</p>
<blockquote>
<p>  例如：</p>
<p>  0 ^ 1 = 0 ^ 1 =1</p>
<p>  1 ^ 1 = 1 ^ 1 = 0</p>
<p>  2 ^ 1 = 10 ^ 01= 11</p>
<p>  3 ^ 1 = 11 ^ 01 = 10</p>
</blockquote>
<p>以此类推，可以发现 0 和 1，2 和 3，4 和 5，6 和 7，8 和 9，10 和 11 … …为一对</p>
<p><code>x ^ 0 = x</code> 好像没啥卵用 <code>0 ^ 0</code></p>
<blockquote>
<p>  0 ^ 0 = 0</p>
<p>  1 ^ 0 = 1</p>
<p>  2 ^ 0 = 10 ^ 00 = 10</p>
<p>  3 ^ 0 = 11 ^ 00 = 11</p>
</blockquote>
]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2021/11/09/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h1><p>应用：</p>
<ul>
<li><p>  搜索元素或区间</p>
</li>
<li><p>  查找中位数</p>
</li>
</ul>
<p><strong>二分查找核心</strong>：通过不断取数组中间索引来确定收缩搜索区间</p>
<p>二分法搜索思路：</p>
<ul>
<li><p>（一）利用以下公式来确定数组中间索引，left和 right为区间左、右索引</p>
<p>  <code>int mid = (left + right) / 2</code>  此公式left+right容易溢出</p>
<p>  所以，使用这公式，以防止溢出</p>
<p>  <code>int mid = left + (right - left) / 2</code></p>
<p>  <img src="/2021/11/09/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%BF%94%E5%9B%9E%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC.gif" alt="二分查找返回从左到右第一个值"></p>
</li>
<li><p>  （二）根据mid处值的判断条件，来确定<strong>向左收缩</strong>还是<strong>向右收缩</strong></p>
</li>
</ul>
<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找区间左端点</span></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//if(q[mid]&gt;=key) r = mid;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找区间右端点</span></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//if(q[mid]&lt;=key) l = mid;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="边界问题"><a href="#边界问题" class="headerlink" title="边界问题"></a>边界问题</h1><p>在选择查找区间左端点时，mid 一定不能选 r ，因为当只有两个数时，<code>l</code> 指针在左值，mid 和 r 指针在右值，如果这时 <code>mid = l + r + 1 &gt;&gt; 1</code>，即是上取整，那么 mid 还是等于 r 。同理，在查找区间右端点时，mid 如果<code>mid = l + r &gt;&gt; 1</code>，<code>l</code> 和 mid 指针在左值，r 指针在右值，同理，mid一直等于 <code>l</code></p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="查找数组中target的区间"><a href="#查找数组中target的区间" class="headerlink" title="查找数组中target的区间"></a>查找数组中target的区间</h2><ul>
<li><p>  需要确定区间开始时的索引和结束时的索引</p>
</li>
<li><p>  需要分开来算</p>
</li>
<li><p>需要注意的问题：</p>
<ul>
<li>当<code>nums[mid] == target</code>时<ul>
<li>  再判断边界问题</li>
</ul>
</li>
<li>当<code>nums[mid] &gt; target</code>时<ul>
<li>  <code>right = mid - 1</code>  收缩右边</li>
</ul>
</li>
<li>当<code>nums[mid] &lt; target</code>时<ul>
<li>  <code>left = mid - 1</code>  收缩左边</li>
</ul>
</li>
<li>  求target区间左索引时，应注意当<code>nums[mid] == target</code>时执行的程序</li>
</ul>
</li>
</ul>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//返回target区间</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="built_in">searchStart</span>(nums,target);</span><br><span class="line">        <span class="keyword">int</span> right =<span class="built_in">searchEnd</span>(nums,target);</span><br><span class="line">        <span class="keyword">return</span> &#123;left,right&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找开始的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchStart</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="comment">//数组左右索引</span></span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//收缩</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(right+left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mid==<span class="number">0</span>||nums[mid<span class="number">-1</span>]&lt;target)</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                right=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                right=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找结束的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchEnd</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="comment">//数组左右索引</span></span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//收缩</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(right+left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mid==nums.<span class="built_in">size</span>()<span class="number">-1</span>||nums[mid+<span class="number">1</span>]&gt;target)</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                right=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>







<h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4.寻找两个正序数组的中位数"></a>4.寻找两个正序数组的中位数</h2><p>给定两个有序数组求其中位数</p>
<p>需要解决的问题：</p>
<p><img src="/2021/11/09/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/%E6%9F%A5%E6%89%BE%E4%B8%AD%E4%BD%8D%E6%95%B0%E5%9B%9B%E5%A4%A7%E9%97%AE%E9%A2%98.png"></p>
]]></content>
      <categories>
        <category>搜索算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>区间合并</title>
    <url>/2021/12/12/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<h1 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h1><p><a href="https://www.acwing.com/problem/content/description/805/">AcWing 803. 区间合并</a></p>
<p>给定 $n$ 个区间 $[l_i,r_i]$，要求合并所有有交集的区间。</p>
<p>注意如果在端点处相交，也算有交集。</p>
<p>输出合并完成后的区间个数。</p>
<p>例如：$[1,3]$ 和 $[2,6]$ 可以合并为一个区间 $[1,6]$ 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line">    l=<span class="number">-2e9</span>,r=<span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;a[i].first) <span class="comment">// 只需判断扩张区间是不是断了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l!=<span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;l,r&#125;); <span class="comment">// 第一次的时候，肯定是不执行的，所以这个是存入上一次的合并区间</span></span><br><span class="line">            l=a[i].first,r=a[i].second; <span class="comment">// 那合并区间断了，肯定要重新定左端点和右端点啊</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r=<span class="built_in">max</span>(r,a[i].second); <span class="comment">// 没断的话，取右端点最大值就好了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l!=<span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;l,r&#125;); <span class="comment">//因为是存入上一次的合并区间，所以这次的还没存</span></span><br><span class="line">    a=res; <span class="comment">// 结果数组赋值回去罢了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>区间和并</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和 和 差分</title>
    <url>/2021/12/20/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%20%E5%92%8C%20%E5%B7%AE%E5%88%86/%E5%89%8D%E7%BC%80%E5%92%8C%20%E5%92%8C%20%E5%B7%AE%E5%88%86/</url>
    <content><![CDATA[<h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h2 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h2><p>求<code>[l, r]</code>之和 $\sum_{i=l}^{r}{a_i}=a_l+a_{l+1}+…+a_r$</p>
<p><strong>结论：</strong>$$S_{lr} = S_r - S_{l-1}$$</p>
<p>推导：</p>
<blockquote>
<p>  $$S_r=a_1+a_2+…+a_{l-1}+a_l+…+a_r$$</p>
<p>  $$S_{l-1}=a_1+a_2+…+a_{l-1}$$</p>
<p>  即：</p>
<p>  $$S = S_r - S_{l-1}$$</p>
<p>  $$S = a_l+a_{l+1}+…+a_r$$</p>
</blockquote>
<h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><p>求<code>(x1, y1) ~ (x2, y2)</code>前缀和</p>
<blockquote>
<p>  初始化的二维前缀和：</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">       s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j];</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>结论：</strong>$$S=S-S_{x_2,y_1-1}-S_{x_1-1,y_2}+S_{x_1-1,y_1-1}$$</p>
<p>即：<code>s = s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]</code></p>
<img src="/2021/12/20/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%20%E5%92%8C%20%E5%B7%AE%E5%88%86/%E5%89%8D%E7%BC%80%E5%92%8C%20%E5%92%8C%20%E5%B7%AE%E5%88%86/二维子矩阵前缀和.png" alt="二维子矩阵前缀和" style="zoom:70%;">



<h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><p>差分数组前n项和即为前缀和，其实就是前缀和的逆运算</p>
<h2 id="一维差分数组"><a href="#一维差分数组" class="headerlink" title="一维差分数组"></a>一维差分数组</h2><p><strong>给区间$[l, r]$中的每个数加上c：</strong>（例题：ACWing 797.差分）</p>
<p><strong>结论：</strong><code>b[l] += c, b[r + 1] -= c</code></p>
<p>只要<code>b[l]</code>加上 c，则 <code>l</code> 后面的前 n 项和都加上 c 了，所以要在 <code>b[r + 1]</code> 减上 c ，才能持 0</p>
<p>设 $a_n$ 为 $b_n$ 的前n项和，则</p>
<p>既然差分是前缀和的逆运算，那么可以用上诉结论来逆运算出<code>b[]</code> </p>
<p>即：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">	b[i]+=c;</span><br><span class="line">    b[i+<span class="number">1</span>]-=c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果输出时，只需要对<code>b[]</code> 用一维前缀和公式即可</p>
<h2 id="二维差分数组"><a href="#二维差分数组" class="headerlink" title="二维差分数组"></a>二维差分数组</h2><p>给以<code>(x1, y1)</code>为左上角，<code>(x2, y2)</code>为右下角的子矩阵中的所有元素加上c：<br><strong>结论：</strong><code>S[x1, y1] += c, S[x2 + 1, y1] -= c, S[x1, y2 + 1] -= c, S[x2 + 1, y2 + 1] += c</code></p>
<p>设 <code>a[][]</code> 为 <code>b[][]</code> 的前缀和</p>
<img src="/2021/12/20/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%89%8D%E7%BC%80%E5%92%8C%20%E5%92%8C%20%E5%B7%AE%E5%88%86/%E5%89%8D%E7%BC%80%E5%92%8C%20%E5%92%8C%20%E5%B7%AE%E5%88%86/二维差分矩阵.png" alt="二维差分矩阵" style="zoom:67%;">

<p>即为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b[x1][y1]+=c;</span><br><span class="line">    b[x2+<span class="number">1</span>][y1]-=c;</span><br><span class="line">    b[x1][y2+<span class="number">1</span>]-=c;</span><br><span class="line">    b[x2+<span class="number">1</span>][y2+<span class="number">1</span>]+=c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化可以为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="built_in">insert</span>(i,j,i,j,a[i][j]);</span><br></pre></td></tr></table></figure>

<p>输出结果，同样是二维前缀和</p>
]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>前缀和</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度算法</title>
    <url>/2021/12/01/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="高精度算法"><a href="#高精度算法" class="headerlink" title="高精度算法"></a>高精度算法</h1><ul>
<li>  <code>+</code></li>
<li>  <code>-</code></li>
<li>  <code>×</code></li>
<li>  <code>÷</code></li>
</ul>
<p>思路：</p>
<ul>
<li>  用字符串接收，转成数组，然后对每一位处理</li>
<li>  过程模拟用手算的思维</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;a, vector&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string A, B;</span><br><span class="line">    cin &gt;&gt; A &gt;&gt; B;</span><br><span class="line">    <span class="comment">//小端模式（个位在前）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        a.<span class="built_in">push_back</span>(A[i] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">//比如&quot;1234&quot; --&gt; [4,3,2,1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = B.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        b.<span class="built_in">push_back</span>(B[i] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">//同理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将数组倒序，需要包含头文件<code>#include&lt;algorithm&gt;</code></p>
<p>调用<code>reverse(a.begin(),a.end())</code></p>
<p>传进去的参数是数组范围<strong>左闭右开</strong></p>
<h1 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h1><p><strong>模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C = A + B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;a, vector&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>; <span class="comment">//进位标志刚开始肯定是0</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>() || i &lt; b.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; a.<span class="built_in">size</span>()) <span class="comment">// a还没到尽头就加上</span></span><br><span class="line">            t += a[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; b.<span class="built_in">size</span>()) <span class="comment">// b还没到尽头就加上</span></span><br><span class="line">            t += b[i];</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>); <span class="comment">//加得的数如果大于10，那么只保留个位作为当前位的数字，比如3和13取模10，结果一样是3</span></span><br><span class="line">        t /= <span class="number">10</span>; <span class="comment">// 进位标志</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扫尾，避免比如20+80=100等类似的情况</span></span><br><span class="line">    <span class="keyword">if</span> (t)</span><br><span class="line">        c.<span class="built_in">push_back</span>(<span class="number">1</span>); </span><br><span class="line">    <span class="keyword">return</span> c; <span class="comment">//返回的是倒序的数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h1><p>减法需要注意的是有负号的问题，所以这里要分开处理，多加一个比较函数，<strong>让大减小，最后答案输出时加上负号</strong></p>
<p>比较函数参考：</p>
<p>a大则返回 true</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;a, vector&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="built_in">size</span>() != b.<span class="built_in">size</span>())</span><br><span class="line">        <span class="keyword">return</span> a.<span class="built_in">size</span>() &gt; b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (a[i] != b[i])</span><br><span class="line">            <span class="keyword">return</span> a[i] &gt; b[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>模板</strong></p>
<p><strong>大（a）减小（b）</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;a, vector&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = a[i] - t; <span class="comment">// 一开始先减去借位1或0</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; b.<span class="built_in">size</span>())</span><br><span class="line">            t -= b[i];</span><br><span class="line">        c.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>); <span class="comment">//当t&lt;10的时候，t%10; 当t&gt;=10的时候，(t+10)%10，比如13和3求余结果都一样</span></span><br><span class="line">        <span class="comment">//判断借位标志</span></span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>)</span><br><span class="line">            t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去掉前导0</span></span><br><span class="line">    <span class="keyword">while</span> (c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>) <span class="comment">// a-b的数有可能是==0，那剩余1位数的时候就不能再删掉那个0了</span></span><br><span class="line">        c.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果出现负数减法的话，可以转化为加法处理</p>
<h1 id="加法和减法测试模板"><a href="#加法和减法测试模板" class="headerlink" title="加法和减法测试模板"></a>加法和减法测试模板</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//比较函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;a, vector&lt;<span class="keyword">int</span>&gt; &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="built_in">size</span>() != b.<span class="built_in">size</span>())</span><br><span class="line">        <span class="keyword">return</span> a.<span class="built_in">size</span>() &gt; b.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (a[i] != b[i])</span><br><span class="line">            <span class="keyword">return</span> a[i] &gt; b[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string A, B;</span><br><span class="line">    cin &gt;&gt; A &gt;&gt; B;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line">    <span class="comment">//小端模式（个位在前）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        a.<span class="built_in">push_back</span>(A[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = B.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        b.<span class="built_in">push_back</span>(B[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; c = <span class="built_in">add</span>(a, b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>;i &gt;= <span class="number">0</span>; i--) cout &lt;&lt; c[i];</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="comment">/*if (cmp(a, b))</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        auto c = sub(a, b);</span></span><br><span class="line"><span class="comment">        for (int i = c.size() - 1; i &gt;= 0; i--)</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; c[i];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        auto c = sub(b, a);</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; &quot;-&quot;;</span></span><br><span class="line"><span class="comment">        for (int i = c.size() - 1; i &gt;= 0; i--)</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; c[i];</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="高精度乘低精度"><a href="#高精度乘低精度" class="headerlink" title="高精度乘低精度"></a>高精度乘低精度</h1><p><strong>模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C = A * b, A &gt;= 0, b &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>; <span class="comment">//进位标志</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>() || t; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; a.<span class="built_in">size</span>())</span><br><span class="line">            t += a[i] * b; <span class="comment">// 先b*a[i]再+进位标志</span></span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>); <span class="comment">//跟加法一样，留下余数</span></span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//去除前导0</span></span><br><span class="line">    <span class="keyword">while</span> (c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>)</span><br><span class="line">        c.<span class="built_in">pop_back</span>(); <span class="comment">//比如：12345*0 那结果就是00000</span></span><br><span class="line">    <span class="keyword">return</span> c; <span class="comment">//返回的是倒序结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果高精度乘高精度的话，其实可以模拟高精度乘低精度的过程，我是这么想的：取位数比较多的数<code>a[]</code>作为固定的乘数，然后用一层循环，将为位数较少的数<code>b[]</code>，每次取一位数乘<code>a[]</code>，第一次取数时，$b[0]*10^0$，第二次取数时，$b[1]*10^1$，第n-1次取数时，<code>b[i]*pow(10,i)</code>，同样模拟手算过程，然后再用几次高精度加法即可</p>
<h1 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h1><p><strong>模板</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从后往前，因为除法从高位开始算起，而后面是高位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + a[i]; <span class="comment">//下一个被除数就是上一次的商*10再加上下一位数字</span></span><br><span class="line">        c.<span class="built_in">push_back</span>(r / b); <span class="comment">//将商存入</span></span><br><span class="line">        r = r % b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反转，变成前面是高位</span></span><br><span class="line">    <span class="built_in">reverse</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//去除前导0</span></span><br><span class="line">    <span class="keyword">while</span> (c.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; c.<span class="built_in">back</span>() == <span class="number">0</span>)</span><br><span class="line">        c.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="乘法和除法测试模板"><a href="#乘法和除法测试模板" class="headerlink" title="乘法和除法测试模板"></a>乘法和除法测试模板</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string A;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    cin &gt;&gt; A &gt;&gt; b;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="comment">//小端方式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        a.<span class="built_in">push_back</span>(A[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    <span class="keyword">auto</span> c = <span class="built_in">mul</span>(a, b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        cout &lt;&lt; c[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    <span class="comment">/*int r;//商</span></span><br><span class="line"><span class="comment">    auto c=div(a,b,r);</span></span><br><span class="line"><span class="comment">    for(int i=c.size()-1;i&gt;=0;i--) cout&lt;&lt;c[i];</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl&lt;&lt;r;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>高精度算法</tag>
      </tags>
  </entry>
  <entry>
    <title>拓扑排序</title>
    <url>/2021/12/17/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><p>时间复杂度 $O(n+m)$ ， $n$ 表示点数，$m$ 表示边数<br>模板题：<a href="https://www.acwing.com/problem/content/850/">AcWing 848. 有向图的拓扑序列</a><br>思路：（宽搜 + 删点）</p>
<ul>
<li>（队列初始化）先让所有入度为 0 的点入队</li>
<li>while(队列非空)<ul>
<li>获取队头并弹出</li>
<li>更新该点的邻接点的入度<ul>
<li>将入度为 0 的点入队</li>
</ul>
</li>
</ul>
</li>
<li>如果所有点都入过队了，说明存在拓扑序列；否则不存在拓扑序列。</li>
</ul>
<p>最好用模拟队列实现，因为方便</p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> d[N];<span class="comment">// 结点的入度</span></span><br><span class="line"><span class="keyword">int</span> que[N]; <span class="comment">// 模拟队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宽搜思想 + 删除结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fr = <span class="number">0</span>, re = <span class="number">-1</span>; <span class="comment">// 还没加进去元素时，队尾设为-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// d[i] 存储点i的入度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (!d[i])</span><br><span class="line">            que[++re] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fr &lt;= re)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = que[fr++]; <span class="comment">// 获取队头并弹出</span></span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 更新删除 t 结点后所有点的入度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (-- d[j] == <span class="number">0</span>)</span><br><span class="line">                que[++re] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。</span></span><br><span class="line">    <span class="keyword">return</span> re == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搜索与图论</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>拓扑排序</tag>
      </tags>
  </entry>
  <entry>
    <title>二分图</title>
    <url>/2021/12/21/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h1><img src="/2021/12/21/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/%E4%BA%8C%E5%88%86%E5%9B%BE/二分图例子.png" alt="二分图例子" style="zoom:67%;">
<img src="/2021/12/21/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E4%BA%8C%E5%88%86%E5%9B%BE/%E4%BA%8C%E5%88%86%E5%9B%BE/二分图.png" alt="二分图" style="zoom:67%;">

<h1 id="染色法"><a href="#染色法" class="headerlink" title="染色法"></a>染色法</h1><p>时间复杂度是 $O(n+m)$ ， $n$ 表示点数， $m$ 表示边数</p>
<p>思路：</p>
<ul>
<li>初始化各点为未染色</li>
<li>枚举每个点<ul>
<li>if 该点 a 未被染色<ul>
<li>进行染色并判断是否发生矛盾<br>而这里是采用递归染色， dfs 的思路是：</li>
</ul>
</li>
</ul>
</li>
<li>先将当前结点 $u$ 染色</li>
<li>遍历点 $u$ 的所有邻接点<ul>
<li>if 该点未染色<ul>
<li>dfs 染色，且判断他的邻接点及其后的点染色是否发生矛盾</li>
</ul>
</li>
<li>else if 如果该点已经被染色了，那判断该点是否与点 $u$ 颜色相同</li>
</ul>
</li>
</ul>
<p>模版题：<a href="https://www.acwing.com/problem/content/862/">AcWing 860. 染色法判定二分图</a></p>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n;      <span class="comment">// n表示点数</span></span><br><span class="line"><span class="keyword">int</span> h[N], e[M], ne[M], idx;     <span class="comment">// 邻接表存储图</span></span><br><span class="line"><span class="keyword">int</span> color[N];       <span class="comment">// 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数：u表示当前节点，c表示当前点的颜色</span></span><br><span class="line"><span class="comment">// 将点 u 染成c号色，并将点 u 下的点按二分图规则染色</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    color[u] = c; <span class="comment">//染色</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (color[j] == <span class="number">-1</span>) <span class="comment">// 点j未染色</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(j, !c)) <span class="comment">// 如果在此过程中有一个地方发生矛盾，则肯定不是二分图</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (color[j] == c) <span class="comment">// 如果该点已经被染色了，且与点u颜色相同，那肯定有矛盾</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断邻接表是否为二分图</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(color, <span class="number">-1</span>, <span class="keyword">sizeof</span> color); <span class="comment">//初始化染色数组</span></span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) <span class="comment">// 枚举每个点，防止图不是连通图</span></span><br><span class="line">        <span class="keyword">if</span> (color[i] == <span class="number">-1</span>) <span class="comment">// 如果未被染色，则深度优先染色</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(i, <span class="number">0</span>)) <span class="comment">// 进行染色且返回是否染色没发生矛盾</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h1><p>时间复杂度是 $O(nm)$ ， $n$ 表示点数，$m$ 表示边数</p>
<p>模版题：<a href="https://www.acwing.com/problem/content/863/">AcWing 861. 二分图的最大匹配</a></p>
<p>按照 y 总的思路，将左半部集合看成是男生，右半部看成女生，逐一给他们牵红线，如果遇到喜欢同一个女生，则看看上家有没有其他备胎可选</p>
<p>核心还是递归</p>
<p>思路：</p>
<ul>
<li>初始化所有女孩的配对都为 0</li>
<li>遍历所有男生<ul>
<li>重置每个女生配对预选人</li>
<li>（递归）寻找该男生的配对，并判断能否找到心仪对象<br>递归配对思路：</li>
</ul>
</li>
<li>遍历该男生心仪女孩<ul>
<li>如果未被遍历，则设置为已遍历<ul>
<li>如果如果女孩j没有男朋友，或者她原来的男朋友能够匹配其它喜欢的女孩。配对成功</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/chzarles/images/raw/master/imgs/006eb5E0gy1g7y35ngyr5g311v0j67jy.gif" alt="匈牙利算法"></p>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n1, n2;     <span class="comment">// n1表示第一个集合（左集合）中的点数，n2表示第二个集合（右集合）中的点数</span></span><br><span class="line">                <span class="comment">// n1的点作为槽，n2的点作为邻接点</span></span><br><span class="line"><span class="keyword">int</span> h[N], e[M], ne[M], idx; <span class="comment">// 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边</span></span><br><span class="line"><span class="keyword">int</span> match[N];    <span class="comment">// 存储右集合中的每个点当前匹配的左集合中的点是哪个</span></span><br><span class="line">                 <span class="comment">// match[j]=a,表示女孩j的现有配对男友是a</span></span><br><span class="line"><span class="keyword">bool</span> st[N];     <span class="comment">// 表示模拟匹配时，右集合中的每个点是否已经被遍历过</span></span><br><span class="line">                <span class="comment">// st[]数组我称为临时预定数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找点x的匹配值</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 遍历自己喜欢的女孩</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = e[i];</span><br><span class="line">        <span class="comment">// 如果在这一轮模拟匹配中,这个女孩尚未被预定</span></span><br><span class="line">        <span class="keyword">if</span> (!st[j]) <span class="comment">// 如果该女生未被遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//如果女孩j没有男友，或者她原来的男友能够预定其它喜欢的女孩。配对成功</span></span><br><span class="line">            <span class="comment">// 这里 match[j]就是女生 j 的男友</span></span><br><span class="line">            <span class="keyword">if</span> (match[j] == <span class="number">0</span> || <span class="built_in">find</span>(match[j])) <span class="comment">// 如果他不在已确认的点中 或 这个点能找到下家</span></span><br><span class="line">            &#123;</span><br><span class="line">                match[j] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自己中意的全部都被预定了。配对失败。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 遍历所有男生</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n1; i ++ ) <span class="comment">// 遍历左集合的每一个点</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//因为每次模拟匹配的预定情况都是不一样的所以每轮模拟都要初始化</span></span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(i)) res ++ ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>匈牙利算法的优势：</p>
<p>匈牙利算法中，一个有伴侣的人，无论男女，<strong>不会重新变成单身狗</strong></p>
]]></content>
      <categories>
        <category>搜索与图论</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>树与图遍历</title>
    <url>/2021/12/17/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%A0%91%E4%B8%8E%E5%9B%BE%E9%81%8D%E5%8E%86/%E6%A0%91%E4%B8%8E%E5%9B%BE%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="树与图遍历"><a href="#树与图遍历" class="headerlink" title="树与图遍历"></a>树与图遍历</h1><p>时间复杂度 $O(n+m)$ ， $n$ 表示点数，$m$ 表示边数</p>
<h3 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h3><p>模板题：<a href="https://www.acwing.com/problem/content/848/">AcWing 846. 树的重心</a></p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>; <span class="comment">// vis[u] 表示点u已经被遍历过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j]) <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="宽度优先遍历"><a href="#宽度优先遍历" class="headerlink" title="宽度优先遍历"></a>宽度优先遍历</h3><p>模板题：<a href="https://www.acwing.com/problem/content/849/">AcWing 847. 图中点的层次</a></p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">vis[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 表示1号点已经被遍历过</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!vis[j])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[j] = <span class="literal">true</span>; <span class="comment">// 表示点j已经被遍历过</span></span><br><span class="line">            q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>搜索与图论</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>树与图遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路径汇总</title>
    <url>/2021/12/17/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h1 id="最短路径汇总"><a href="#最短路径汇总" class="headerlink" title="最短路径汇总"></a>最短路径汇总</h1><img src="/2021/12/17/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/最短路径.png" alt="最短路径" style="zoom: 50%;">

<h1 id="遍历点"><a href="#遍历点" class="headerlink" title="遍历点"></a>遍历点</h1><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>基本思路：（基于贪心）</p>
<ul>
<li>  先初始化所有点到根结点的距离为正无穷，每个点是否确认为最短路径的点初始化为 $false$</li>
<li>  将1号点到根结点的距离初始化为0，默认从1号点到n号点</li>
<li>迭代 $n-1$ 次（或 用堆的大小判断循环结束）<ul>
<li>  寻找当前 <code>dist[]</code> 中路径最小值，并保存其下标 <code>t</code></li>
<li>  用 <code>t</code> 更新其他点的距离</li>
<li>  将点 <code>t</code> 设为最短路径上的点<h2 id="朴素Dijkstra算法"><a href="#朴素Dijkstra算法" class="headerlink" title="朴素Dijkstra算法"></a>朴素Dijkstra算法</h2></li>
</ul>
</li>
</ul>
<p>时间复杂是 $O(n^2+m)$， $n$ 表示点数，$m$ 表示边数</p>
<p><strong><a href="https://www.bilibili.com/video/BV1zz4y1m7Nq?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">动画算法思路</a></strong></p>
<p>模板题：<a href="https://www.acwing.com/problem/content/851/">AcWing 849. Dijkstra求最短路 I</a></p>
<p>这里只需迭代 $n-1$ 次是因为要加入所有点，而加入 n 个点需要加入 $n-1$ 条边，其实迭代到最后只有一个点的时候，最后的点是无法再更新其他点到这个点的最短距离了，而每次更新距离数组的时候，都是存最小值，所以最后的 <code>dist[n]</code> 也必是最短的。当然，你迭代 n 次也没错</p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> g[N][N];  <span class="comment">// 存储每条边</span></span><br><span class="line"><span class="keyword">int</span> dist[N];  <span class="comment">// 存储1号点到每个点的最短距离</span></span><br><span class="line"><span class="keyword">bool</span> st[N];   <span class="comment">// 存储每个点的最短路是否已经确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自环不影响，重环的话取最短的即可</span></span><br><span class="line"><span class="comment">// 贪心 + 宽搜</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">// dist[]从1开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++ ) <span class="comment">// 循环n-1次</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">-1</span>;     <span class="comment">// 在还未确定最短路的点中，寻找距离最小的点</span></span><br><span class="line">        <span class="comment">// 寻找当前dist[]中路径最小值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) <span class="comment">// dist[]从1开始</span></span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j])) <span class="comment">// 没有被加入 且 t==-1 或 这次路径比上次最小路径小</span></span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用t更新其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) <span class="comment">// dist[]从1开始</span></span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 从1号点到不了n号点</span></span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="堆优化Dijkstra算法"><a href="#堆优化Dijkstra算法" class="headerlink" title="堆优化Dijkstra算法"></a>堆优化Dijkstra算法</h2><p>时间复杂度 $O(mlogn)$， $n$ 表示点数，$m$ 表示边数</p>
<p>模板题：<a href="https://www.acwing.com/problem/content/852/">AcWing 850. Dijkstra求最短路 II</a></p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span> <span class="comment">// 优先队列头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span> <span class="comment">// greater&lt;&gt;头文件</span></span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII; <span class="comment">//first是路径长度，second是结点编号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n; <span class="comment">// 点的数量</span></span><br><span class="line"><span class="keyword">int</span> h[N], w[N], e[N], ne[N], idx; <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="keyword">int</span> dist[N]; <span class="comment">// 存储所有点到1号点的距离</span></span><br><span class="line"><span class="keyword">bool</span> st[N]; <span class="comment">// 存储每个点的最短距离是否已确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 贪心（核心） + 宽搜 + 堆优化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap; <span class="comment">// 小根堆</span></span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);      <span class="comment">// first存储距离，second存储节点编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取路径最小的点</span></span><br><span class="line">        PII t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ver = t.second, distance = t.first;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>; <span class="comment">// 如果这个点已经确定为最短路径的点，则不执行以下操作了</span></span><br><span class="line">        st[ver] = <span class="literal">true</span>; <span class="comment">//设置该点为已确定最短路径</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 同样的，更新dist[]中每个点的最短路径，只不过这里是放入小根堆，小根堆会维护升序序列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; distance + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 从1号点到不了n号点</span></span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h1 id="遍历边"><a href="#遍历边" class="headerlink" title="遍历边"></a>遍历边</h1><h2 id="Bellman-Ford算法"><a href="#Bellman-Ford算法" class="headerlink" title="Bellman_Ford算法"></a>Bellman_Ford算法</h2><p>时间复杂度 $O(nm)$ ， $n$ 表示点数，$m$ 表示边数</p>
<p>模板题：<a href="https://www.acwing.com/problem/content/855/">AcWing 853. 有边数限制的最短路</a></p>
<p>思路：（基于离散数学）</p>
<ul>
<li>初始化所有点的距离到 1 号点的距离为正无穷，并设置 1 号点距离为 0</li>
<li>经过 1～n 条边（有边数限制 k 的话，替换成 k ）<ul>
<li>将上一轮各点的距离都备份一下</li>
<li>更新所有点到 1 号点的距离（松弛不等式）</li>
</ul>
</li>
</ul>
<p>⚠️注意更新所有点的距离时，每个点的距离都有可能被更新，所以判断返回值时需要以 <code>dist[n] &gt; INF / 2</code> 判断是否无最短路径<br>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;      <span class="comment">// n表示点数，m表示边数</span></span><br><span class="line"><span class="keyword">int</span> dist[N];   <span class="comment">// dist[x]存储1到x的最短路距离</span></span><br><span class="line"><span class="keyword">int</span> backup[N]; <span class="comment">// 存储1到x的最短距离的上一个状态</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b, w;</span><br><span class="line">&#125; e[N]; <span class="comment">// 边，a表示出点，b表示入点，w表示边的权重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1到n的最短路距离，如果无法从1走到n，则返回INF</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bellman_ford</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 只有n个点，如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="comment">// 经过不超过m条边，即最多经过m-1条边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(backup, dist, <span class="keyword">sizeof</span> dist); <span class="comment">// 将dist[]值复制一份到backup[]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a = e[j].a, b = e[j].b, w = e[j].w;</span><br><span class="line">            dist[b] = <span class="built_in">min</span>(dist[b], backup[a] + w); <span class="comment">// 松弛不等式（离散数学专业术语罢了）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否存在1~n的最短距离，这里要大于INF/2，因为有可能是第n号点加上了负权边</span></span><br><span class="line">    <span class="keyword">if</span> (dist[n] &gt; INF / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>注意：</strong>如果题目限制边数为 $k$ ，则 <code>backup[]</code> 一定得有，因为需要获取上一个状态的1到各点最短路径，即 经过 $k$ 条边时的最短路径 需要 经过 $k-1$ 条边时的1到各点最短路径 来确定</p>
<p>单纯只求最短路径的话，可以不需要 <code>backup[]</code> 数组，即修改 <code>for</code> 循环为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = e[j].a, b = e[j].b, w = e[j].w;</span><br><span class="line">        dist[b] = <span class="built_in">min</span>(dist[b], dist[a] + w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  其他都不用变，当然啦，一般题目<strong>有边数限制</strong>才用 $bellman$ 算法，否则其他算法（例如：SPFA算法）效率都比它更好</p>
</blockquote>
<h2 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h2><p>队列优化的 Bellman-Ford 算法</p>
<p>模板题：<a href="https://www.acwing.com/problem/content/853/">AcWing 851. spfa求最短路</a></p>
<p>时间复杂度  平均情况下 $O(m)$ ，最坏情况下 $O(nm)$ ， $n$ 表示点数，$m$ 表示边数</p>
<p>思路：（基于离散数学）</p>
<ul>
<li><p>同样的，初始化所有点到 1 号点距离为正无穷，且 1 号点距离为 0，并将 1 号点入队，将 1 号点设置为已在队列的标志</p>
</li>
<li><p>while(队列是否为空)</p>
<ul>
<li>取出队头 t ，并弹出</li>
<li>设置点 t 不在队列中</li>
<li>用点 t 更新各点到 1 号点到距离<ul>
<li>如果有比当前距离更短的（松弛不等式）<ul>
<li>更新且入队</li>
<li>设置该点在队列标志</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;	<span class="comment">// 总点数</span></span><br><span class="line"><span class="keyword">int</span> h[N], w[N], e[N], ne[N], idx;	<span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="keyword">int</span> dist[N];	<span class="comment">// 存储每个点到1号点的最短距离</span></span><br><span class="line"><span class="keyword">bool</span> st[N];		<span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bellman_ford宽搜改良（队列优化），遍历点的出边</span></span><br><span class="line"><span class="comment">// 基本思路大概是：用队列存已经遍历到的点，然后拿出来，宽搜其出边是否比dist[]中的小，小的话更新，且如果该点不在队列中就入队</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回INF</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">// 从1出发</span></span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>); <span class="comment">// 从1出发</span></span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 更新dist[]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i]) <span class="comment">// 遍历t结点中所有出边</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i]) <span class="comment">// 和dijkstra一样取最短（松弛不等式）</span></span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span> (!st[j])     <span class="comment">// 如果队列中已存在j，则不需要将j重复插入</span></span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == INF) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  <strong>注意</strong>这个SPFA算法是不能适用于<strong>有负环</strong>的题目的</p>
</blockquote>
<p><strong>SPFA怕判断图中是否存在负环</strong></p>
<p>时间复杂度是 $O(nm)$ ， $n$ 表示点数，$m$ 表示边数</p>
<p>模板题：<a href="https://www.acwing.com/problem/content/854/">AcWing 852. spfa判断负环</a></p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n;	<span class="comment">// 总点数</span></span><br><span class="line"><span class="keyword">int</span> h[N], w[N], e[N], ne[N], idx;	<span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="keyword">int</span> dist[N], cnt[N];	<span class="comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span></span><br><span class="line"><span class="keyword">bool</span> st[N];	<span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果存在负环，则返回true，否则返回false。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// dist[]不用初始化，因为不需要算出最短距离，且判断是否存在负环不需要用到里面的准确数据</span></span><br><span class="line">    <span class="comment">// 一般存在负环，他就死循环了，一直到 cnt[j] &gt;= n才出来，所以复杂度也相当高，和bellman算法一样</span></span><br><span class="line">    <span class="comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在负环</span></span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                cnt[j] = cnt[t] + <span class="number">1</span>; <span class="comment">// 从结点t出发到其出边的另一头顶点的步数就是加上1</span></span><br><span class="line">                <span class="keyword">if</span> (cnt[j] &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在负环</span></span><br><span class="line">                <span class="keyword">if</span> (!st[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  一般求是否存在负环问题，都不会用SPFA算法，因为相比 bellman 写法，复杂度一样，那肯定选代码量小一点的 bellman 算法呐</p>
</blockquote>
<h1 id="多源最短路"><a href="#多源最短路" class="headerlink" title="多源最短路"></a>多源最短路</h1><h2 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h2><p>基于DP思想，<a href="https://www.bilibili.com/video/BV1q4411M7r9?spm_id_from=333.1007.top_right_bar_window_history.content.click">算法思路</a>，空降7：45</p>
<p>时间复杂度是 $O(n^3)$ ， $n$ 表示点数</p>
<p>模板题：<a href="https://www.acwing.com/problem/content/856/">AcWing 854. Floyd求最短路</a></p>
<p>思路：</p>
<ul>
<li>基于 DP</li>
</ul>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">初始化：</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法结束后，d[a][b]表示a到b的最短距离</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span> <span class="comment">// 采用了滚动数组</span></span></span><br><span class="line"><span class="function"></span>&#123;	<span class="comment">// d[k,i,j]是i在1~k中到j的最短距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

























]]></content>
      <categories>
        <category>搜索与图论</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>最短路径</tag>
      </tags>
  </entry>
  <entry>
    <title>最小生成树汇总</title>
    <url>/2021/12/20/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><img src="/2021/12/20/%E7%AE%97%E6%B3%95/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/最小生成树.png" alt="最小生成树" style="zoom:67%;">



<h2 id="动画思路"><a href="#动画思路" class="headerlink" title="动画思路"></a><a href="https://www.bilibili.com/video/BV1Eb41177d1/">动画思路</a></h2><h1 id="朴素Prim算法"><a href="#朴素Prim算法" class="headerlink" title="朴素Prim算法"></a>朴素Prim算法</h1><p>稠密图</p>
<p>时间复杂度是 $O(n^2+m)$ ， $n$ 表示点数，$m$ 表示边数</p>
<p><strong>思路</strong>（与dijkstra算法相似）：</p>
<ul>
<li>  所有点到连通块（集合）的距离初始化为正无穷，即所有点初始时都不在连通块中</li>
<li>  选取任意一个点作为连通块中的一个点</li>
<li>迭代n次<ul>
<li>  每次找到 不在集合中 距离最小 的点 t（连通块是当前生成树）</li>
<li>  用 t 更新其他点的距离到连通块的距离</li>
<li>  把 t 加到集合中</li>
</ul>
</li>
</ul>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n;	<span class="comment">// n表示点数</span></span><br><span class="line"><span class="keyword">int</span> g[N][N];	<span class="comment">// 邻接矩阵，存储所有边</span></span><br><span class="line"><span class="keyword">int</span> dist[N];	<span class="comment">// 存储其他点到当前最小生成树的距离</span></span><br><span class="line"><span class="keyword">bool</span> st[N];		<span class="comment">// 存储每个点是否已经在生成树中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) <span class="comment">// 迭代n次（加入n个点）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 寻找与i直接联通的边最小值的点的下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) <span class="comment">// 这里j下标对应g[][]</span></span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j])) <span class="comment">// 这里一定会更新t的</span></span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="keyword">return</span> INF; <span class="comment">//如果最短的距离是INF那说明无法生成最小树了</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i) res += dist[t]; <span class="comment">// 先累加，因为如果先更新点t到其他点的距离，遇上负环的话，会把自己更新的更小</span></span><br><span class="line">        <span class="comment">// 把点加到连通块</span></span><br><span class="line">        st[t] = <span class="literal">true</span>; </span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 更新点t到其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h1><p>稀疏图</p>
<p>时间复杂度是 $O(mlogm) $， $n$ 表示点数，$m$ 表示边数</p>
<p><strong>思路</strong>（类似并查集）：</p>
<ul>
<li>  将所有边按权重从小到大排序</li>
<li>枚举每条边a,b 权重c<ul>
<li>if a,b不连通<ul>
<li>  将这条边加入连通块（集合）</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>具体可以参考动画思路，先按边的权重排序，如果点 a,b 不在集合中，则将这条边加入集合中，即将 点 a 的祖宗节点指向 b 即可（a 和 b 掉转也行），这样就能将 a 与 b 归为一个集合，重复上诉操作，而这样是不会有环的，因为每次只会加入一个点，而且已经加入的点是不会再更新的</p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n, m;       <span class="comment">// n是点数，m是边数</span></span><br><span class="line"><span class="keyword">int</span> fa[N];       <span class="comment">// 并查集的父节点数组</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>     // 存储边</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b, w;</span><br><span class="line">	<span class="comment">// 重载 小于号</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Edge &amp;e1)<span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; e1.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span>     <span class="comment">// 并查集核心操作, 查找x的祖宗结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] != x) fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) fa[i] = i;    <span class="comment">// 初始化并查集</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line"></span><br><span class="line">        a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (a != b)     <span class="comment">// 如果两个连通块不连通，则将这两个连通块合并</span></span><br><span class="line">        &#123;</span><br><span class="line">            p[a] = b; <span class="comment">// 归到一个集合中</span></span><br><span class="line">            res += w;</span><br><span class="line">            cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>搜索与图论</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>数论</title>
    <url>/2021/12/23/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/%E6%95%B0%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="shu-lun">数论</h1>
<h2 id="zhi-shu">质数</h2>
<p>方法：</p>
<ul>
<li>试除法判定质数</li>
<li>试除法分解质因数</li>
<li>埃氏筛法求素数</li>
<li>线性筛法求素数</li>
</ul>
<h2 id="shi-chu-fa-pan-ding-zhi-shu">试除法判定质数</h2>
<p>时间复杂度 $O(\sqrt{n})$</p>
<p>模板题：<a href="https://www.acwing.com/problem/content/description/868/">AcWing 866. 试除法判定质数</a></p>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断 x 是否为质数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 判断1和0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ ) <span class="comment">//从1～sqrt(x)里找即可</span></span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里只需遍历到 $\sqrt{x}$ 的原因是：<br>
一个数的因数都是<strong>成对存在的</strong>，即：<br>
$d&lt;={x}/{d}$    $d^2&lt;=x$    $d&lt;=\sqrt{x}$</p>
<p>例如12的因数有3和4，2 和6，所以我们可以只枚举较小的那一个，即 $\sqrt{x}$ ，假设较小的为d，较大的为 x/d<br>
其实我认为：$x$ 质因数边界就是 $\sqrt{x}$</p>
</blockquote>
<h2 id="shi-chu-fa-fen-jie-zhi-yin-shu">试除法分解质因数</h2>
<p>时间复杂度：$O(\sqrt{n})$</p>
<p>模板题：<a href="https://www.acwing.com/problem/content/869/">AcWing 867. 分解质因数</a></p>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt; <span class="comment">// 级数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">                cnt ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 扫尾</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ai-shi-shai-fa">埃氏筛法</h2>
<p><a href="https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95/374984?fr=aladdin#4">埃拉托斯特尼筛法</a>，简称<a href="https://baike.baidu.com/item/%E5%9F%83%E6%B0%8F%E7%AD%9B/5677377">埃氏筛</a>或爱氏筛，是一种由希腊数学家埃拉托斯特尼所提出的一种简单检定素数的算法。要得到自然数n以内的全部素数，必须把不大于 $\sqrt{x}$ 的所有素数的倍数剔除，剩下的就是素数。</p>
<p>要得到自然数n以内的全部素数，必须把不大于 $\sqrt{n}$ 的所有素数的倍数剔除，剩下的就是素数。</p>
<p>时间复杂度 $O(nloglogn)$</p>
<p>模版题：<a href="https://www.acwing.com/problem/content/870/">AcWing 868. 筛质数</a></p>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有质数</span></span><br><span class="line"><span class="keyword">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_primes</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 筛选 2～n 的所有数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i]) <span class="keyword">continue</span>;</span><br><span class="line">        primes[cnt ++ ] = i; <span class="comment">// 将 i 存入质数数组中</span></span><br><span class="line">        <span class="comment">// 质数的倍数绝对不是质数，把所有质数的倍数全部丢弃</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt;= n; j += i) <span class="comment">// 将i的所有倍数筛掉，j就是几倍，而 n/i则是i的最大倍数，小学数学</span></span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>给出要筛数值的范围n，找出以内的素数。先用2去筛，即把2留下，把2的倍数剔除掉；再用下一个质数，也就是3筛，把3留下，把3的倍数剔除掉；接下去用下一个质数5筛，把5留下，把5的倍数剔除掉；不断重复下去…</p>
</blockquote>
<h2 id="xian-xing-shai-fa">线性筛法</h2>
<p>线性筛法，也叫欧拉筛法，是在埃氏筛法的基础上做出优化，我们发现这里面似乎会对某些数标记了很多次其为合数，而线性筛法利用其最小质因数来筛掉合数，每次只标记一次</p>
<p>时间复杂度 $O(n)$ ，数据量小于1e7的情况下，线性筛法和埃氏筛法差不多，数据量大于1e7则线性筛法比埃氏筛法快一倍</p>
<p>模版题：<a href="https://www.acwing.com/problem/content/870/">AcWing 868. 筛质数</a></p>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="keyword">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_primes</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>; <span class="comment">// 用最小质因子去筛合数 primes[j] * i</span></span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 如果 i 是合数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>if(i%prime[j]==0) break;</code> 这句代码保证了每个数最多被筛一次，将时间复杂度降到了线性。</p>
<img src="/2021/12/23/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/%E6%95%B0%E8%AE%BA/线性筛法例子.png" alt="线性筛法例子" style="zoom:75%;">
<p>例如，$i=6$ 时，第一个素数是2，能整除，筛掉12后就 break；至于第二个素数3，6x3中的最小素因数肯定是前一个素数2，所以它要到 $i=9$，素数取2时才被筛掉。</p>
<ol>
<li>
<p>当 <code>i%primes[j]!=0</code> 时，说明此时遍历到的 <code>primes[j]</code> 不是i的质因子，那么只可能是此时的 <code>primes[j]*i</code> 的最小质因子，所以 <code>primes[j]*i</code> 的最小质因子就是 <code>primes[j]</code></p>
</li>
<li>
<p>当有 <code>i%primes[j]==0</code> 时，说明 i 的最小质因子是 <code>primes[j]</code> ， 因此 <code>primes[j]*i</code> 的最小质因子也就应该是 <code>prime[j]</code>，之后接着用 <code>st[primes[j+1]*i]=true</code> 去筛合数时，就不是用最小质因子去更新了，因为 i 有最小质因子 <code>primes[j]&lt;primes[j+1]</code>，此时的 <code>primes[j+1]</code>不是 <code>primes[j+1]*i</code> 的最小质因子，此时就应该退出循环，避免之后重复进行筛选。</p>
</li>
</ol>
<blockquote>
<p>补充：一个数乘上合数肯定是合数，所以只需要让遍历到的数 i 乘上其最小质因数 <code>prime[j]</code> 即可，这样的话乘上后的数必是合数，且有质因数是 <code>prime[j]</code></p>
</blockquote>
<h1 id="yue-shu">约数</h1>
<p>方法：</p>
<ul>
<li>试除法求所有约数</li>
<li>约数个数 和 约数之和</li>
<li>欧几里得算法</li>
</ul>
<p>n 与 1～n 的约数互为质数的个数：</p>
<ul>
<li>朴素求欧拉函数</li>
<li>筛法求欧拉函数</li>
</ul>
<h2 id="shi-chu-fa-qiu-suo-you-yue-shu">试除法求所有约数</h2>
<p>模版题：<a href="https://www.acwing.com/problem/content/871/">AcWing 869. 试除法求约数</a></p>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回升序的x所有质数</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">get_divisors</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i != x / i) res.<span class="built_in">push_back</span>(x / i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为约数都是成对存在的，所以只需要遍历到 $\sqrt{x}$ 即可，具体看<strong>试除法求质数</strong></p>
</blockquote>
<blockquote>
<p>第9行：防止当约数重复加入，如25=5*5</p>
</blockquote>
<h2 id="yue-shu-ge-shu">约数个数</h2>
<p>原理： <a href="https://baike.baidu.com/item/%E7%BA%A6%E6%95%B0%E4%B8%AA%E6%95%B0%E5%AE%9A%E7%90%86/4926961">约数个数定理</a></p>
<p>乘法原理，组合数学</p>
<p><strong>数学结论：</strong></p>
<p>$N$ 是某个数， $p_i$ 是质因数， $c_i$ 是质因数的级数</p>
<p>如果 $N = p_1^{c_1} \times p_2^{c_2} \times … \times p_k^{c_k}$</p>
<p>约数个数： $(c_1 + 1) \times (c_2 + 1) \times … \times (c_k + 1)$</p>
<p>可以发现：约数个数和质因数是啥无关</p>
<blockquote>
<p>百科例题：正整数 378000 共有多少个正约数？</p>
<p>解：将 378000 分解质因数$378000=2^4×3^3×5^3×7^1$</p>
<p>由约数个数定理可知378000共有正约数$(4+1)×(3+1)×(3+1)×(1+1)=160$个。</p>
</blockquote>
<p>模板题：<a href="https://www.acwing.com/problem/content/872/">AcWing 870. 约数个数</a></p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m; <span class="comment">// first为质因数，second为级数</span></span><br><span class="line"><span class="comment">//试除法求约数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divisors_num</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x/i; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(x%i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m[i]++;</span><br><span class="line">            x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 扫尾</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1</span>) m[x]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> h:m) res = <span class="built_in">res</span>  (h.second+<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的扫尾是因为，有可能最后除到 $x$ 是质数了，比如 7 或14 最后只能由扫尾加入 7 这个质因数</p>
</blockquote>
<h2 id="yue-shu-zhi-he">约数之和</h2>
<p>原理： <a href="https://baike.baidu.com/item/%E7%BA%A6%E6%95%B0%E5%92%8C%E5%AE%9A%E7%90%86/3808428">约数和定理</a></p>
<p>模板题： <a href="https://www.acwing.com/problem/content/873/">AcWing 871. 约数之和</a></p>
<p><strong>数学结论：</strong></p>
<p>$N$ 是某个数， $p_i$ 是质因数， $c_i$ 是质因数的级数</p>
<p>如果 $N = p_1^{c_1} \times p_2^{c_2} \times … \times p_k^{c_k}$</p>
<p>约数之和： $(p_1^0 + p_1^1 + … + p_1^{c_1}) \times … \times (p_k^0 + p_k^1 + … + p_k^{c_k})$</p>
<blockquote>
<p>百科例题：正整数360的所有正约数的和是多少？</p>
<p>解：将360分解质因数可得</p>
<p>$360=2^3<em>3^2</em>5^1$</p>
<p>由约数和定理可知，360所有正约数的和为</p>
<p>$(2^0+2^1+2^2+2^3)×(3^0+3^1+3^2)×(5^0+5^1)=(1+2+4+8)(1+3+9)(1+5)=15×13×6=1170$</p>
<p>可知360的约数有1、2、3、4、5、6、8、9、10、12、15、18、</p>
<p>20、24、30、36、40、45、60、72、90、120、180、360；则它们的和为</p>
<p>1+2+3+4+5+6+8+9+10+12+15+18+20+24+30+36+40+45+60+72+90+120+180+360=1170</p>
</blockquote>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">unordered_map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; m; <span class="comment">// first为质因数，second为级数</span></span><br><span class="line"><span class="comment">//试除法求约数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divisors_num</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x/i; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(x%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m[i]++;</span><br><span class="line">            x/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 扫尾</span></span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">1</span>) m[x]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//核心</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> h:m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> p=h.first,c=h.second; <span class="comment">// a是底数，b是级数</span></span><br><span class="line">    LL t=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(c--) t=t*p+<span class="number">1</span>; <span class="comment">// pi^(0~ak)之和，也可以用等比求和</span></span><br><span class="line">    res*=t; <span class="comment">// 所有pi相乘</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ou-ji-li-de-suan-fa-zui-da-gong-yue-shu">欧几里得算法（最大公约数）</h2>
<p>原理：<a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95">欧几里得算法</a></p>
<p>也叫辗转相除法</p>
<blockquote>
<p>百科例子：</p>
<p>假如需要求 1997 和 615 两个正整数的最大公约数,用欧几里得算法，是这样进行的：</p>
<p>1997 / 615 = 3 (余 152)</p>
<p>615 / 152 = 4(余7)</p>
<p>152 / 7 = 21(余5)</p>
<p>7 / 5 = 1 (余2)</p>
<p>5 / 2 = 2 (余1)</p>
<p>2 / 1 = 2 (余0)</p>
<p>至此，最大公约数为1</p>
<p>以除数和余数反复做除法运算，当余数为 0 时，取当前算式除数为最大公约数，所以就得出了 1997 和 615 的最大公约数 1。</p>
</blockquote>
<p>模板题：<a href="https://www.acwing.com/problem/content/874/">AcWing 872. 最大公约数</a></p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里a 和 b无论谁大都可用，我试过了</p>
</blockquote>
<h2 id="zui-xiao-gong-bei-shu">最小公倍数</h2>
<p>定理：</p>
<p>$(a,b) \times [a,b]=a \times b$</p>
<p>即需要用到 $gcd(a,b)$ 先求出最大公约数，再用两数之积除以 $d$</p>
<h2 id="qiu-ou-la-han-shu">求欧拉函数</h2>
<p>在数论，对正整数 n，欧拉函数是小于 n 的正整数中与 n <a href="%E4%BA%92%E8%B4%A8%E6%98%AF%E5%85%AC%E7%BA%A6%E6%95%B0%E5%8F%AA%E6%9C%891%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B4%E6%95%B0%EF%BC%8C%E5%8F%AB%E5%81%9A%E4%BA%92%E8%B4%A8%E6%95%B4%E6%95%B0%E3%80%82%E5%85%AC%E7%BA%A6%E6%95%B0%E5%8F%AA%E6%9C%891%E7%9A%84%E4%B8%A4%E4%B8%AA%E8%87%AA%E7%84%B6%E6%95%B0%EF%BC%8C%E5%8F%AB%E5%81%9A%E4%BA%92%E8%B4%A8%E8%87%AA%E7%84%B6%E6%95%B0%EF%BC%8C%E5%90%8E%E8%80%85%E6%98%AF%E5%89%8D%E8%80%85%E7%9A%84%E7%89%B9%E6%AE%8A%E6%83%85%E5%BD%A2%E3%80%82">^互质</a>的数的数目。</p>
<p>原理： <a href="https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/1944850">欧拉函数</a> 容斥原理</p>
<img src="/2021/12/23/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/%E6%95%B0%E8%AE%BA/容斥原理.png" alt="容斥原理" style="zoom:61%;">
<p>N的质因数分解： $N=p_1^{c_1}\times p_2^{c_2} \times … \times p_k^{c_k}$</p>
<p>与 N 互质的数的个数<strong>结论</strong>：</p>
<p>$φ(N)=N(1-\frac{1}{p_1})(1-\frac{1}{p_2})…(1-\frac{1}{p_k})$</p>
<p>​             $=N \times \frac{p_1-1}{p_1} \times \frac{p_2-1}{p_2}…\frac{p_k-1}{p_k}$</p>
<p>可以发现：<strong>欧拉函数与质因数的级数无关</strong></p>
<h3 id="po-su-qiu-fa">朴素求法</h3>
<p>模板题：<a href="https://www.acwing.com/problem/content/875/">AcWing 873. 欧拉函数</a></p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ ) <span class="comment">// 试除法求质因数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>); <span class="comment">// 先除后乘，防止溢出</span></span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 扫尾</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) res = res / x * (x - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="shai-fa-qiu-ou-la-han-shu">筛法求欧拉函数</h3>
<p>这个思路是利用了线性筛法来求欧拉函数，代码也在线性筛法的基础上作出了小修改，在求质因数的时候，用其最小质因数去更新其欧拉函数</p>
<p>思路（类似DP）：</p>
<ul>
<li>先写出线性筛法模板</li>
<li>多开一个 $euler[N]$ 数组存每个数的欧拉函数</li>
<li>分情况
<ul>
<li>被筛掉的情况
<ul>
<li>被筛掉说明是质数，那他的欧拉函数就是 $i-1$</li>
</ul>
</li>
<li>筛选时的情况
<ul>
<li>$primes[j]$ 为 $primes[j] \times i$ 的最小质因数</li>
<li><code>i % p[j] == 0</code> 的情况
<ul>
<li>$φ(primes[j] \times i)=φ(i) \times primes[j]$</li>
</ul>
</li>
<li><code>i % p[j] != 0</code> 的情况
<ul>
<li>$φ(primes[j] \times i)=φ(i) \times (primes[j]−1)$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>下面 $primes[j]$ 用 $p[j]$ 表示</p>
<p>上面 <code>i % p[j] == 0</code> 的情况：</p>
<blockquote>
<p>$φ(i)=i \times (1-\frac{1}{p_1}) \times (1-\frac{1}{p_2})…(1-\frac{1}{p_k})$ ，因为 $p[j]$ 是 $i$ 的一个质因子，而且欧拉函数与质因子个数无关，所以在算 $p[j]\times i$ 分解质因子也是 $p_1 -&gt; p_k$</p>
<p>因此 $ φ(p[j]\times i)=p[j]\times i \times (1-\frac{1}{p_1}) \times (1-\frac{1}{p_2})…(1-\frac{1}{p_k}) $</p>
<p>即： $φ(p[j]\times i)=p[j]\times φ(i) $</p>
</blockquote>
<p>上面 <code>i % p[j] == 0</code> 的情况：</p>
<blockquote>
<p>$φ(i)=i \times (1-\frac{1}{p_1}) \times (1-\frac{1}{p_2})…(1-\frac{1}{p_k})$ ，因为 $p[j]$ <strong>不是</strong> $i$ 的一个质因子，所以 $p[j]\times i$ 与 $i$ 的质因子的区别就是前者比后者多一个 $p[j]$</p>
<p>因此 $ φ(p[j]\times i)=p[j]\times i \times (1-\frac{1}{p_1}) \times (1-\frac{1}{p_2})…(1-\frac{1}{p_k}) \times (1-\frac{1}{p_j})$</p>
<p>即： $φ(p[j]\times i)=p[j]\times φ(i) \times (1-\frac{1}{p_j})$</p>
<p>即： $φ(p[j] \times i)=φ(i) \times (p[j]−1)$</p>
</blockquote>
<p>模板题：<a href="https://www.acwing.com/problem/content/876/">AcWing 874. 筛法求欧拉函数</a></p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="keyword">int</span> euler[N];           <span class="comment">// 存储每个数的欧拉函数</span></span><br><span class="line"><span class="keyword">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_eulers</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    euler[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 初始化</span></span><br><span class="line">    <span class="comment">// 线性筛法求欧拉函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            primes[cnt ++ ] = i;</span><br><span class="line">            euler[i] = i - <span class="number">1</span>; <span class="comment">// 质数的话，肯定是前面的数，除了0以外互质的数只有1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ ) <span class="comment">// 遍历质数，用最小质因数筛掉</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t = primes[j] * i; <span class="comment">// 质数*i </span></span><br><span class="line">            st[t] = <span class="literal">true</span>; </span><br><span class="line">            <span class="comment">// 用最小质因数去更新其欧拉函数</span></span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="comment">// i % p[j] == 0的情况</span></span><br><span class="line">            &#123;</span><br><span class="line">                euler[t] = euler[i] * primes[j]; <span class="comment">// 直接乘上其最小质因数的欧拉函数即可</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// i % p[j] != 0的情况</span></span><br><span class="line">            euler[t] = euler[i] * (primes[j] - <span class="number">1</span>); <span class="comment">// 这里是化简后的情况</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当 $i$ 未被标记时，即 $i$ 为质数，那肯定是前面的数，除了0以外只有1是互质的数</p>
</blockquote>
<p>背过吧…</p>
<h1 id="kuai-su-mi">快速幂</h1>
<p>求 $a^k$  mod  $p$，时间复杂度 $O(logk)$</p>
<p><strong>数学结论：</strong></p>
<p>传统方法是直接将 $a$ 乘 $b$ 次，但是算法复杂度是 $O(b)$ ，如果遇到 $b$ 很大的情况就很慢。</p>
<p>其实就是把幂转成二进制，然后来算</p>
<p>$$a^k=a^{2 \frac{k}{2}}=(a^2)^{\frac{k}{2}}$$</p>
<p>如果把 k 转成二进制数 $(k)_{10}=(…bcd)_2$</p>
<p>那么：<br>
$$a^k=a^{d \  \cdot \ 2^0 + c \ \cdot \ 2^1 + b\ \cdot \ 2^2+ \ …}$$</p>
<p>$$a^k=a^{d \  \cdot \ 2^0} \cdot a^{c \  \cdot \ 2^1} \cdot a^{b \  \cdot \ 2^3} \ …$$</p>
<p>可以发现其实就是将幂拆成用二进制表示幂来算</p>
<p>模版题：<a href="https://www.acwing.com/problem/content/877/">AcWing 875. 快速幂</a></p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a^k%p</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> k,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>,t = a;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) <span class="comment">// 取二进制个位</span></span><br><span class="line">            res = (LL)res * t % p; <span class="comment">//  把每一项乘起来</span></span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>; <span class="comment">// k把个位去掉（右移一位）</span></span><br><span class="line">        t = (LL)t * t % p; <span class="comment">// 这个就是每一次的(a^2)的级数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子：</p>
<p>求$5^{11}$</p>
<p>$$5^{11}=5^{(1011)_2}$$</p>
<p>​       $$=5^{2^3+2^1+2^0}$$</p>
<p>​       $$=5^{2^3} \ \cdot \ 5^{2^1} \ \cdot \ 5^{2^0}$$</p>
<p>​       $$=5^{8} \ \ \cdot \ 5^{2} \ \ \cdot \ 5^{1}$$</p>
</blockquote>
<p>如此可以发现，与幂的二进制数上的每一位有关</p>
<h1 id="kuo-zhan-ou-ji-li-de-suan-fa">扩展欧几里得算法</h1>
<p>给定一对正整数 a,b，求出一组 x,y，使其满足：</p>
<p>$$ax+by=gcd(a,b)$$</p>
<blockquote>
<p>贝祖定理：<br>
​有一个线性不定方程<br>
$ax+by=c$</p>
<p>若此方程有解，那么<br>
$c=k·(a,b), k∈Z^+$</p>
</blockquote>
<p>公式推导：</p>
<p>当 $b=0$ 时 $ax+by=a$ 故而 $x=1,y=0$，</p>
<p>当 $b≠0$ 时，因为<br>
$$gcd(a,b)=gcd(b,a%b)$$<br>
而<br>
$$bx′+(a%b)y′=gcd(b,a%b)$$<br>
$$bx′+(a−⌊a/b⌋\times b)y′=gcd(b,a%b)$$<br>
$$ay′+b(x′−⌊a/b⌋\times y′)=gcd(b,a%b)=gcd(a,b)$$</p>
<p>故而求得<strong>通解</strong>：<br>
$$x=y′,y=x′−⌊a/b⌋\times y′$$</p>
<p>因此可以采取递归算法 先求出下一层的 $x′$ 和 $y′$ 再利用上述公式回代即可</p>
<p>递归边界：当 $b=0$ 时，$(a,b)=a,x=1,y∈Z$</p>
<blockquote>
<p>特别的，用扩展欧几里得算法还可以求出乘法逆元。<br>
$$ax≡1mod \ p$$ <br>
$$ax+py=1$$</p>
<p>当且仅当 $gcd(a,p)=1$ 时有解。</p>
</blockquote>
<p>模版题：<a href="https://www.acwing.com/problem/content/879/">AcWing 877. 扩展欧几里得算法</a></p>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求x, y，使得ax + by = gcd(a, b)</span></span><br><span class="line"><span class="comment">// 返回值是 a 和 b 的最大公约数，即: gcd(a, b)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) <span class="comment">// 这是其中一组解</span></span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>,y = <span class="number">0</span>; <span class="comment">// 边界，当b=0时，手算出来的边界，a*x + 0*y = gcd(a, 0) = a</span></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x); <span class="comment">// 先求出下一层递归的 y = x&#x27; 和 x = y&#x27;</span></span><br><span class="line">    y -= (a / b) * x; <span class="comment">// y=x&#x27;−⌊a/b⌋*y&#x27;，这里的x&#x27;其实就是下一层递归的x，y&#x27;是下一层的y，因为上面交叉传了</span></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="xian-xing-tong-yu-fang-cheng">线性同余方程</h2>
<blockquote>
<p><strong>裴蜀定理</strong>：</p>
<p>对任何整数 $a$、$b$ 和它们的最大公约数 $d$ ，满足：</p>
<p>​																$$ax+by=d$$</p>
<p>若$a$, $b$是整数，且 $gcd(a,b)=d$，那么对于任意的整数 $x$, $y$，$ax+by$ 都一定是 $d$ 的倍数，特别地，一定存在整数 $x$, $y$，使得$ax+by=d$ 成立。</p>
</blockquote>
<p>当算一个线性同余方程 $ax_0+by_0=d$ 的通解时，我们可以发现 $a(x-\frac{b}{d})+b(y+\frac{a}{d})=d$ 为其中一组解</p>
<p>即其通解为：</p>
<p>​																						$$x=x_0-\frac{b}{d} \cdot k \ ,k∈Z$$</p>
<p>​																						 $$y=y_0+\frac{a}{d} \cdot k \ , k∈Z$$</p>
<p>给定 $a$, $b$, $p$，求出 $x$ 使其满足</p>
<p>​																		$$a \cdot x≡b \ mod \ p$$</p>
<p>这个方程可以写为</p>
<p>​																		 $ax=py+b$  ，  将 $y = -y$</p>
<p>即： $ax+py=b$</p>
<p>要使该方程有解，则满足</p>
<p>​																		$$b=k \cdot gcd(a,p),k∈Z$$</p>
<p>用扩展欧几里得算法求出 $ax+py=(a,p)$ 的 $x$ 的解之后，再将 $x$ 乘上 $\frac{b}{(a,p)}$ 即可。</p>
<p>为什么要翻倍，因为我们需要求的是 $ax+py=b$ ，而 $(a,p)$ 是 $b$ 的倍数，所以两边同时翻倍即可</p>
<p>模版题：<a href="https://www.acwing.com/problem/content/description/880/">AcWing 878. 线性同余方程</a></p>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="built_in">exgcd</span>(a, p, x, y);</span><br><span class="line">    <span class="keyword">if</span>(b % d) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>); <span class="comment">// b不是d的倍数则无解</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        x = (LL)x * b / d % p; <span class="comment">// 扩大b/d倍</span></span><br><span class="line">        cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>exgcd()</code>照套就行</p>
<h1 id="qiu-ni-yuan">求逆元</h1>
<p>逆元定义</p>
<blockquote>
<p>若整数 $b$，$p$ 互质，并且对于任意的整数 $a$，如果满足 $b|a$，则存在一个整数 $x$，使得 $a/b≡a\cdot x \ (mod\ p)$，则称 $x$ 为 $b$ 的模 $p$ 乘法逆元，记为 $b^{−1} \ (mod \ p)$。</p>
<p>$b$ 存在乘法逆元的充要条件是 $b$ 与模数 $p$ 互质。当模数 $p$ 为质数时，$b^{p−2}$ 即为 $b$ 的乘法逆元。</p>
</blockquote>
<blockquote>
<p>百科例子：4关于1模7的乘法逆元为多少？</p>
<p>$4X≡1 \ mod \ 7$</p>
<p>这个方程等价于求一个X和K，满足</p>
<p>$4X=7K+1$</p>
<p>其中X和K都是整数。</p>
</blockquote>
<blockquote>
<p><strong>费马小定理</strong>：如果 $p$ 是一个质数，而整数 $b$ 不是 $p$ 的倍数，则有$b^{p-1}≡1 \ (mod \ p)$</p>
<p>满足费马小定理，则有此结论： $b^{p-2}$ 就是 $b$ 的逆元</p>
</blockquote>
<blockquote>
<p><strong>裴蜀定理</strong>：</p>
<p>特别的，如果 $bx+py=1$ 即可以转换成扩展欧几里得算法来求解 $x$，即为 $b$ 的逆元</p>
</blockquote>
<p><strong>数学结论：</strong></p>
<ul>
<li>
<p>$b$ 有逆元的充要条件是 $b$ 与 $p$ 互质</p>
</li>
<li>
<p>当 $p$ 为质数时，可用快速幂求逆元</p>
<ul>
<li>
<p>$b$ 的乘法逆元为 $b^{p-2}$ ，<code>qmi(b, p - 2, p)</code></p>
</li>
<li>
<p>当 $b$ 为 $p$ 的倍数时，<strong>$b$ 的逆元不存在</strong>， $b \cdot x%p==0$ ，$b$ 乘任意一个 $x%p$ 一定等于0</p>
</li>
</ul>
</li>
<li>
<p>当 $p$ 不为质数时，只能用扩展欧几里得算法求逆元</p>
<ul>
<li>当 $bx+py=1$ 时，$x$ 即为 $b$ 的逆元</li>
</ul>
</li>
</ul>
<p><strong>当 $p$ 为质数时，可以用快速幂求逆元的推导：</strong></p>
<p>$$a / b ≡ a * x \ (mod \ p)$$</p>
<p>两边同乘 $b$ 可得 $a ≡ a * b * x \ (mod \ p)$</p>
<p>同除 $a$ 即 $1 ≡ b * x \ (mod \ p)$</p>
<p>$b * x ≡ 1 \ (mod \ p)$</p>
<p>由费马小定理可知，当 $p$ 为质数时</p>
<p>$b ^ {n - 1} ≡ 1 \ (mod \ p)$</p>
<p>拆一个 $b$ 出来可得 $b * b ^ {n - 2} ≡ 1 \ (mod \ p)$</p>
<p>故当 $p$ 为质数时，$b$的乘法逆元 $x = b ^ {p - 2}$</p>
<p>模版题：<a href="https://www.acwing.com/problem/content/878/">AcWing 875. 快速幂求逆元</a></p>
<p>模版：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(b % p == <span class="number">0</span>) <span class="comment">// b能整除p说明，b和p不互质，即 b mod p的逆元不存在</span></span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="built_in">qmi</span>(b, p<span class="number">-2</span>, p) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p><strong>当 $p$ 不是质数时，用扩展欧几里得算法求逆元：</strong></p>
<p>$b$ 有逆元的充要条件是 $b$ 与 $p$ 互质，所以 $gcd(b, p) = 1$</p>
<p>假设 $b$ 的逆元为 $x$，那么有 $b * x ≡ 1 \ (mod \ p)$</p>
<p>等价： $bx + py = 1$</p>
<p>$exgcd(b, p, x, y)$</p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="built_in">exgcd</span>(a, p, x, y);</span><br><span class="line">    <span class="keyword">if</span>(d == <span class="number">1</span>) cout &lt;&lt; ((LL)x + p) % p; 当且仅当 (a,p)=<span class="number">1</span> 时有解。</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="zhong-guo-sheng-yu-ding-li">中国剩余定理</h1>
<p>求一元线性同余方程组</p>
<p><strong>定义：</strong></p>
<p>给定一组线性同余方程组，求出 $x$ 最小非负整数解：<br>
$$x≡a_1 \ mod \ m_1 $$<br>
$$x≡a_2 \ mod \ m_2 $$<br>
$$x≡a_2 \ mod \ m_2 $$<br>
$$⋮ $$<br>
$$⋮ $$						<br>
$$x≡a_n \ mod \ m_n$$</p>
<blockquote>
<p><strong>中国剩余定理：</strong></p>
<p>设 $M=m_1 \times m_2 \times … \times m_n = \prod_{i=1}^{n}{m_i}$ ，$M_i=\frac{M}{m_i}$ 是除了<em>m</em>i以外的<em>n</em>- 1个整数的乘积，$M_i^{-1}$ 是 $M_i$ 模 $m_i$ 意义下的逆元。</p>
<p>则方程组的通解为</p>
<p>$x=a_1M_1M_1^{-1}+a_2M_2M_2^{-1}+…+a_nM_nM_n^{-1}+kM=kM+\sum_{i=1}^{n}a_iM_iM_i^{-1},k∈Z$</p>
<p>在模 $M$ 的意义下，方程组只有一个解：<br>
$$x=(\sum^{n}_{i=1}a_iM_iM_i^{-1}) \ mod \ M$$</p>
<p>即：<br>
$$x=(\sum^{n}_{i=1}a_i \frac{M}{m_i} (\frac{M}{m_i})^{-1}) \ mod \ M$$</p>
</blockquote>
<p>思路：将多个方程组合为一个方程来求解，即将两个线性同余方程合为一个，以此类推。</p>
<p>推导：</p>
<p>首先考虑前两个线性同余方程：<br>
$$x≡a_1 \ mod \ m_1$$<br>
​																						$$x≡a_2 \ mod \ m_2$$</p>
<p>转化为：<br>
$$x=m_1⋅k_1+a_1$$<br>
$$x=m_2⋅k_2+a_2$$</p>
<p>将这两个方程合并移项，可得：<br>
$$m_1⋅k_1−m_2⋅k_2=a_2−a_1$$</p>
<p>即：<br>
$$m_1⋅k_1+m_2⋅(-k_2)=a_2−a_1$$</p>
<p><strong>这个方程有解必须满足：</strong><br>
$$(a_2-a_1)\ % \ d==0$$</p>
<p>若有解，我们可以通过求<strong>线性同余方程的通解</strong>来得出<br>
$$k_1=k_1+\frac{m_2}{d} \cdot k \ ,k∈Z$$<br>
$$k_2=k_2+\frac{m_1}{d} \cdot k \ , k∈Z$$</p>
<p>将 $k_1$ 带回 $x=m_1 \cdot k_1 +a_1$ 得：<br>
$$x=k_1 \cdot m_1 +a_1$$<br>
$$x=(k_1+k \cdot \frac{m_2}{d}) \cdot m_1 + a_1$$</p>
<p>展开：<br>
$$x=\frac{m_1m_2}{d} \cdot k+k_1m_1+a_1$$</p>
<p>$\frac{m_1m_2}{d}$ 为 $m_1$ 和 $m_2$  的最小公倍数，即：<br>
$$x=[m_1,m_2] \cdot k+k_1m_1+a_1 \ ①$$</p>
<p>可以发现上面的方程与这方程相类似<br>
$$x=m⋅k+a$$</p>
<p>对比发现：<br>
$$m=[m_1,m_2]$$<br>
$$a=k_1m_1+a_1$$</p>
<p>将得到的方程①与下一个同余方程合并，直到最后只剩一个方程时：$x=m \cdot k+a$</p>
<p>即求：<br>
$$x \ mod \ m ≡ a$$</p>
<p>即求：<br>
$$x=a \ mod \ m$$</p>
<p>最后直接用合并后方程的 $a$ 和 $m$ 求一个最小正整数解即可： $(a % m +m )%m$</p>
<p>思路就是按照推导过程去实现</p>
<p>模板题：<a href="https://www.acwing.com/problem/content/206/">AcWing 204. 表达整数的奇怪方式</a></p>
<p>模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LL n, a1, a2, k1, k2, m1, m2;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cin &gt;&gt; m1 &gt;&gt; a1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    cin &gt;&gt; m2 &gt;&gt; a2;</span><br><span class="line">    LL d = <span class="built_in">exgcd</span>(m1, -m2, k1, k2); <span class="comment">// 求得 k1*m1 + k2*(-m2) = d</span></span><br><span class="line">    <span class="keyword">if</span>((a2 - a1) % d) <span class="comment">// 不能整除则无解</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  求出的是 k1*m1 + k2*m2 = d ，我们需要求的是右边是 a2-a1的值</span></span><br><span class="line"><span class="comment">        因为 d 与 a2-a1 是倍数，所以两边翻(a2-a1)/d倍即可，</span></span><br><span class="line"><span class="comment">        k2不需要翻倍的原因是，不需要用到</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    k1 *= (a2 - a1) / d; <span class="comment">//翻若干倍</span></span><br><span class="line">    LL t = m2 / d; <span class="comment">// k1的通解：k1=k1+m2/d*k ，k∈Z</span></span><br><span class="line">    k1 = (k1 % t + t) % t; <span class="comment">// 将k1变成最小的正整数解</span></span><br><span class="line"></span><br><span class="line">    a1+= k1 * m1; <span class="comment">// a=k1*m1+a1 得先求了a1才能求m1,不然m1值变了</span></span><br><span class="line"></span><br><span class="line">    m1 = <span class="built_in">abs</span>(m1 / d * m2); <span class="comment">// m=[m1,m2] 最小公倍数数，有可能是负的，这里求一个正的</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (a1 % m1 + m1) % m1 &lt;&lt; endl; <span class="comment">//结果就是x = a mod m ，但这里求一个最小正整数解</span></span><br></pre></td></tr></table></figure>
<h1 id="gao-si-xiao-yuan-jie-xian-xing-fang-cheng">高斯消元解线性方程</h1>
<p>思路：</p>
<ul>
<li>枚举每一列 $c$
<ol>
<li>找到绝对值最大的一行</li>
<li>将该行换到最上面</li>
<li>（倒着算）将该行该列的这个数变成 1</li>
<li>（从上往下）将下面所有行的第 $c$ 列消成 0</li>
</ol>
</li>
<li>判断是否有解 或 为无穷解</li>
<li>（从下往上）将上面所有行的第 $c$ 列消成 0
<ul>
<li>枚举每一列
<ul>
<li>枚举每一行（倒着算）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="man-ha-dun-ju-chi">曼哈顿距离</h1>
<p>红线代表曼哈顿距离，绿色代表<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%B0%8F%E8%B7%9D%E7%A6%BB">欧氏距离</a>，也就是<a href="https://baike.baidu.com/item/%E7%9B%B4%E7%BA%BF%E8%B7%9D%E7%A6%BB">直线距离</a>，而蓝色和黄色代表等价的曼哈顿距离。<a href="https://baike.baidu.com/item/%E6%9B%BC%E5%93%88%E9%A1%BF">曼哈顿</a>距离——两点在南北方向上的距离加上在东西方向上的距离，即 $d(i,j)=|x_i-x_j|+|y_i-y_j|$ 。曼哈顿距离又称为出租车距离。</p>
<img src="/2021/12/23/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/%E6%95%B0%E8%AE%BA/曼哈顿距离.png" alt="曼哈顿距离" style="zoom: 67%;">
<p>曼哈顿距离包括终点本身</p>
<p><strong>都是整数</strong></p>
<h1 id="ou-ji-li-de-ju-chi">欧几里得距离</h1>
<p>两点之间的距离，也称<strong>欧氏距离</strong></p>
<p>这个就是高中二维和三维坐标系所学的</p>
<p><strong>有浮点数</strong></p>
<p>二维：</p>
<p>$$\rho =\sqrt{(x_2-x_1)^2+(y_2-y_1)^2}$$</p>
<p>三维：</p>
<p>$$\rho =\sqrt{(x_2-x_1)^2+(y_2-y_1)^2+(z_2-z_1)^2}$$</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心算法</title>
    <url>/2021/11/13/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Greedy-Algorithm"><a href="#Greedy-Algorithm" class="headerlink" title="Greedy Algorithm"></a>Greedy Algorithm</h1><p>贪心算法一般分为如下四步：</p>
<ul>
<li>  将问题分解为若干个子问题</li>
<li>  找出适合的贪心策略</li>
<li>  求解每一个子问题的最优解</li>
<li>  将局部最优解堆叠成全局最优解</li>
</ul>
<p>其实这个分的有点细了</p>
<p>贪心算法采用自顶向下，以迭代的方法做出相继的贪心选择，每做一次贪心选择，就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解。虽然每一步上都要保证能获得局部最优解，但<strong>由此产生的全局解有时不一定是最优的</strong>，所以贪心算法不要回溯</p>
<p>如果找不出反例的话，试试贪心呗</p>
<p>缺点：</p>
<ul>
<li>  不能保证解是最佳的。因为贪心算法总是从局部出发，并没从整体考虑</li>
<li>  贪心算法一般用来解决求最大或最小解</li>
<li>  贪心算法只能确定某些问题的可行性范围</li>
</ul>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="455-分发饼干（Easy）"><a href="#455-分发饼干（Easy）" class="headerlink" title="455.分发饼干（Easy）"></a>455.分发饼干（Easy）</h2><p>题目：对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>
<p>思路：</p>
<ul>
<li><p><strong>这里局部最优是先满足小胃口的，用小饼干满足小胃口，充分利用饼干尺寸喂饱一个，全局最优就是喂饱尽可能多的小孩。</strong></p>
<p>  也可以大饼干先喂给大胃口，这样看起来人性化一点</p>
<p>  两种思路都差不多</p>
</li>
<li><p>  因为当饼干尺寸≥孩子饥饿度时，才能满足</p>
</li>
<li><p>  所以孩子饥饿度先排序，应该尽可能的先喂饱饥饿度小的孩子</p>
</li>
<li><p>  而给只要满足孩子即可，所以饼干尺寸也要排序</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;g, vector&lt;<span class="keyword">int</span>&gt; &amp;s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//从小到大排序</span></span><br><span class="line">        <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">//i是孩子，j是饼干</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;g.<span class="built_in">size</span>()&amp;&amp;j&lt;s.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断饼干是否满足孩子</span></span><br><span class="line">            <span class="keyword">if</span> (s[j] &gt;= g[i])</span><br><span class="line">            &#123;</span><br><span class="line">                ++count;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  心得：</p>
<p>  这题看过题解视频，然后才遇到的，幸运的是，我能写出来</p>
</blockquote>
<h2 id="376-摆动序列（Medium）"><a href="#376-摆动序列（Medium）" class="headerlink" title="376.摆动序列（Medium）"></a>376.摆动序列（Medium）</h2><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 <strong>摆动序列 。</strong>第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p>
<ul>
<li>  例如， <code>[1, 7, 4, 9, 2, 5]</code> 是一个 <strong>摆动序列</strong> ，因为差值 <code>(6, -3, 5, -7, 3)</code> 是正负交替出现的。</li>
<li>  相反，<code>[1, 4, 7, 2, 5]</code> 和 <code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</li>
</ul>
<p><strong>子序列</strong> 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p>
<p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中作为 <strong>摆动序列</strong> 的 <strong>最长子序列的长度</strong> 。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,7,4,9,2,5]</span><br><span class="line">输出：6</span><br><span class="line">解释：整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,17,5,10,13,15,10,5,16,8]</span><br><span class="line">输出：7</span><br><span class="line">解释：这个序列包含几个长度为 7 摆动序列。</span><br><span class="line">其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,4,5,6,7,8,9]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure>



<p>思路：</p>
<p>本题贪心的核心:</p>
<p>局部最优：删除单调坡度上的结点（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值。</p>
<p>整体最优：整个序列有最多的局部峰值，从而达到最长摆动序列。</p>
<p><strong>实际上局部最优就是单调坡度上的点不计数，有峰值的才计数</strong></p>
<p><img src="https://i.loli.net/2021/11/11/jBV6ly9PHhAxunR.png" alt="摆动序列局部最优"></p>
<p>当然，本题也可以用动态规划</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">wiggleMaxLength</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> curDiff = <span class="number">0</span>; <span class="comment">//当前峰值</span></span><br><span class="line">        <span class="keyword">int</span> preDiff = <span class="number">0</span>; <span class="comment">//前一个峰值</span></span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">1</span>;<span class="comment">//子序列长度是峰值+1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            curDiff = nums[i] - nums[i - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//对于前一个峰值判断一定要加=，因为当有相同的数连续时，第一次curDiff是不过的，就相当于把这个重复数字给去掉了</span></span><br><span class="line">            <span class="keyword">if</span> ((curDiff &gt; <span class="number">0</span> &amp;&amp; preDiff &lt;= <span class="number">0</span>) || (curDiff &lt; <span class="number">0</span> &amp;&amp; preDiff &gt;= <span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                ++result;</span><br><span class="line">                preDiff=curDiff;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; n-1; ++i)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            curDiff = nums[i+1] - nums[i];</span></span><br><span class="line"><span class="comment">            if ((curDiff &gt; 0 &amp;&amp; preDiff &lt;= 0) || (curDiff &lt; 0 &amp;&amp; preDiff &gt;= 0))</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                ++result;</span></span><br><span class="line"><span class="comment">                preDiff=curDiff;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  心得：</p>
<p>  能写个大概，但判断条件没写出来，无从下手，应该说是不知道怎么计算峰值才最好和两个数之间的峰值不知道怎么处理，后来看了下题解，有了思路</p>
</blockquote>
<h2 id="53-最大子序和（Easy）"><a href="#53-最大子序和（Easy）" class="headerlink" title="53.最大子序和（Easy）"></a>53.最大子序和（Easy）</h2><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure>

<p><strong>示例 4：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1]</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure>

<p><strong>示例 5：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-100000]</span><br><span class="line">输出：-100000</span><br></pre></td></tr></table></figure>



<p>思路：</p>
<ul>
<li><p>  局部最优：当“连续和”&lt;0是立刻放弃，从下一个元素重新计算“连续和”，因为负数加上下一个元素的 “连续和”只会越来越小。</p>
</li>
<li><p>  全局最优，选取最大“连续和”</p>
</li>
</ul>
<p><img src="/2021/11/13/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.gif" alt="53.最大子序和"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//贪心算法</span></span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//设置ansMax为无穷小</span></span><br><span class="line">        <span class="keyword">int</span> ansMax = INT32_MIN, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            <span class="comment">//直到第i个的和跟目前最大值比较，</span></span><br><span class="line">            <span class="comment">//如果时判断了sum&lt;0之后才比较的话，nums里只有负数的话，那它最大值仍=0</span></span><br><span class="line">            ansMax = <span class="built_in">max</span>(ansMax,sum);</span><br><span class="line">            <span class="comment">//当前面总和小于0时，重置sum</span></span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ansMax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  心得：</p>
<p>  这题我是先在动态规划那做过了的，当我用贪心再做的时候，也不是完全没思路，就是能写个大概，但这个重置最大值=0，我写错了。可喜的是，我经过刷前面的题，我知道要在每次循环都要比较出最大值，并赋值给目前的最大值ansMax，刚开始这个比较放在了判断sum&lt;0后面。这题贪心思路还是不行</p>
</blockquote>
<h2 id="122-买卖股票的最佳时机（Medium）"><a href="#122-买卖股票的最佳时机（Medium）" class="headerlink" title="122.买卖股票的最佳时机（Medium）"></a>122.买卖股票的最佳时机（Medium）</h2><p>给定一个数组 <code>prices</code> ，其中 <code>prices[i]</code> 是一支给定股票第 <code>i</code> 天的价格。</p>
<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>
<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: prices = [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: prices = [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: prices = [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure>



<p>思路：</p>
<ul>
<li>  局部最优：收集每天的正利润</li>
<li>  全局最优：求得最大利润</li>
</ul>
<p>只要前一天的价格比后一天的价格小，那么就有正利润，直接判断<code>prices[i] &gt; prices[i - 1]</code>即可</p>
<p><img src="/2021/11/13/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA.png" alt="122.买卖股票的最佳时机"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;<span class="comment">//记录利润</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.<span class="built_in">size</span>();++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i]&gt;prices[i<span class="number">-1</span>])&#123;</span><br><span class="line">                result+=prices[i]-prices[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  心得：</p>
<p>  这题写出来了，刚开始的时候，纠结当遇到前一个比后一个大怎么去留到后面去判断，其实想了想，这个题只需要判断俩俩关系即可，而且后一个比前一个大的话，记录利润值即可，比较小的话，直接下次循环。</p>
</blockquote>
<h2 id="55-跳跃游戏（Medium）"><a href="#55-跳跃游戏（Medium）" class="headerlink" title="55.跳跃游戏（Medium）"></a>55.跳跃游戏（Medium）</h2><p>给定一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。</p>
<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>
<p>判断你是否能够到达最后一个下标。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,3,1,1,4]</span><br><span class="line">输出：true</span><br><span class="line">解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,1,0,4]</span><br><span class="line">输出：false</span><br><span class="line">解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<ul>
<li>  局部最优：遍历时每次取最大跳跃的步数（取所能到达的最大覆盖范围）</li>
<li>  全局最优：得到整体最大覆盖范围，看是否能到终点</li>
</ul>
<p><img src="/2021/11/13/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F%E6%80%9D%E8%B7%AF.gif"></p>
<p>i 每次只能在 [0, cover] 里移动</p>
<p>每移动一个元素，cover得到该元素数值（新的覆盖范围）的补充，让i继续移动下去。</p>
<p>而cover每次只取 max(该元素数值补充后的范围, cover本身范围)。</p>
<p>如果cover大于等于了终点下标，直接return true就可以了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cover=<span class="number">0</span>;<span class="comment">//目前最大的跳跃覆盖范围</span></span><br><span class="line">        <span class="keyword">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cover;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//取当前能跳跃的最大范围</span></span><br><span class="line">            cover=<span class="built_in">max</span>(i+nums[i],cover);</span><br><span class="line">            <span class="comment">//判断目前的最大范围能否跳过</span></span><br><span class="line">            <span class="keyword">if</span>(cover&gt;=n<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  心得：</p>
<p>  没做出来，但看了思路之后，茅塞顿开，思路被打开了。这题其实我在b站视频看过前半部分，所以下面想到的思路都可能被视频刚开始的试错影响了，刚开始我想的是从后往前推，但是还是被该跳哪一格所困扰；后来又转换了思路，只要跳过数组里的所有0，就是true，但根本无法实现。</p>
</blockquote>
<h2 id="跳跃游戏ii（Medium）"><a href="#跳跃游戏ii（Medium）" class="headerlink" title="跳跃游戏ii（Medium）"></a>跳跃游戏ii（Medium）</h2><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的第一个位置。</p>
<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>
<p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>
<p>假设你总是可以到达数组的最后一个位置。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [2,3,1,1,4]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 跳到最后一个位置的最小跳跃数是 2。</span><br><span class="line">     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [2,3,0,1,4]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>

<p>思路：</p>
<ul>
<li><p>局部最优：当前可移动距离尽可能多走，如果还没到终点，步数再加一，即每遍历下一个结点，获取最大范围，并且，如果遍历到了这一步的最大范围终点的话，就跳去下一步，</p>
<p>  每步是按遍历完这一步的最大范围算走完这一步</p>
<p>  <strong>找出当前这一步范围内的最大范围，来确定下一步到达的范围</strong></p>
</li>
<li><p>  整体最优：一步尽可能多走，从而达到最小步数</p>
</li>
</ul>
<p>思路虽然是这样，但在写代码的时候还不能真的就能跳多远跳远，那样就不知道下一步最远能跳到哪里了。</p>
<p><strong>所以真正解题的时候，要从覆盖范围出发，不管怎么跳，覆盖范围内一定是可以跳到的，以最小的步数增加覆盖范围，覆盖范围一旦覆盖了终点，得到的就是最小步数！</strong></p>
<p><strong>这里需要统计两个覆盖范围，当前这一步的最大覆盖和下一步最大覆盖</strong>。</p>
<p><img src="/2021/11/13/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8Fii.gif" alt="跳跃游戏ii"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;  <span class="comment">//记录当前覆盖最大范围</span></span><br><span class="line">        <span class="keyword">int</span> next = <span class="number">0</span>; <span class="comment">//记录当前索引的覆盖范围</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取下一步覆盖的最大范围</span></span><br><span class="line">            next = <span class="built_in">max</span>(next, nums[i] + i);</span><br><span class="line">            <span class="comment">//遍历到当前覆盖的最大范围时，到当前范围终点时，直接跳下一个范围</span></span><br><span class="line">            <span class="keyword">if</span> (i == cur)</span><br><span class="line">            &#123;</span><br><span class="line">                count++;</span><br><span class="line">                cur = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  心得：</p>
<p>  刚开始做这题的时候，我是想着，选格跳的，从[i+1,i+nums[i]]里找出最大值来跳，这样就不用遍历每个数，但好像设计的有点问题，后来看题解，原来又是用范围来解，而且遍历每个数，到了这一步终点就跳下一步，我画了图才明白，哎。</p>
</blockquote>
<h2 id="1005-K-次取反后最大化的数组和（Easy）"><a href="#1005-K-次取反后最大化的数组和（Easy）" class="headerlink" title="1005.K 次取反后最大化的数组和（Easy）"></a>1005.K 次取反后最大化的数组和（Easy）</h2><p>思路：</p>
<ul>
<li><p>局部最优：每次找出数组中最小的值来取反</p>
<p>  也就是负数取反就变正的了，对数组和有利，如果全都是正数，那当然也是取最小的正数来取反，这样对数组和影响最小</p>
</li>
<li><p>  全局最优：整个数组和达到最大</p>
</li>
</ul>
<p>但我这方法有缺点，时间复杂度高$O(n*k)$，而且当负数被全部取反后，它一直循环取反最小的非负数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestSumAfterKNegations</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> numMin = INT32_MAX;<span class="comment">//记录最小值，这里初始化为最大值，不然有可能找不出最小值</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;<span class="comment">//记录最小值的索引</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (numMin &gt; nums[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    numMin = nums[j];</span><br><span class="line">                    index = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[index] = -nums[index];<span class="comment">//取反找到的最小值</span></span><br><span class="line">            numMin = INT32_MAX;<span class="comment">//重置最小值为最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>代码随想录中的思路是<strong>将负数和非负数分开处理</strong>，而且将负数取反后，反复取反一个数作了优化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* @Author : Carl */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a) &gt; <span class="built_in">abs</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">largestSumAfterKNegations</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一步:将数组按照绝对值大小从大到小排序，注意要按照绝对值的大小</span></span><br><span class="line">        <span class="built_in">sort</span>(A.<span class="built_in">begin</span>(), A.<span class="built_in">end</span>(), cmp);       </span><br><span class="line">        <span class="comment">// 第二步:从前向后遍历，遇到负数将其变为正数，同时K--</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123; </span><br><span class="line">            <span class="keyword">if</span> (A[i] &lt; <span class="number">0</span> &amp;&amp; K &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                A[i] *= <span class="number">-1</span>;</span><br><span class="line">                K--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (K % <span class="number">2</span> == <span class="number">1</span>) A[A.<span class="built_in">size</span>() - <span class="number">1</span>] *= <span class="number">-1</span>; <span class="comment">// 第三步:如果K还大于0，那么反复转变数值最小的元素，将K用完，（这里如果剩余的k是偶数，取反两次还是它本身）</span></span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : A) result += a;        <span class="comment">// 第四步:求和</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  心得：</p>
<p>  这题做出来了，而且思路很清晰，知道局部最优是找出最小值然后取反，这样才能对数组和最有利。看了 代码随想录题解后，茅塞顿开，知道自己写的代码有很多地方需要优化。</p>
</blockquote>
<h2 id="134-加油站（Medium）"><a href="#134-加油站（Medium）" class="headerlink" title="134.加油站（Medium）"></a>134.加油站（Medium）</h2><p>我的想法：</p>
<ul>
<li>  局部最优：起点从索引0开始试，如果中途油量小于0，那直接换下一个起点，如果走完一圈之后，油量是大于等于0，那这个起点可以</li>
<li>  全局最优：保证油量大于等于0的情况下走最远的路。</li>
</ul>
<p>但是这样做，思路可行，但是力扣超时了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;gas, vector&lt;<span class="keyword">int</span>&gt; &amp;cost)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = gas.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> curSum = <span class="number">0</span>; <span class="comment">// 每天剩余油量之和</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start&lt;n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//求和每天剩余的油量</span></span><br><span class="line">            curSum += gas[i]-cost[i];</span><br><span class="line">            i = (i + <span class="number">1</span>) % n;<span class="comment">//下一个结点</span></span><br><span class="line">            <span class="comment">// 如果油量之和小于0，则肯定不是这个为起点，立即停止从下一个点开始</span></span><br><span class="line">            <span class="keyword">if</span> (curSum &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                start++; <span class="comment">//下一个起点</span></span><br><span class="line">                i = start;</span><br><span class="line">                curSum = <span class="number">0</span>; <span class="comment">//重置</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (curSum &gt;= <span class="number">0</span> &amp;&amp; i == start)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> start;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>Carl哥的思路：</p>
<p>直接从全局进行贪心：</p>
<ul>
<li>  情况一：如果gas的总和小于cost总和，那么无论从哪里出发，一定是跑不了一圈的</li>
<li>  情况二：rest[i] = gas[i]-cost[i]为一天剩下的油，i从0开始计算累加到最后一站，如果累加没有出现负数，说明从0出发，油就没有断过，那么0就是起点。</li>
<li>  情况三：如果累加的最小值是负数，汽车就要从非0节点出发，从后向前，看哪个节点能这个负数填平，能把这个负数填平的节点就是出发节点。</li>
</ul>
<p>他说这不算是贪心，因为没有全局最优</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;gas, vector&lt;<span class="keyword">int</span>&gt; &amp;cost)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> curSum = <span class="number">0</span>;    <span class="comment">// 每天剩余油量之和</span></span><br><span class="line">        <span class="keyword">int</span> min = INT_MAX; <span class="comment">// 从起点出发，油箱里的油量最小值</span></span><br><span class="line">        <span class="keyword">int</span> n = gas.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> rest= gas[i]-cost[i]; <span class="comment">// 剩余的油量</span></span><br><span class="line">            curSum+=rest;</span><br><span class="line">            <span class="comment">//记录最小油量</span></span><br><span class="line">            <span class="keyword">if</span>(curSum&lt;min)</span><br><span class="line">                min=curSum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果剩余油量是负数，那肯定跑不完整圈</span></span><br><span class="line">        <span class="keyword">if</span>(curSum&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//这个最小油量只要不是正数，这里都不是起点，因为从这出发，跑完全程邮箱是负的</span></span><br><span class="line">        <span class="keyword">if</span>(min&gt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//判断哪个是起点，一定要从后往前加剩余的油量，因为车是从左到右开的</span></span><br><span class="line">        <span class="comment">//因为min是从左到右的最小油量，负数即欠油量，那么这个最小油量就相当于是所需的总油量</span></span><br><span class="line">        <span class="comment">//如果刚好min是非负数，则这就是终点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> rest=gas[i]-cost[i];</span><br><span class="line">            min+=rest;</span><br><span class="line">            <span class="keyword">if</span>(min&gt;=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>  心得：</p>
<p>  这题太搞了，我的想法被两个力扣 n 个0的数组给干碎了，运行超时了。</p>
<p>  后来看代码随想录题解，我觉得不是那么好理解，虽然是分情况来判断，但我觉得做贪心的题以来最巧妙就这题了。</p>
</blockquote>
<h2 id="135-分发糖果（Hard）"><a href="#135-分发糖果（Hard）" class="headerlink" title="135.分发糖果（Hard）"></a>135.分发糖果（Hard）</h2><p>思路：</p>
<ul>
<li>  局部最优：只要右边评分比左边大，右边的孩子就多一个糖果</li>
<li>  全局最优：相邻的孩子中，评分高的右孩子获得比左边孩子更多的糖果</li>
</ul>
<p>这道题目一定是要确定一边之后，再确定另一边，例如比较每一个孩子的左边，然后再比较右边，<strong>如果两边一起考虑一定会顾此失彼</strong>。</p>
<p>这里先确定右边评分大于左边的情况</p>
<p>如果 ratings[i] &gt; ratings[i - 1] 那么 [i] 的糖 一定要比 [i - 1] 的糖多一个，所以贪心：candyVec[i] = candyVec[i - 1] + 1</p>
<p><img src="/2021/11/13/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C%E4%BB%8E%E5%B7%A6%E5%88%B0%E5%8F%B3.png" alt="分发糖果从左到右"></p>
<p>再确定左边评分大于右边的情况，如果 ratings[i] &gt; ratings[i + 1]，此时candyVec[i]（第i个小孩的糖果数量）就有两个选择了，一个是candyVec[i + 1] + 1（从右边这个加1得到的糖果数量），一个是 candyVec[i]（之前比较右孩子大于左孩子得到的糖果数量）。</p>
<p>那么又要贪心了，<strong>局部最优</strong>：取 candyVec[i + 1] + 1 和 candyVec[i] 最大的糖果数量，保证第i个小孩的糖果数量即大于左边的也大于右边的。<strong>全局最优</strong>：相邻的孩子中，评分高的孩子获得更多的糖果。</p>
<p><img src="/2021/11/13/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C%E4%BB%8E%E5%8F%B3%E5%90%91%E5%B7%A6.png" alt="分发糖果从右向左"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">candy</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;ratings)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = ratings.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">candyVec</span><span class="params">(n,<span class="number">1</span>)</span></span>; <span class="comment">// 里面元素全部赋值为1，因为至少发一颗</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从左到右判断并分发糖果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123; <span class="comment">// 右边比左边大，则右边糖果是左边糖果+1</span></span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt; ratings[i - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                candyVec[i] = candyVec[i - <span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从右到左判断，并分发糖果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123; <span class="comment">// 左边比右边大的话，给左边执行操作</span></span><br><span class="line">            <span class="keyword">if</span>(ratings[i+<span class="number">1</span>]&lt;ratings[i])</span><br><span class="line">            &#123; <span class="comment">// 这里取最大值，是因为像这样[1,3,4,5,2]前面是递增序列，突然断了，则2的糖果+1肯定比5原本的少</span></span><br><span class="line">                candyVec[i]=<span class="built_in">max</span>(candyVec[i+<span class="number">1</span>]+<span class="number">1</span>,candyVec[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//求和</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=candyVec[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>  心得：</p>
<p>  刚开始，根本不知道题目啥意思，后来看了代码随想录思路后，知道题目啥意思了，自己写出来了，就是从右向左的candy数出错了，没有取最大值。其实这个难题也不是很难，难就难在理解题目，还有容易忽略的取最大值。这道题就是用两次贪心思维，分开从左到右和从右到左去遍历执行操作。</p>
</blockquote>
]]></content>
      <categories>
        <category>贪心算法</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>算法</tag>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫</title>
    <url>/2021/09/28/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="Python爬虫"><a href="#Python爬虫" class="headerlink" title="Python爬虫"></a>Python爬虫</h1><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。</p>
<p>目前如果你在 <a href="https://www.python.org/">python.org</a> 下载最新版本的安装包，则是已经自带了该工具。</p>
<p><em>注意：Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。</em></p>
<p>pip 官网：<a href="https://pypi.org/project/pip/">https://pypi.org/project/pip/</a></p>
<p>你可以通过以下命令来判断是否已安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip --version     # Python2.x 版本命令</span><br><span class="line">pip3 --version    # Python3.x 版本命令</span><br></pre></td></tr></table></figure>

<p>你也可以通过以下命令来安装pip：</p>
<p><strong>官网方法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pip</span><br></pre></td></tr></table></figure>

<p><strong>菜鸟教程方法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py   # 下载安装脚本</span><br><span class="line">sudo python get-pip.py    # 运行安装脚本</span><br></pre></td></tr></table></figure>



<hr>
<ol>
<li><p>通用爬虫：<br>抓取系统重要组成部分。抓取的是一整张页面数据。</p>
</li>
<li><p>聚焦爬虫：<br>是建立在通用爬虫的基础之上。抓取的是页面中特定的局部内容。</p>
</li>
<li><p>增量式爬虫：<br>检测网站中数据更新的情况。只会抓取网站中最新更新出来的数据。</p>
</li>
</ol>
<h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><ul>
<li>概念：就是服务器和客户端进行数据交互的一种形式。<br>常用请求头信息</li>
<li>User-Agent：请求载体的身份标识</li>
<li>Connection：请求完毕后，是断开连接还是保持连接</li>
</ul>
<p>常用响应头信息</p>
<ul>
<li>Content-Type：服务器响应回客户端的数据类型</li>
</ul>
<h2 id="https协议"><a href="#https协议" class="headerlink" title="https协议"></a>https协议</h2><ul>
<li>安全的超文本传输协议</li>
</ul>
<p>加密方式</p>
<ul>
<li>对称秘钥加密</li>
<li>非对称秘钥加密</li>
<li>证书秘钥加密</li>
</ul>
<hr>
<h1 id="通用爬虫"><a href="#通用爬虫" class="headerlink" title="通用爬虫"></a>通用爬虫</h1><p>在python实现的网络爬虫中，用于网络请求发送的模块有两种，第一种为urllib模块，第二种为requests模块。urllib模块是一种比较古老的模块，在使用的过程中较为繁琐和不便。当requests模块出现后，就快速的代替了urllib模块，因此，在我们课程中，推荐大家使用requests模块。</p>
<h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a><em><strong>模板</strong></em></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#先指定需要访问的url，ajax则访问ajax生成的包的url</span></span><br><span class="line">url=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#定制请求头信息，相关的头信息必须封装在字典结构中</span></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="comment">#定制请求头中的User-Agent参数，当然也可以定制请求头中其他的参数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#定制请求携带的参数(get可带可不带，post必带),一样用字典封装</span></span><br><span class="line">data = &#123;<span class="comment">#code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#发起get请求，获取响应对象(data可加可不加)</span></span><br><span class="line">response = requests.get(url=url,headers=headers,data=data)</span><br><span class="line"><span class="comment">#或者发起post请求，获取响应对象</span></span><br><span class="line">response = requests.post(url=url,headers=headers,data=data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取文本信息</span></span><br><span class="line">text = response.text</span><br><span class="line"><span class="comment">#若将图片保存</span></span><br><span class="line">photo = response.content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>,encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:<span class="comment">#编码模式自调</span></span><br><span class="line">    f.write(photo)</span><br><span class="line"></span><br><span class="line">	</span><br></pre></td></tr></table></figure>









<h3 id="为什么要使用requests模块"><a href="#为什么要使用requests模块" class="headerlink" title="为什么要使用requests模块"></a>为什么要使用requests模块</h3><ul>
<li>在使用urllib模块的时候，会有诸多不便之处，总结如下：<ul>
<li>手动处理url编码</li>
<li>手动处理post请求参数</li>
<li>处理cookie和代理操作繁琐</li>
<li>……</li>
</ul>
</li>
<li>使用requests模块：<ul>
<li>自动处理url编码</li>
<li>自动处理post请求参数</li>
<li>简化cookie和代理操作</li>
<li>……</li>
</ul>
</li>
</ul>
<h3 id="安装requests模块"><a href="#安装requests模块" class="headerlink" title="安装requests模块"></a>安装requests模块</h3><p>用pip安装：<code>pip install requests</code></p>
<p>Pycharm安装：文件 -&gt; 设置 -&gt; 项目 -&gt; python解释器 -&gt; ➕ ，然后搜索名字</p>
<h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><ol>
<li>指定url</li>
<li>UA伪装</li>
<li>请求参数的处理</li>
<li>发起请求</li>
<li>获取响应数据</li>
<li>持久化存储</li>
</ol>
<h3 id="第一个爬虫程序"><a href="#第一个爬虫程序" class="headerlink" title="第一个爬虫程序"></a>第一个爬虫程序</h3><ul>
<li><strong>需求：爬取搜狗首页的页面数据</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#step_1:指定url</span></span><br><span class="line">url = <span class="string">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class="line"><span class="comment">#step_2:发起请求:使用get方法发起get请求，该方法会返回一个响应对象。参数url表示请求对应的url</span></span><br><span class="line">response = requests.get(url=url)</span><br><span class="line"><span class="comment">#step_3:获取响应数据:通过调用响应对象的text属性，返回响应对象中存储的字符串形式的响应数据（页面源码数据）</span></span><br><span class="line">page_text = response.text</span><br><span class="line"><span class="comment">#step_4:持久化存储</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./sogou.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;爬取数据完毕！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="反反爬"><a href="#反反爬" class="headerlink" title="反反爬"></a>反反爬</h3><p>由于用程序访问别人服务器速度太快太频繁，使服务器设置了检测是否是人为操作，否则拦截</p>
<h4 id="UA伪装"><a href="#UA伪装" class="headerlink" title="UA伪装"></a>UA伪装</h4><ul>
<li><p>UA：请求载体的身份标识，使用浏览器发起的请求，请求载体的身份标识为浏览器，使用爬虫程序发起的请求，请求载体为爬虫程序。</p>
</li>
<li><p>UA检测：相关的门户网站通过检测请求该网站的载体身份来辨别该请求是否为爬虫程序，如果是，则网站数据请求失败。因为正常用户对网站发起的请求的载体一定是基于某一款浏览器，如果网站检测到某一请求载体身份标识不是基于浏览器的，则让其请求失败。因此，UA检测是我们整个课程中遇到的第二种反爬机制，第一种是robots协议。</p>
</li>
<li><p>UA伪装：通过修改/伪装爬虫请求的User-Agent来破解UA检测这种反爬机制</p>
</li>
<li></li>
</ul>
<p>以谷歌浏览器和爬取搜狗首页的页面数据为例：</p>
<ol>
<li><p>先进去想爬的网站，按F12，找到Request Headers下的User-Agent</p>
</li>
<li><p>用一个字典来装起来</p>
</li>
<li><p>```python<br>headers={<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.54 Safari/537.36}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 请求时带headers参数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 基于requests模块的get请求</span><br><span class="line"></span><br><span class="line">- 例子：爬取搜狗指定词条对应的搜索结果页面（简易网页采集器）</span><br><span class="line"></span><br><span class="line">程序所在目录会保存名为指定词的html文件</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import requests</span><br><span class="line">#指定搜索关键字</span><br><span class="line">word = input(&#x27;enter a word you want to search:&#x27;)</span><br><span class="line">#自定义请求头信息:UA伪装,将包含了User-Agent的字典作用到请求方法的headers参数中即可</span><br><span class="line">headers=&#123;</span><br><span class="line">    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">#指定url，原始url可能是https://www.sogou.com/web?query=撩妹，发现该url携带了参数</span><br><span class="line">url = &#x27;https://www.sogou.com/web&#x27;</span><br><span class="line">#封装get请求参数：如果请求携带了参数，则可以将参数封装到字典中结合这requests请求方法中的data/params参数进行url参数的处理</span><br><span class="line">param = &#123;</span><br><span class="line">    &#x27;query&#x27;:word,</span><br><span class="line">&#125;</span><br><span class="line">#发起请求</span><br><span class="line">response = requests.get(url=url,params=param,headers=headers)</span><br><span class="line">#获取响应数据</span><br><span class="line">page_text = response.text</span><br><span class="line">#持久化存储</span><br><span class="line">fileName = word+&#x27;.html&#x27;</span><br><span class="line">with open(fileName,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp:</span><br><span class="line">    fp.write(page_text)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="基于requests模块的post请求"><a href="#基于requests模块的post请求" class="headerlink" title="基于requests模块的post请求"></a>基于requests模块的post请求</h3><p><strong>post请求必须含data参数</strong></p>
<ul>
<li>例子：破解百度翻译</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&#x27;enter a English word:&#x27;</span>)</span><br><span class="line"><span class="comment">#自定义请求头信息:UA伪装,将包含了User-Agent的字典作用到请求方法的headers参数中即可</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#指定url，原始url可能是https://www.sogou.com/web?query=撩妹，发现该url携带了参数</span></span><br><span class="line">url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line"><span class="comment">#封装post请求参数：如果请求携带了参数，则可以将参数封装到字典中结合这requests请求方法中的data/params参数进行url参数的处理</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:word,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#发起请求</span></span><br><span class="line">response = requests.post(url=url,data=data,headers=headers)</span><br><span class="line"><span class="comment">#获取响应数据:如果响应回来的数据为json，则可以直接调用响应对象的json方法获取json对象数据</span></span><br><span class="line">json_data = response.json()</span><br><span class="line"><span class="comment">#从json中解析出结果</span></span><br><span class="line">tr_word = json_data[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;v&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(tr_word)</span><br><span class="line"><span class="comment">#持久化存储</span></span><br><span class="line">fileName = word+<span class="string">&#x27;.json&#x27;</span></span><br><span class="line">fp = <span class="built_in">open</span>(fileName,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">json.dump(json_data,fp,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>



<h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><h4 id="基于requests模块ajax的get请求"><a href="#基于requests模块ajax的get请求" class="headerlink" title="基于requests模块ajax的get请求"></a>基于requests模块ajax的get请求</h4><p>ajax技术：使网页能够快速地将增量更新曾现在用户界面，而不需要重载（刷新）整个页面，这使得程序能够更快地回应用户的操作。</p>
<p>简单来说就是：动态加载页面，局部加载页面</p>
<ul>
<li>需求：爬取豆瓣电影分类排行榜 <a href="https://movie.douban.com/%E4%B8%AD%E7%9A%84%E7%94%B5%E5%BD%B1%E8%AF%A6%E6%83%85%E6%95%B0%E6%8D%AE">https://movie.douban.com/中的电影详情数据</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#指定ajax-get请求的url（通过抓包进行获取）</span></span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list?&#x27;</span></span><br><span class="line">    <span class="comment">#定制请求头信息，相关的头信息必须封装在字典结构中</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="comment">#定制请求头中的User-Agent参数，当然也可以定制请求头中其他的参数</span></span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#定制get请求携带的参数(从抓包工具中获取)</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;interval_id&#x27;</span>:<span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>:<span class="string">&#x27;20&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#发起get请求，获取响应对象</span></span><br><span class="line">    response = requests.get(url=url,headers=headers,params=param)</span><br><span class="line">    <span class="comment">#获取响应内容</span></span><br><span class="line">    <span class="built_in">print</span>(response.json())</span><br></pre></td></tr></table></figure>



<h4 id="基于requests模块ajax的post请求"><a href="#基于requests模块ajax的post请求" class="headerlink" title="基于requests模块ajax的post请求"></a>基于requests模块ajax的post请求</h4><p>通过浏览器抓包，找到ajax请求的url，并且是带参数的，带参数post它，</p>
<h3 id="response-text-与-response-content区别"><a href="#response-text-与-response-content区别" class="headerlink" title="response.text 与 response.content区别"></a>response.text 与 response.content区别</h3><ul>
<li>返回的数据类型<ul>
<li>response.text 返回的是一个 unicode 型的文本数据</li>
<li>response.content 返回的是 bytes 型的二进制数据</li>
</ul>
</li>
</ul>
<p><strong>也就是说如果想取文本数据可以通过response.text 如果想取图片，文件，则可以通过 response.content</strong></p>
<ul>
<li>数据编码<ul>
<li>response.content 返回的是二进制响应内容</li>
<li>response.text 则是默认”iso-8859-1”编码，服务器不指定的话是根据网页的响应来猜测编码。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><h4 id="使用官方库json"><a href="#使用官方库json" class="headerlink" title="使用官方库json"></a>使用官方库json</h4><p><strong>使用时需包含</strong><code>import json</code></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>json.dumps()</td>
<td>将 Python 对象编码成 JSON 字符串</td>
</tr>
<tr>
<td>json.loads()</td>
<td>将已编码的 JSON 字符串解码为 Python 对象</td>
</tr>
</tbody></table>
<h5 id="json-dumps"><a href="#json-dumps" class="headerlink" title="json.dumps()"></a>json.dumps()</h5><p>将python的数据类型转换成json字串</p>
<p>函数原型：</p>
<p><code>json.dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding=&quot;utf-8&quot;, default=None, sort_keys=False, **kw)</code></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>sort_keys</td>
<td>是否排序</td>
</tr>
<tr>
<td>indent</td>
<td>定义缩进大小</td>
</tr>
<tr>
<td>separators</td>
<td>是一个元组，定义分隔符的类型</td>
</tr>
<tr>
<td>skipkeys</td>
<td>是否允许JSON字串编码字典对象时，字典的key不是字符串类型（默认是不允许）</td>
</tr>
</tbody></table>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [ &#123; <span class="string">&#x27;a&#x27;</span> : <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span> : <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span> : <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span> : <span class="number">5</span> &#125; ]</span><br><span class="line"></span><br><span class="line">data2 = json.dumps(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">7</span>&#125;, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;: &#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(data2)</span><br></pre></td></tr></table></figure>

<p>以上代码执行结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;a&quot;: &quot;Runoob&quot;,</span><br><span class="line">    &quot;b&quot;: 7</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>python原始类型向json类型的转化对照表</strong></p>
<table>
<thead>
<tr>
<th>python</th>
<th>json</th>
</tr>
</thead>
<tbody><tr>
<td>dict</td>
<td>object</td>
</tr>
<tr>
<td>list,tuple</td>
<td>array</td>
</tr>
<tr>
<td>str,unicode</td>
<td>string</td>
</tr>
<tr>
<td>int,long,float</td>
<td>number</td>
</tr>
<tr>
<td>True</td>
<td>true</td>
</tr>
<tr>
<td>False</td>
<td>false</td>
</tr>
<tr>
<td>None</td>
<td>null</td>
</tr>
</tbody></table>
<h5 id="json-loads"><a href="#json-loads" class="headerlink" title="json.loads"></a>json.loads</h5><p>函数原型：</p>
<p><code>json.loads(s[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])</code></p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">jsonData = <span class="string">&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">text = json.loads(jsonData)</span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure>

<p>以上代码执行结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;u&#x27;a&#x27;: 1, u&#x27;c&#x27;: 3, u&#x27;b&#x27;: 2, u&#x27;e&#x27;: 5, u&#x27;d&#x27;: 4&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="使用第三方库：Demjson"><a href="#使用第三方库：Demjson" class="headerlink" title="使用第三方库：Demjson"></a>使用第三方库：Demjson</h4><p><strong>下载</strong>：</p>
<ul>
<li>pip安装</li>
<li>pycharm安装</li>
</ul>
<p><strong>使用前需包含<code>import demjson</code></strong></p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">encode</td>
<td align="left">将 Python 对象编码成 JSON 字符串</td>
</tr>
<tr>
<td align="left">decode</td>
<td align="left">将已编码的 JSON 字符串解码为 Python 对象</td>
</tr>
</tbody></table>
<h5 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h5><p>函数原型：<code>demjson.encode(self, obj, nest_level=0)</code></p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> demjson</span><br><span class="line"></span><br><span class="line">data = [ &#123; <span class="string">&#x27;a&#x27;</span> : <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> : <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span> : <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span> : <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span> : <span class="number">5</span> &#125; ]</span><br><span class="line"></span><br><span class="line">json = demjson.encode(data)</span><br><span class="line"><span class="built_in">print</span>(json)</span><br></pre></td></tr></table></figure>

<p>以上代码执行结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;]</span><br></pre></td></tr></table></figure>



<h5 id="decode"><a href="#decode" class="headerlink" title="decode"></a>decode</h5><p>函数原型：<code>demjson.decode(self, txt)</code></p>
<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> demjson</span><br><span class="line"></span><br><span class="line">json = <span class="string">&#x27;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">text = demjson.decode(json)</span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure>

<p>以上代码执行结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;u&#x27;a&#x27;: 1, u&#x27;c&#x27;: 3, u&#x27;b&#x27;: 2, u&#x27;e&#x27;: 5, u&#x27;d&#x27;: 4&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h1><p>爬取基于某些用户的用户信息</p>
<h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>两种方法：</p>
<ol>
<li><strong>自动打码</strong><ul>
<li>requests方法：保存了验证码图片，传给打码平台，打码平台返回验证码，再用post传参请求</li>
<li>selenium方法：保存了验证码图片，传给打码平台，打码平台返回验证码，或验证码坐标，控制鼠标或键盘输入</li>
</ul>
</li>
<li><strong>手动打码</strong><ol>
<li>保存了图片，手动输入</li>
</ol>
</li>
</ol>
<p><strong>打码平台：</strong></p>
<p>超级鹰🦅：<a href="https://www.chaojiying.com/user/login/%EF%BC%88%E5%87%86%E7%A1%AE%E7%8E%87%E4%B8%8D%E9%AB%98%EF%BC%89%EF%BC%88%E8%BF%98%E6%9C%89%E7%A7%AF%E5%88%86%EF%BC%89">https://www.chaojiying.com/user/login/（准确率不高）（还有积分）</a></p>
<h2 id="requests与selenium模拟登录区别"><a href="#requests与selenium模拟登录区别" class="headerlink" title="requests与selenium模拟登录区别"></a>requests与selenium模拟登录区别</h2><ul>
<li>requests无法解析动态加载的页面数据，如 css 和 JavaScript 动态加载的页面数据，而selenium可以解析动态加载的页面数据</li>
<li>requests访问速度稍比selenium快，<em>个人觉得</em>，requests直接访问服务器url，而selenium需要加载页面</li>
</ul>
<h2 id="用requests模拟登录（局限）"><a href="#用requests模拟登录（局限）" class="headerlink" title="用requests模拟登录（局限）"></a>用requests模拟登录（局限）</h2><ol>
<li><p>首先在需要模拟登录的网站进行一次登陆，通过浏览器抓包，抓取登陆所需的信息</p>
<p><img src="/2021/09/28/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8A%93%E5%8C%85.png" alt="alt 图片"></p>
</li>
</ol>
<ol start="2">
<li><p>其次，需要get请求获取验证码图片，然后传至打码平台，打码平台返回验证码，再用post方法将验证码结果带上，去请求抓包回来的url</p>
</li>
<li><p>最后请求响应回来的数据即为登陆后的页面源码</p>
</li>
</ol>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>暂无！</p>
<h2 id="用selenium模拟登录（常用）"><a href="#用selenium模拟登录（常用）" class="headerlink" title="用selenium模拟登录（常用）"></a>用selenium模拟登录（常用）</h2><ol>
<li>访问url</li>
<li>解析出并保存验证码图片，上传至打码平台</li>
<li>打码平台返回结果输入到验证码框中</li>
<li>点击登陆</li>
<li>最后用.page_source获取页面源码</li>
</ol>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>爬取广州华商学院个人课表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;   chromedriver.exe谷歌浏览器驱动必须在源文件同一目录下    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#死蓝鸟爬虫包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#时间包</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment">#Edge浏览器包</span></span><br><span class="line"><span class="keyword">from</span> msedge.selenium_tools <span class="keyword">import</span>  Edge,EdgeOptions</span><br><span class="line"><span class="comment">#谷歌无头浏览器包</span></span><br><span class="line"><span class="comment">#from selenium.webdriver.chrome.options import Options</span></span><br><span class="line"><span class="comment">#死蓝鸟规避检测包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"><span class="comment">#死蓝鸟动作链包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="comment">#动作链键盘包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="comment">#时间包</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,username,password</span>):</span></span><br><span class="line">        self.u = username</span><br><span class="line">        self.p = password</span><br><span class="line"></span><br><span class="line">    <span class="comment">#登陆</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.username.send_keys(self.u)</span><br><span class="line">        self.password.send_keys(self.p)</span><br><span class="line">        <span class="comment">#回车</span></span><br><span class="line">        ActionChains(self.bro).send_keys(Keys.ENTER).perform()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#选择周次</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click_week</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取周次标签</span></span><br><span class="line">        week_button = self.bro.find_element_by_id(<span class="string">&#x27;week&#x27;</span>)</span><br><span class="line">        <span class="comment"># 点击周次</span></span><br><span class="line">        week_button.click()</span><br><span class="line">        <span class="comment"># 获取周次</span></span><br><span class="line">        self.get_week_num()</span><br><span class="line">        <span class="comment"># 等待加载网页</span></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="comment"># 获取对应周次标签</span></span><br><span class="line">        s_xpath = <span class="string">&#x27;//*[@id=&quot;week&quot;]/option[&#x27;</span> + <span class="built_in">str</span>(self.week_num + <span class="number">1</span>) + <span class="string">&#x27;]&#x27;</span></span><br><span class="line">        week_choice = self.bro.find_element_by_xpath(s_xpath)</span><br><span class="line">        week_choice.click()</span><br><span class="line">    <span class="comment">#获取周次</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_week_num</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取周次</span></span><br><span class="line">        self.week_num = <span class="built_in">int</span>(datetime.datetime.now().isocalendar()[<span class="number">1</span>] - datetime.datetime(<span class="number">2021</span>, <span class="number">8</span>, <span class="number">23</span>).isocalendar()[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;周次：&#x27;</span>, self.week_num)</span><br><span class="line">        <span class="comment"># 获取星期</span></span><br><span class="line">        self.week_day = datetime.datetime.now().isocalendar()[<span class="number">2</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;星期：&#x27;</span>, self.week_day)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取所有课并保存在列表中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_class_and_save_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取一周内所有课</span></span><br><span class="line">        all_classes = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">            s_selector = <span class="string">&#x27;#kbLoading &gt; table &gt; tbody &gt; tr:nth-child(&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">            classes = self.bro.find_element_by_css_selector(s_selector)</span><br><span class="line">            all_classes.append(classes)</span><br><span class="line">        <span class="comment"># print(all_classes)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历所有课并保存在列表中</span></span><br><span class="line">        self.all_classes_inf = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">9</span>):</span><br><span class="line">            everyday_class = []</span><br><span class="line">            <span class="keyword">for</span> clas <span class="keyword">in</span> all_classes:</span><br><span class="line">                s_selector = <span class="string">&#x27;td:nth-child(&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;) div&#x27;</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    class_s = clas.find_element_by_css_selector(s_selector).get_attribute(<span class="string">&quot;textContent&quot;</span>)</span><br><span class="line">                    everyday_class.append(class_s)</span><br><span class="line">                    <span class="comment"># print(class_s)</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="comment"># print(None)</span></span><br><span class="line">                    everyday_class.append(<span class="literal">None</span>)</span><br><span class="line">            self.all_classes_inf.append(everyday_class)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#print(&#x27;    --------------------&#x27;)</span></span><br><span class="line">        <span class="comment"># print(all_classes_inf)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#处理数据，得出最终课表数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_end_class_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.end_all_classes = []</span><br><span class="line">        <span class="keyword">for</span> day <span class="keyword">in</span> self.all_classes_inf:</span><br><span class="line">            end_day_classes = []</span><br><span class="line">            <span class="keyword">for</span> clas <span class="keyword">in</span> day:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    classs = []</span><br><span class="line">                    data = <span class="built_in">str</span>(clas).split(<span class="string">&#x27;学分：&#x27;</span>)</span><br><span class="line">                    class_name = data[<span class="number">0</span>]</span><br><span class="line">                    classs.append(class_name)</span><br><span class="line"></span><br><span class="line">                    time_data = <span class="built_in">str</span>(clas).split(<span class="string">&#x27;0&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].split(<span class="string">&#x27;节&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                    class_time = <span class="string">&#x27;0&#x27;</span> + time_data + <span class="string">&#x27;节&#x27;</span></span><br><span class="line">                    classs.append(class_time)</span><br><span class="line"></span><br><span class="line">                    class_place = <span class="built_in">str</span>(clas).split(<span class="string">&#x27;节&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;第&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                    classs.append(class_place)</span><br><span class="line"></span><br><span class="line">                    class_week = <span class="built_in">str</span>(self.week_num)</span><br><span class="line">                    classs.append(class_week)</span><br><span class="line"></span><br><span class="line">                    class_day = <span class="built_in">str</span>(clas).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                    classs.append(class_day)</span><br><span class="line"></span><br><span class="line">                    end_day_classes.append(classs)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    end_day_classes.append(<span class="literal">None</span>)</span><br><span class="line">                <span class="comment"># print(classs)</span></span><br><span class="line">            self.end_all_classes.append(end_day_classes)</span><br><span class="line">            <span class="comment"># print(end_day_classes)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(end_all_classes)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            0.    退出</span></span><br><span class="line"><span class="string">            1.  上午课表</span></span><br><span class="line"><span class="string">            2.  下午课表</span></span><br><span class="line"><span class="string">            3.  晚上课表</span></span><br><span class="line"><span class="string">            4.  今天课表</span></span><br><span class="line"><span class="string">            5.  明天课表</span></span><br><span class="line"><span class="string">            6.按星期查课表</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>)</span><br><span class="line">            choise = <span class="built_in">input</span>(<span class="string">&#x27;请选择序号：&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">            <span class="comment"># 上午课表</span></span><br><span class="line">            <span class="keyword">if</span> choise == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (self.end_all_classes[self.week_day - <span class="number">1</span>][<span class="number">0</span>] == <span class="literal">None</span>) <span class="keyword">and</span> (self.end_all_classes[self.week_day - <span class="number">1</span>][<span class="number">1</span>] == <span class="literal">None</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;幸运的是 你早上没课!&#x27;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;这不继续睡？&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;上午的课表：&#x27;</span>)</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2</span>):</span><br><span class="line">                        <span class="comment">#今天早上的课表信息</span></span><br><span class="line">                        a = self.end_all_classes[self.week_day - <span class="number">1</span>][j]</span><br><span class="line">                        <span class="keyword">if</span> a == <span class="literal">None</span>:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="comment"># 打印课表</span></span><br><span class="line">                        self.print_classes(a)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 下午课表</span></span><br><span class="line">            <span class="keyword">elif</span> choise == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (self.end_all_classes[self.week_day - <span class="number">1</span>][<span class="number">2</span>] == <span class="literal">None</span>) <span class="keyword">and</span> (self.end_all_classes[self.week_day - <span class="number">1</span>][<span class="number">3</span>] == <span class="literal">None</span>):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;下午没课!&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;下午的课表：&#x27;</span>)</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">4</span>):</span><br><span class="line">                        <span class="comment">#今天下午的课表信息</span></span><br><span class="line">                        a = self.end_all_classes[self.week_day - <span class="number">1</span>][j]</span><br><span class="line">                        <span class="keyword">if</span> a == <span class="literal">None</span>:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        <span class="comment"># 打印课表</span></span><br><span class="line">                        self.print_classes(a)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 晚上课表</span></span><br><span class="line">            <span class="keyword">elif</span> choise == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> self.end_all_classes[self.week_day - <span class="number">1</span>][<span class="number">4</span>] == <span class="literal">None</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;晚上没课！&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;晚上的课表：&#x27;</span>)</span><br><span class="line">                    <span class="comment">#今天晚上的课表信息</span></span><br><span class="line">                    a = self.end_all_classes[self.week_day - <span class="number">1</span>][<span class="number">4</span>]</span><br><span class="line">                    <span class="keyword">if</span> a == <span class="literal">None</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="comment">#打印课表</span></span><br><span class="line">                    self.choose_classes(a)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 今天的课表</span></span><br><span class="line">            <span class="keyword">elif</span> choise == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                <span class="comment"># 处理并打印课表</span></span><br><span class="line">                self.day_classes(self.week_day)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#明天的课表</span></span><br><span class="line">            <span class="keyword">elif</span> choise == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                <span class="comment">#处理并打印课表</span></span><br><span class="line">                self.day_classes(self.week_day+<span class="number">1</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#按星期查课表</span></span><br><span class="line">            <span class="keyword">elif</span> choise == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">                c = <span class="built_in">input</span>(<span class="string">&#x27;想查星期几的课表：&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(c)&gt;<span class="number">7</span> <span class="keyword">and</span> <span class="built_in">int</span>(c)&lt;<span class="number">1</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;输入有误！&#x27;</span>)</span><br><span class="line">                <span class="comment">#换行</span></span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line">                <span class="comment">#处理并打印课表</span></span><br><span class="line">                self.day_classes(<span class="built_in">int</span>(c))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> choise == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;输入有误！&#x27;</span>)</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#处理课表，并打印</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">day_classes</span>(<span class="params">self,day</span>):</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        clas = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.end_all_classes[day - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="literal">None</span>:</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> num == <span class="number">5</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            clas.append(i)</span><br><span class="line">        <span class="keyword">if</span> num != <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> self.week_day == day:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;今天的课表：&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> self.week_day+<span class="number">1</span> == day:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;明天的课表：&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;星期&#x27;</span> + <span class="built_in">str</span>(day) + <span class="string">&#x27;的课表：&#x27;</span>)</span><br><span class="line">            <span class="comment">#打印课表</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> clas:</span><br><span class="line">                self.print_classes(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.week_day == day:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;今天没课&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> self.week_day + <span class="number">1</span> == day:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;明天没课&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;星期&#x27;</span> + <span class="built_in">str</span>(day) + <span class="string">&#x27;没课&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_classes</span>(<span class="params">self,i</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;课程：&#x27;</span> + i[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;时间：&#x27;</span> + i[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;地点：&#x27;</span> + i[<span class="number">2</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;周次：&#x27;</span> + i[<span class="number">3</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;星期：&#x27;</span> + i[<span class="number">4</span>])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;    --------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#   创建一个对象，规避检测，并加上无头浏览器（照抄）</span></span><br><span class="line">        <span class="comment">#Edge规避检测</span></span><br><span class="line">        edge_options = EdgeOptions()</span><br><span class="line">        <span class="comment">#使用谷歌内核</span></span><br><span class="line">        edge_options.use_chromium = <span class="literal">True</span></span><br><span class="line">        edge_options.add_argument(<span class="string">&#x27;--disable-blink-features=AutomationControlled&#x27;</span>)</span><br><span class="line">        <span class="comment"># 加上无头浏览器</span></span><br><span class="line">        <span class="comment">#edge_options.add_argument(&quot;--headless&quot;)</span></span><br><span class="line">        <span class="comment"># 谷歌文档提到需要加上这个属性来规避bug</span></span><br><span class="line">        edge_options.add_argument(<span class="string">&quot;disable-gpu&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;加载中...&#x27;</span>)</span><br><span class="line">        self.bro = Edge(executable_path=<span class="string">&#x27;./msedgedriver.exe&#x27;</span>,options=edge_options)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># #谷歌浏览器规避检测</span></span><br><span class="line">        <span class="comment"># option = Options()</span></span><br><span class="line">        <span class="comment"># option.add_experimental_option(&#x27;excludeSwitches&#x27;, [&#x27;enable-automation&#x27;])</span></span><br><span class="line">        <span class="comment"># #控制chrome以无界面模式打开</span></span><br><span class="line">        <span class="comment"># option.add_argument(&#x27;--headless&#x27;)</span></span><br><span class="line">        <span class="comment"># option.add_argument(&#x27;--disable-gpu&#x27;)</span></span><br><span class="line">        <span class="comment"># print(&#x27;加载中...&#x27;)</span></span><br><span class="line">        <span class="comment"># #实例化一个浏览器对象(executable_path是浏览器驱动路径，options是规避检测参数+无头浏览器参数)</span></span><br><span class="line">        <span class="comment"># #self.bro = webdriver.Chrome(executable_path=&#x27;./chromedriver.exe&#x27;,options=option)</span></span><br><span class="line">        <span class="comment">#让浏览器发起一个指定url对应请求</span></span><br><span class="line">        self.bro.get(<span class="string">&#x27;http://125.216.100.10:2888/jsxsd/&#x27;</span>)<span class="comment">#url</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#x27;</span>)</span><br><span class="line">        <span class="comment">#等待加载</span></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="comment">#获取账号密码标签</span></span><br><span class="line">        self.username = self.bro.find_element_by_id(<span class="string">&#x27;userAccount&#x27;</span>)</span><br><span class="line">        self.password = self.bro.find_element_by_id(<span class="string">&#x27;userPassword&#x27;</span>)</span><br><span class="line">        self.login()</span><br><span class="line">        <span class="comment"># 获取名字</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;憨批&#x27;</span>, self.bro.find_element_by_xpath(<span class="string">&#x27;/html/body/div[1]/div[2]/ul/li[5]/span&#x27;</span>).get_attribute(<span class="string">&#x27;textContent&#x27;</span>))</span><br><span class="line">        <span class="comment"># 换作用域</span></span><br><span class="line">        self.bro.switch_to.frame(<span class="string">&#x27;Frame0&#x27;</span>)</span><br><span class="line">        <span class="comment">#选择周次</span></span><br><span class="line">        self.click_week()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;处理中...&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取所有课并保存在列表中</span></span><br><span class="line">        self.get_class_and_save_list()</span><br><span class="line">        <span class="comment"># 处理数据，得出最终课表数据</span></span><br><span class="line">        self.get_end_class_list()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;----------------------------&#x27;</span>)</span><br><span class="line">        <span class="comment"># 退出浏览器</span></span><br><span class="line">        self.bro.quit()</span><br><span class="line">        <span class="comment">#运行菜单</span></span><br><span class="line">        self.menu()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    u = <span class="built_in">input</span>(<span class="string">&#x27;请输入学号：&#x27;</span>)</span><br><span class="line">    p = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">    s = Spider(u,p)</span><br><span class="line">    s.main()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;退出成功！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/28/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB/selenium.gif" alt="演示 GIF"></p>
<hr>
<h2 id="会话和Cookies"><a href="#会话和Cookies" class="headerlink" title="会话和Cookies"></a>会话和Cookies</h2><p>在浏览网站的过程中，我们经常会遇到需要登录的情况，有些页面只有登录之后才可以访问，而且登录之后可以连续访问很多次网站，但是有时候过一段时间就需要重新登录。还有一些网站，在打开浏览器时就自动登录了，而且很长时间都不会失效</p>
<h3 id="无状态HTTP"><a href="#无状态HTTP" class="headerlink" title="无状态HTTP"></a>无状态HTTP</h3><ul>
<li><p>HTTP的无状态指的是http协议对事物处理是没有记忆能力的，也就是说服务器不知道客户端是什么状态。</p>
</li>
<li><p>当我们向服务器发送请求后，服务器解析此请求，然后返回对应的响应，服务器负责完成这个过程，而且这个过程是完全独立的，服务器不会记录前后状态的变化，也就是缺少状态记录。</p>
</li>
</ul>
<ul>
<li><p><strong>会话</strong>：会话（对象）是用来存储特定用户进行会话所需的属性及配置信息的。</p>
</li>
<li><p><strong>cookie</strong>：</p>
<ul>
<li>指的是某些网站为了辨别用户身份、进行会话跟踪而存储在用户本地终端上的数据。</li>
<li>用来让服务器端记录客户端的相关状态。</li>
<li>模拟登录post请求后，由服务器端创建。</li>
</ul>
</li>
<li><p><strong>会话维持</strong>：</p>
<ul>
<li>当客户端第一次请求服务器时，服务器会返回一个响应对象，响应头中带有Set-Cookie字段，cookie会被客户端进行存储，该字段表明服务器已经为该客户端用户创建了一个会话对象，用来存储该用户的相关属性机器配置信息。</li>
<li>当浏览器下一次再请求该网站时，浏览器会把cookie放到请求头中一起提交给服务器，cookie中携带了对应会话的ID信息，服务器会检查该cookie即可找到对应的会话是什么，然后再判断会话来以此辨别用户状态。</li>
</ul>
</li>
</ul>
<p>要使爬虫带上cookie，有两种方法：</p>
<ul>
<li><p>手动处理：通过抓包工具获取cookie值，将该值封装到headers中。（不建议）</p>
<p>  如：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>:<span class="string">&#x27;xxxxxxxxx&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>自动处理：</p>
<ul>
<li>session会话对象：<pre><code>        - 作用：
            1. 可以进行请求的发送。
            2. 如果请求过程中产生了cookie，则该cookie会被自动存储/携带在该session对象中。
</code></pre>
<ul>
<li>创建一个session对象：session = requests.Session()</li>
<li>使用session对象进行模拟登录post请求的发送（cookie就会被存储在session中）<pre><code>  - session对象对个人主页对应的get请求进行发送（携带了cookie）
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="session模板"><a href="#session模板" class="headerlink" title="session模板"></a>session模板</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导包</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;&#x27;</span></span><br><span class="line">headers=&#123;&#125;</span><br><span class="line"><span class="comment">#创建会话对象,该会话对象可以调用get和post发起请求</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment">#使用会话对面对登录页面发起请求</span></span><br><span class="line">page_text = session.get(url=url,headers=headers).text</span><br></pre></td></tr></table></figure>



<p>实例：</p>
<p>模拟登录github并保存登陆后的页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">headers = &#123;</span><br><span class="line"> <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#创建会话对象,该会话对象可以调用get和post发起请求</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="comment">#使用会话对面对登录页面发起请求</span></span><br><span class="line">page_text = session.get(url=<span class="string">&#x27;https://github.com/login&#x27;</span>,headers=headers).text</span><br><span class="line"><span class="comment">#解析出动态的三个值</span></span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">timestamp = tree.xpath(<span class="string">&#x27;//*[@id=&quot;login&quot;]/div[4]/form/div/input[10]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">authenticity_token = tree.xpath(<span class="string">&#x27;//*[@id=&quot;login&quot;]/div[4]/form/input[1]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">timestamp_secret = tree.xpath(<span class="string">&#x27;//*[@id=&quot;login&quot;]/div[4]/form/div/input[11]/@value&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#指定模拟登录请求的url</span></span><br><span class="line">url = <span class="string">&#x27;https://github.com/session&#x27;</span></span><br><span class="line"><span class="comment">#参数封装（处理动态taken值）</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&#x27;commit&#x27;</span>: <span class="string">&#x27;Sign in&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;authenticity_token&#x27;</span>: authenticity_token,</span><br><span class="line"><span class="string">&#x27;login&#x27;</span>: <span class="string">&#x27;DueGin&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;Asdfg20020322.&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;trusted_device&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;webauthn-support&#x27;</span>: <span class="string">&#x27;supported&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;webauthn-iuvpaa-support&#x27;</span>: <span class="string">&#x27;supported&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;return_to&#x27;</span>: <span class="string">&#x27;https://github.com/login&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;allow_signup&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;client_id&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;integration&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;required_field_f2c6&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;timestamp&#x27;</span>: timestamp,</span><br><span class="line"><span class="string">&#x27;timestamp_secret&#x27;</span>: timestamp_secret</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#使用会话对象进行模拟登录请求发送（携带cookie）</span></span><br><span class="line">page_text = session.post(url=url,headers=headers,data=data).text</span><br><span class="line"><span class="comment">#持久化存储</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./git.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line"> fp.write(page_text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="IP代理"><a href="#IP代理" class="headerlink" title="IP代理"></a>IP代理</h2><h3 id="代理的作用"><a href="#代理的作用" class="headerlink" title="代理的作用"></a>代理的作用</h3><ul>
<li>突破自身IP访问的限制，访问一些平时不能访问的站点。</li>
<li>隐藏真实IP，免受攻击，防止自身IP被封锁</li>
</ul>
<h3 id="相关代理网站"><a href="#相关代理网站" class="headerlink" title="相关代理网站"></a>相关代理网站</h3><p>暂无用过！</p>
<p><strong>使用方法：</strong></p>
<p>proxy为IP地址</p>
<p><code>response = requests.get(url=url,headers=header,proxies=proxy)</code></p>
<p><strong>可以建一个列表，随机获取代理IP</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用随机函数时，需导包</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#不同的代理IP</span></span><br><span class="line">    proxy_list = [</span><br><span class="line">        &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;112.115.57.20:3128&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;121.41.171.223:3128&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">proxy = random.choice(proxy_list)</span><br><span class="line">response = requests.get(url=url,headers=header,proxies=proxy)</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="聚焦爬虫"><a href="#聚焦爬虫" class="headerlink" title="聚焦爬虫"></a>聚焦爬虫</h1><p><strong>爬取页面中指定的页面内容。</strong></p>
<ul>
<li><p>编码流程：</p>
<ul>
<li>指定url</li>
<li>发起请求</li>
<li>获取响应数据</li>
<li>数据解析</li>
<li>持久化存储</li>
</ul>
</li>
<li><p>数据解析分类：</p>
<ul>
<li>正则表达式</li>
<li>bs4</li>
<li>xpath（***）</li>
</ul>
</li>
</ul>
<p>数据解析原理概述：</p>
<ul>
<li><p>解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储</p>
<ol>
<li><p>进行指定标签的定位</p>
</li>
<li><p>标签或者标签对应的属性中存储的数据值进行提取（解析）</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTML源码：</span><br><span class="line">&lt;div class=&quot;thumb&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;/article/121721100&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img src=&quot;//pic.qiushibaike.com/system/pictures/12172/121721100/medium/DNXDX9TZ8SDU6OK2.jpg&quot; alt=&quot;指引我有前进的方向&quot;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><strong>正则解析：</strong></p>
<p><code>ex = &#39;&lt;div class=&quot;thumb&quot;&gt;.*?&lt;img src=&quot;(.*?)&quot; alt.*?&lt;/div&gt;&#39;</code></p>
<p><img src="/2021/09/28/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="alt 正则表达式"></p>
<h2 id="bs4"><a href="#bs4" class="headerlink" title="bs4"></a>bs4</h2><p>bs4进行数据解析</p>
<ul>
<li><p>数据解析的原理：</p>
<ol>
<li><p>标签定位</p>
</li>
<li><p>提取标签、标签属性中存储的数据值</p>
</li>
</ol>
</li>
<li><p>bs4数据解析的原理：</p>
<ul>
<li>1.实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中</li>
<li>2.通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取</li>
</ul>
</li>
<li><p>环境安装：</p>
<ul>
<li>pip install bs4</li>
<li>pip install lxml</li>
</ul>
</li>
</ul>
<h3 id="如何使用BeautifulSoup："><a href="#如何使用BeautifulSoup：" class="headerlink" title="如何使用BeautifulSoup："></a>如何使用BeautifulSoup：</h3><ul>
<li><p><code>from bs4 import BeautifulSoup</code></p>
</li>
<li><p>对象的实例化：</p>
<ol>
<li><p>将本地的html文档中的数据加载到该对象中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;./test.html&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">soup = BeautifulSoup(fp,<span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>将互联网上获取的页面源码加载到该对象中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">page_text = response.text</span><br><span class="line">soup = BeatifulSoup(page_text,<span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h4 id="1-根据标签名查找"><a href="#1-根据标签名查找" class="headerlink" title="1. 根据标签名查找"></a>1. 根据标签名查找</h4><ul>
<li>soup.a   只能找到第一个符合要求的标签</li>
</ul>
<h4 id="2-获取属性"><a href="#2-获取属性" class="headerlink" title="2. 获取属性"></a>2. 获取属性</h4><ul>
<li><p>soup.a.attrs  获取a所有的属性和属性值，返回一个字典</p>
</li>
<li><p>soup.a.attrs[‘href’]   获取href属性</p>
</li>
<li><p>soup.a[‘href’]   也可简写为这种形式</p>
</li>
</ul>
<h4 id="3-获取内容"><a href="#3-获取内容" class="headerlink" title="3. 获取内容"></a>3. 获取内容</h4><ul>
<li><p>soup.a.string</p>
</li>
<li><p>soup.a.text</p>
</li>
<li><p>soup.a.get_text()</p>
</li>
<li><p>text/get_text()：可以获取某一个标签中所有的文本内容</p>
</li>
<li><p>string：只可以获取该标签下面直系的文本内容</p>
</li>
</ul>
<p><strong>【注意】</strong>如果标签还有标签，那么string获取到的结果为None，而其它两个，可以获取文本内容</p>
<h4 id="4-find：找到第一个符合要求的标签"><a href="#4-find：找到第一个符合要求的标签" class="headerlink" title="4. find：找到第一个符合要求的标签"></a>4. find：找到第一个符合要求的标签</h4><ul>
<li><p><code>soup.find(&#39;a&#39;)</code>  找到第一个符合要求的</p>
</li>
<li><p><code>soup.find(&#39;a&#39;, title=&quot;xxx&quot;)</code></p>
</li>
<li><p><code>soup.find(&#39;a&#39;, alt=&quot;xxx&quot;)</code></p>
</li>
<li><p><code>soup.find(&#39;a&#39;, class_=&quot;xxx&quot;)</code></p>
</li>
<li><p><code>soup.find(&#39;a&#39;, id=&quot;xxx&quot;)</code></p>
</li>
</ul>
<h4 id="5-find-all：找到所有符合要求的标签"><a href="#5-find-all：找到所有符合要求的标签" class="headerlink" title="5. find_all：找到所有符合要求的标签"></a>5. find_all：找到所有符合要求的标签</h4><ul>
<li><p><code>soup.find_all(&#39;a&#39;)</code></p>
</li>
<li><p><code>soup.find_all([&#39;a&#39;,&#39;b&#39;])</code> 找到所有的a和b标签</p>
</li>
<li><p><code>soup.find_all(&#39;a&#39;, limit=2)</code>  限制前两个</p>
</li>
</ul>
<h4 id="6-根据选择器选择指定的内容"><a href="#6-根据选择器选择指定的内容" class="headerlink" title="6. 根据选择器选择指定的内容"></a>6. 根据选择器选择指定的内容</h4><ul>
<li>select(‘某种选择器（id，class，标签…选择器）’)，返回的是一个列表。</li>
<li>如：<code>select:soup.select(&#39;#feng&#39;)</code></li>
</ul>
<p>常见的选择器：标签选择器(a)、类选择器(.)、id选择器(#)</p>
<ul>
<li>层级选择器：<ul>
<li>soup.select(‘.tang &gt; ul &gt; li &gt; a &gt; .lala &gt; #nems’)：&gt;表示的是一个层级</li>
<li>soup.select(‘.tang &gt; ul a #nems’)：空格表示的多个层级</li>
</ul>
</li>
</ul>
<p><strong>【注意】</strong>select选择器返回<em><strong>永远是列表</strong></em>，需要通过下标提取指定的对象</p>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>爬取豆瓣TOP250电影信息及封面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> openpyxl.styles <span class="keyword">import</span> Font, Border, Side, PatternFill, colors, Alignment</span><br><span class="line"></span><br><span class="line">path=<span class="string">&#x27;./豆瓣&#x27;</span></span><br><span class="line">rank=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化一张工作表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_excel</span>(<span class="params">book,sh</span>):</span></span><br><span class="line">    <span class="comment"># 修改当前sheet标题</span></span><br><span class="line">    sh.title = <span class="string">&#x27;豆瓣TOP250&#x27;</span></span><br><span class="line">    row = [<span class="string">&#x27;排名&#x27;</span>,<span class="string">&#x27;电影&#x27;</span>,<span class="string">&#x27;电影别称&#x27;</span>,<span class="string">&#x27;电影类型&#x27;</span>,<span class="string">&#x27;电影评分&#x27;</span>]</span><br><span class="line">    rows = [<span class="string">&#x27;排名&#x27;</span>, <span class="string">&#x27;电影&#x27;</span>, <span class="string">&#x27;电影别称&#x27;</span>, <span class="string">&#x27;电影类型&#x27;</span>, <span class="string">&#x27;电影评分&#x27;</span>,<span class="string">&#x27;sssssssssssssss&#x27;</span>]</span><br><span class="line">    sh.append(row)</span><br><span class="line">    book.save(<span class="string">&#x27;豆瓣TOP250.xlsx&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;创建工作表完成！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取电影封面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_movie</span>(<span class="params">url,soup,len_movies</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, len_movies):</span><br><span class="line">        <span class="comment"># 每个电影名称（用bs4层级选择器寻找电影名）</span></span><br><span class="line">        img_name = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li img&#x27;</span>)[i][<span class="string">&#x27;alt&#x27;</span>]</span><br><span class="line">        path_img = os.getcwd() + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>) + img_name + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">        <span class="comment"># 电影图片（用bs4层级选择器寻找电影封面）</span></span><br><span class="line">        url_img_movie = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li img&#x27;</span>)[i][<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">        <span class="comment"># 获取图片数据并以二进制保存在img_movie里</span></span><br><span class="line">        img_movie = requests.get(url=url_img_movie, headers=header).content</span><br><span class="line">        <span class="comment"># 存储</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path_img, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="comment">#命令行清屏，pycharm无法清屏</span></span><br><span class="line">            os.system(<span class="string">&quot;cls&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;进度：&#x27;</span>+<span class="built_in">str</span>(i/len_movies)+<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">            fp.write(img_movie)</span><br><span class="line">        <span class="comment">#print(img_name + &#x27;已下载完成!&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#电影信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_movie_message</span>(<span class="params">soup,len_movies,book,sh</span>):</span></span><br><span class="line">    <span class="comment">#影名匹配模式</span></span><br><span class="line">    re_mov_name = <span class="string">&#x27;&lt;span class=&quot;title&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span></span><br><span class="line">    <span class="comment">#信息匹配模式</span></span><br><span class="line">    re_messa_movie = <span class="string">&#x27;&lt;br&gt;(.*?[\n]*?.*?[\n]*?.*?)&lt;/p&gt;&#x27;</span></span><br><span class="line">    <span class="comment">#其他影名匹配模式</span></span><br><span class="line">    re_oth_name = <span class="string">&#x27;&lt;span class=&quot;other&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span></span><br><span class="line">    <span class="comment"># 电影评分匹配模式</span></span><br><span class="line">    re_score = <span class="string">&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;([0-9]\.[0-9])&lt;/span&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, len_movies):</span><br><span class="line">        <span class="comment">#添加的内容</span></span><br><span class="line">        list_movie = []</span><br><span class="line">        <span class="keyword">global</span> rank</span><br><span class="line">        rank += <span class="number">1</span></span><br><span class="line">        list_movie.append(rank)</span><br><span class="line">        mov_name1 = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li&#x27;</span>)[i]</span><br><span class="line">        <span class="comment">#用正则表达式寻找电影名字</span></span><br><span class="line">        temp_mov_name = re.findall(pattern=re_mov_name, string=<span class="built_in">str</span>(mov_name1))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 拼接有多个名字的电影</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(temp_mov_name) &gt; <span class="number">1</span>:</span><br><span class="line">            mov_name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(temp_mov_name)):</span><br><span class="line">                mov_name += temp_mov_name[a]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mov_name = temp_mov_name[<span class="number">0</span>]</span><br><span class="line">        list_movie.append(mov_name)</span><br><span class="line">        <span class="comment">#print(mov_name)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 电影的其他名字</span></span><br><span class="line">        mov_oth_name = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li .other&#x27;</span>)[i]</span><br><span class="line">        <span class="comment">#用正则表达式寻找电影其他名字</span></span><br><span class="line">        mov_oth_name = re.findall(re_oth_name,<span class="built_in">str</span>(mov_oth_name))[<span class="number">0</span>].split(<span class="string">&#x27;\xa0&#x27;</span>)[<span class="number">2</span>]</span><br><span class="line">        list_movie.append(mov_oth_name)</span><br><span class="line">        <span class="built_in">print</span>(mov_oth_name)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#电影类型(待用正则优化)</span></span><br><span class="line">        type_movie = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li .bd&#x27;</span>)[i]</span><br><span class="line">        num_type_movie = <span class="built_in">str</span>(type_movie).find(<span class="string">&#x27;&lt;br/&gt;&#x27;</span>)</span><br><span class="line">        num_type_movie1 = <span class="built_in">str</span>(type_movie).find(<span class="string">&#x27;&lt;/p&gt;&#x27;</span>)</span><br><span class="line">        temp_num_type_movie = <span class="built_in">str</span>(type_movie)[num_type_movie:num_type_movie1]</span><br><span class="line">        list_movie.append(temp_num_type_movie[<span class="number">5</span>:-<span class="number">6</span>].strip())</span><br><span class="line">        <span class="comment">#print(temp_num_type_movie[5:-6].strip())</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 电影评分（用bs4层级选择器寻找评分，返回列表，并找出对应元素，第i+1个）</span></span><br><span class="line">        score_movie = soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li .star&#x27;</span>)[i]</span><br><span class="line">        <span class="comment">#用正则表达式寻找电影评分</span></span><br><span class="line">        score_movie = re.findall(re_score,<span class="built_in">str</span>(score_movie))</span><br><span class="line">        list_movie.append(score_movie[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#print(list_movie)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#将数据导入excel</span></span><br><span class="line">        sh.append(list_movie)</span><br><span class="line">        <span class="comment">#print(score_movie)</span></span><br><span class="line">        book.save(<span class="string">&#x27;豆瓣TOP250.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#网页头信息</span></span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https: // pagead2.googlesyndication.com /&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#图片头信息</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec - ch - ua - mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sec - ch - ua&#x27;</span>: <span class="string">&#x27;&quot;Google Chrome&quot;;v = &quot;89&quot;, &quot;Chromium&quot;;v = &quot;89&quot;, &quot;;Not A Brand&quot;;v = &quot;99&quot;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    url = <span class="string">&#x27;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&#x27;</span></span><br><span class="line">    <span class="comment"># 创建程序所在文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(path):</span><br><span class="line">        os.mkdir(path)</span><br><span class="line">    <span class="comment"># 将工作目录改为刚创建的文件夹里</span></span><br><span class="line">    os.chdir(path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一张excel对象</span></span><br><span class="line">    book = openpyxl.Workbook()</span><br><span class="line">    <span class="comment"># 创建新的工作簿</span></span><br><span class="line">    sh = book.active</span><br><span class="line">    <span class="comment"># 初始化一张工作表</span></span><br><span class="line">    start_excel(book=book, sh=sh)</span><br><span class="line">    <span class="comment">#页数</span></span><br><span class="line">    pagenum=-<span class="number">25</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        pagenum+=<span class="number">25</span></span><br><span class="line">        <span class="comment">#第n页的新网址</span></span><br><span class="line">        new_url=url.<span class="built_in">format</span>(pagenum)</span><br><span class="line">        <span class="comment">#获取整个网页源码</span></span><br><span class="line">        page_data = requests.get(url=new_url,headers=headers).text</span><br><span class="line">        <span class="comment">#煲汤实例化对象</span></span><br><span class="line">        soup = BeautifulSoup(page_data,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        <span class="comment">#寻找各个电影封面（用bs4层级选择器寻找封面所在标签）</span></span><br><span class="line">        len_movies = <span class="built_in">len</span>(soup.select(<span class="string">&#x27;#wrapper .grid_view &gt; li img&#x27;</span>))</span><br><span class="line">        <span class="comment">#收集每部电影的封面</span></span><br><span class="line">        get_img_movie(url=new_url,soup=soup,len_movies=len_movies)</span><br><span class="line">        <span class="comment"># 电影信息</span></span><br><span class="line">        get_movie_message(soup=soup,len_movies=len_movies,book=book,sh=sh)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        sh.cell(<span class="number">1</span>, i).font = Font(size=<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 设置行高</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">251</span>):</span><br><span class="line">        sh.row_dimensions[i].height = <span class="number">25</span></span><br><span class="line">    <span class="comment"># 设置列宽</span></span><br><span class="line">    sh.row_dimensions[<span class="number">1</span>].width = <span class="number">5</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>,<span class="number">70</span>):</span><br><span class="line">        sh.column_dimensions[<span class="built_in">chr</span>(i)].width = <span class="number">30</span></span><br><span class="line">    <span class="comment"># 通过参数horizontal和vertical来设置文字在单元格里的对齐方式，此外设置值还可为left和right</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">252</span>):</span><br><span class="line">            sh.cell(j,i).alignment = Alignment(horizontal=<span class="string">&#x27;center&#x27;</span>, vertical=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">    book.save(<span class="string">&#x27;豆瓣TOP250.xlsx&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取完成！&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><ul>
<li>xpath解析原理：<ol>
<li>实例化一个etree的对象，且需要将被解析的页面源码数据加载到该对象中。</li>
<li>调用etree对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获。</li>
</ol>
</li>
<li>环境的安装：<ul>
<li>pip install lxml</li>
</ul>
</li>
</ul>
<h3 id="xpath模板"><a href="#xpath模板" class="headerlink" title="xpath模板"></a>xpath模板</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- 本地文件：</span><br><span class="line">tree = etree.parse(文件名)</span><br><span class="line">data = tree.xpath(<span class="string">&quot;xpath表达式&quot;</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"></span><br><span class="line">- 网络数据：</span><br><span class="line">tree = etree.HTML(网页内容字符串)</span><br><span class="line">data = tree.xpath(<span class="string">&quot;xpath表达式&quot;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<h3 id="常用xpath表达式"><a href="#常用xpath表达式" class="headerlink" title="常用xpath表达式"></a><strong>常用xpath表达式</strong></h3><ul>
<li><p>如何实例化一个etree对象：<code>from lxml import etree</code></p>
<ol>
<li>将本地的html文档中的源码数据加载到etree对象中：<pre><code>    `etree.parse(filePath)`
</code></pre>
</li>
<li>可以将从互联网上获取的源码数据加载到该对象中<pre><code>    `etree.HTML(&#39;page_text&#39;)`
</code></pre>
</li>
</ol>
<ul>
<li><code>etree.xpath(&#39;xpath表达式&#39;)</code></li>
</ul>
<ol>
<li><p>**/**：表示的是从根节点开始定位。表示的是一个层级。</p>
</li>
<li><p>**//**：表示的是多个层级。可以表示从任意位置开始定位。</p>
</li>
<li><p><strong>属性定位：</strong></p>
<ul>
<li><p>找到class属性值为song的div标签</p>
</li>
<li><p><code>//div[@class=&quot;song&quot;] </code></p>
</li>
</ul>
</li>
<li><p><strong>索引定位：</strong></p>
<ul>
<li><em><strong>索引是从1开始的</strong></em></li>
<li>找到class属性值为tang的div的直系子标签ul下的第二个子标签li下的直系子标签a</li>
<li><code>//div[@class=&quot;tang&quot;]/ul/li[2]/a</code></li>
</ul>
</li>
<li><p><strong>逻辑运算：</strong></p>
<ul>
<li>找到href属性值为空且class属性值为du的a标签</li>
<li><code>//a[@href=&quot;&quot; and @class=&quot;du&quot;]</code></li>
</ul>
</li>
<li><p><strong>模糊匹配：</strong></p>
<ul>
<li><code>//div[contains(@class, &quot;ng&quot;)]</code></li>
<li><code>//div[starts-with(@class, &quot;ta&quot;)]</code></li>
</ul>
</li>
<li><p><strong>取文本：</strong></p>
<ul>
<li>/text() 获取的是标签中直系的文本内容</li>
<li>//text() 标签中直系和非直系的文本内容（所有的文本内容）</li>
<li><code>//div[@class=&quot;song&quot;]/p[1]/text()</code></li>
<li><code>//div[@class=&quot;tang&quot;]//text()</code></li>
</ul>
</li>
<li><p><strong>取属性：</strong></p>
<ul>
<li><code>//div[@class=&quot;tang&quot;]//li[2]/a/@href</code></li>
</ul>
</li>
</ol>
</li>
</ul>
<p><em><strong>解析后标签仍是标签的，还能再解析</strong></em></p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">li_list = tree.xpath(&#x27;//ul[@class=&quot;house-list-wrap&quot;]/li&#x27;)</span><br><span class="line">title = li_list[0].xpath(&#x27;.//div[@class=&quot;list-info&quot;]/h2/a/text()&#x27;)[0]</span><br></pre></td></tr></table></figure>



<p>实例：</p>
<p>解析彼岸图网的图片，并打印出网址和图片名<a href="http://pic.netbian.com/4kmeinv/">http://pic.netbian.com/4kmeinv/</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree </span><br><span class="line">url = <span class="string">&#x27;http://pic.netbian.com/4kmeinv/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url=url,headers=headers)</span><br><span class="line"><span class="comment">#获取页面原始编码格式</span></span><br><span class="line"><span class="built_in">print</span>(response.encoding)</span><br><span class="line">page_text = response.text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;slist&quot;]/ul/li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    img_url = <span class="string">&#x27;http://pic.netbian.com&#x27;</span>+li.xpath(<span class="string">&#x27;./a/img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    img_name = li.xpath(<span class="string">&#x27;./a/img/@alt&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    img_name = img_name.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(img_url,img_name)</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h1><ul>
<li>基于浏览器自动化的一个模块</li>
</ul>
<p>selenium最初是一个自动化测试工具，而爬虫中使用它主要是为了解决requests无法直接执行JavaScript代码的问题 selenium 本质是通过驱动浏览器，完全模拟浏览器的操作，比如跳转、输入、点击、下拉等，来拿到网页渲染之后的结果，可支持多种浏览器</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>环境安装：<code>pip install selenium</code></p>
<ul>
<li><p>下载浏览器驱动：</p>
<ul>
<li><p><strong>谷歌浏览器驱动：</strong></p>
<p><a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p>
</li>
<li><p><strong>Edge浏览器：</strong></p>
<p><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></p>
</li>
</ul>
</li>
</ul>
<p><strong>【注意】驱动版本对应浏览器版本</strong></p>
<p>谷歌浏览器版本对应：<a href="https://blog.csdn.net/huilan_same/article/details/51896672">https://blog.csdn.net/huilan_same/article/details/51896672</a></p>
<h2 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h2><h3 id="谷歌浏览器："><a href="#谷歌浏览器：" class="headerlink" title="谷歌浏览器："></a>谷歌浏览器：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#死蓝鸟爬虫包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#时间包</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment">#谷歌浏览器无头浏览器包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="comment">#谷歌浏览器规避检测包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ChromeOptions</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>):</span></span><br><span class="line">		<span class="comment">#创建谷歌浏览器</span></span><br><span class="line">        option = Options()</span><br><span class="line">        <span class="comment">#谷歌浏览器规避检测</span></span><br><span class="line">		option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>, [<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line">        <span class="comment">#控制chrome以无界面模式打开</span></span><br><span class="line">        option.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">        <span class="comment">#谷歌文档提到需要加上这个属性来规避bug</span></span><br><span class="line">        option.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#实例化一个浏览器对象(executable_path是浏览器驱动路径，options是规避检测参数+无头浏览器参数)</span></span><br><span class="line">        self.bro = webdriver.Chrome(executable_path=<span class="string">&#x27;./chromedriver.exe&#x27;</span>,options=option)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;加载中...&#x27;</span>)</span><br><span class="line">        <span class="comment">#让浏览器发起一个指定url对应请求</span></span><br><span class="line">		self.bro.get(url)<span class="comment">#url</span></span><br><span class="line">        <span class="comment">#等待加载</span></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="comment">#退出浏览器</span></span><br><span class="line">        bro.quit()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = Spider()</span><br><span class="line">    s.main()</span><br></pre></td></tr></table></figure>



<h3 id="Edge浏览器："><a href="#Edge浏览器：" class="headerlink" title="Edge浏览器："></a>Edge浏览器：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#死蓝鸟爬虫包</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#时间包</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="comment">#Edge浏览器包</span></span><br><span class="line"><span class="keyword">from</span> msedge.selenium_tools <span class="keyword">import</span> Edge</span><br><span class="line"><span class="comment">#Edge浏览器规避检测包</span></span><br><span class="line"><span class="keyword">from</span> msedge.selenium_tools <span class="keyword">import</span> EdgeOptions</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spider</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">		<span class="comment">#创建Edge浏览器</span></span><br><span class="line">        edge_options = EdgeOptions()</span><br><span class="line">        <span class="comment">#使用谷歌内核</span></span><br><span class="line">        edge_options.use_chromium = <span class="literal">True</span></span><br><span class="line">        <span class="comment">#Edge规避检测</span></span><br><span class="line">        edge_options.add_argument(<span class="string">&#x27;--disable-blink-features=AutomationControlled&#x27;</span>)</span><br><span class="line">        <span class="comment"># 加上无头浏览器</span></span><br><span class="line">        edge_options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line">        <span class="comment"># 谷歌文档提到需要加上这个属性来规避bug</span></span><br><span class="line">        edge_options.add_argument(<span class="string">&quot;disable-gpu&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;加载中...&#x27;</span>)</span><br><span class="line">        <span class="comment">#实例化一个浏览器对象(executable_path是浏览器驱动路径，options是规避检测参数+无头浏览器参数)</span></span><br><span class="line">        self.bro = Edge(executable_path=<span class="string">&#x27;./msedgedriver.exe&#x27;</span>,options=edge_options)</span><br><span class="line">        <span class="comment">#让浏览器发起一个指定url对应请求</span></span><br><span class="line">		self.bro.get(url)<span class="comment">#url</span></span><br><span class="line">        <span class="comment">#等待加载</span></span><br><span class="line">        sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="comment">#退出浏览器</span></span><br><span class="line">        bro.quit()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = Spider()</span><br><span class="line">    s.main()</span><br></pre></td></tr></table></figure>



<h2 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h2><h3 id="浏览器创建"><a href="#浏览器创建" class="headerlink" title="浏览器创建"></a>浏览器创建</h3><p>Selenium支持非常多的浏览器，如Chrome、Firefox、Edge等，还有Android、BlackBerry等手机端的浏览器。另外，也支持无界面浏览器PhantomJS</p>
<p>创建好浏览器，规避好检测和bug等一系列操作后</p>
<p>实例化浏览器对象</p>
<p><code>bro = Edge(executable_path=&#39;./msedgedriver.exe&#39;,options=edge_options)</code></p>
<ul>
<li><p>获取页面源码</p>
<p><code>page_text=bro.page_source</code></p>
</li>
<li><p>截取某标签范围图片（code_img_ele是图片标签）<br><code>code_img_ele.screenshot(&#39;code_img.png&#39;)</code></p>
<p>【说明】code_img.png可以指定的文件名和路径，不写路径默认保存在程序所在目录</p>
<p><strong>【注意】</strong>只能保存为.png</p>
</li>
</ul>
<h3 id="标签元素定位"><a href="#标签元素定位" class="headerlink" title="标签元素定位"></a>标签元素定位</h3><p>webdriver 提供了一系列的元素定位方法，常用的有以下几种：</p>
<ul>
<li><p>通过标签<strong>属性id</strong>查找标签：</p>
<p><code>find_element_by_id(&quot;id_vaule&quot;)</code></p>
</li>
<li><p>通过xpath查找标签：</p>
<p><code>find_element_by_xpath()</code></p>
</li>
<li><p>通过selector选择器查找标签：</p>
<p><code>find_element_by_css_selector()</code></p>
</li>
<li><p>通过标签属性class查找标签：</p>
<p><code>find_element_by_class_name(&quot;class_name&quot;)</code></p>
</li>
<li><p>通过标签属性name查找标签：</p>
<p><code>find_element_by_name(&quot;name_vaule&quot;)</code></p>
</li>
<li><p>通过<strong>标签名</strong>查找标签：</p>
<p><code>find_element_by_tag_name(&quot;tag_name_vaule&quot;)</code></p>
</li>
<li><p>通过含有链接的标签下的目标文本查找标签：</p>
<p><code>find_element_by_link_text(&quot;text_vaule&quot;)</code></p>
</li>
</ul>
<ul>
<li><p>find_element_by_xxx找的是第一个符合条件的标签</p>
</li>
<li><p>find_element<strong>s</strong>_by_xxx找的是所有符合条件的标签。</p>
</li>
<li><p>都是以列表形式返回</p>
</li>
</ul>
<p>常用是前四种</p>
<p><strong>【说明】</strong></p>
<ul>
<li><p>id是每个网页源码唯一的，除非源码里有iframe</p>
</li>
<li><p>selector选择器类似于bs4的匹配模式</p>
</li>
<li><p>xpath和selector可以在浏览器查看源码中直接右键Copy获取</p>
</li>
<li><p>用 find_element_by_link_text 方式定位，标签必须是含有herf的属性，才能成功</p>
</li>
</ul>
<h3 id="处理iframe"><a href="#处理iframe" class="headerlink" title="处理iframe"></a>处理iframe</h3><pre><code>- 如果定位的标签存在于iframe标签之中，则必须使用`bro.switch_to.frame(id)`转换查找标签的作用域
</code></pre>
<h3 id="selenium动作链"><a href="#selenium动作链" class="headerlink" title="selenium动作链"></a>selenium动作链</h3><p>使用时应包含：</p>
<p><code>from selenium.webdriver import ActionChains</code></p>
<ul>
<li><p>实例化一个动作链对象：<code>action = ActionChains(bro)</code></p>
</li>
<li><p>长按且点击操作（div为标签）：<code>click_and_hold(div)</code></p>
</li>
<li><p>x水平方向 y竖直方向 的像素：<code>move_by_offset(x,y)</code></p>
</li>
<li><p>perform()让动作链立即执行</p>
<p><code>action.move_by_offset(17,0).perform()</code>立即执行</p>
</li>
<li><p>统一释放该对象的动作链：<code>action.release()</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
